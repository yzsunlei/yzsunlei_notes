<svg xmlns:ev="http://www.w3.org/2001/xml-events" ed:hSpacing="30" ed:vSpacing="30" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ed="https://www.edrawsoft.cn/xml/2017/SVGExtensions/" viewBox="0 0 1333 6272" xmlns="http://www.w3.org/2000/svg" ed:name="Page-1" id="page100" width="1333" height="6272"><style type="text/css"><![CDATA[
g[ed\:togtopicid],g[ed\:hyperlink],g[ed\:comment],g[ed\:note] {cursor:pointer;}
g[id] {-moz-user-select: none;-ms-user-select: none;user-select: none;}
svg text::selection,svg tspan::selection{background-color: #4285f4;color: #ffffff;fill: #ffffff;}
.st2 {fill:#303030;font-family:微软雅黑;font-size:12pt}
.st3 {fill:#454545;font-family:微软雅黑;font-size:10pt}
.st1 {fill:#ffffff;font-family:微软雅黑;font-size:14pt}
]]></style><defs><linearGradient x1="0%" y1="0%" id="lg1" y2="100%" x2="0%"><stop stop-color="#ffffff" offset="0"/><stop stop-color="#f0f5f0" offset="0.25"/><stop stop-color="#e1ebe1" offset="0.75"/><stop stop-color="#c8d7c8" offset="1"/></linearGradient></defs><rect fill="#ffffff" width="1333" height="6272" y="0" x="0"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-79.5,1377.6C25.1,1082.5,-89.9,-1406.1,102,-1406.1" transform="matrix(1,0,0,1,266,1730)" stroke-linejoin="round" id="103" ed:parentid="101" ed:tosuperid="102"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-76.6,1047.6C23,793.4,-88.1,-1076.1,102,-1076.1" transform="matrix(1,0,0,1,266,2060)" stroke-linejoin="round" id="105" ed:parentid="101" ed:tosuperid="104"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-72.6,737.9C20,528.3,-85.5,-766.4,102,-766.4" transform="matrix(1,0,0,1,266,2370)" stroke-linejoin="round" id="107" ed:parentid="101" ed:tosuperid="106"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-61,300.9C9.7,174.5,-70.7,-329.4,102,-329.4" transform="matrix(1,0,0,1,266,2807)" stroke-linejoin="round" id="109" ed:parentid="101" ed:tosuperid="108"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-55.8,-174.4C2.4,-82.1,-33.5,202.9,102,202.9" transform="matrix(1,0,0,1,266,3339)" stroke-linejoin="round" id="111" ed:parentid="101" ed:tosuperid="110"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-70.1,-604.4C18.1,-416.8,-83.8,632.9,102,632.9" transform="matrix(1,0,0,1,266,3769)" stroke-linejoin="round" id="113" ed:parentid="101" ed:tosuperid="112"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-76,-985.6C22.5,-739.7,-87.7,1014.1,102,1014.1" transform="matrix(1,0,0,1,266,4150)" stroke-linejoin="round" id="115" ed:parentid="101" ed:tosuperid="114"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-79.3,-1354.4C25,-1061.9,-89.8,1382.9,102,1382.9" transform="matrix(1,0,0,1,266,4519)" stroke-linejoin="round" id="117" ed:parentid="101" ed:tosuperid="116"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,64.1C5.4,64.1,-13.5,-64.1,13.5,-64.1" transform="matrix(1,0,0,1,563,260)" stroke-linejoin="round" id="121" ed:parentid="102" ed:tosuperid="120"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-76.4C5.4,-76.4,-13.5,76.4,13.5,76.4" transform="matrix(1,0,0,1,563,400)" stroke-linejoin="round" id="123" ed:parentid="102" ed:tosuperid="122"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-146.6C5.4,-146.6,-13.5,146.6,13.5,146.6" transform="matrix(1,0,0,1,563,470)" stroke-linejoin="round" id="125" ed:parentid="102" ed:tosuperid="124"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,56C5.4,56,-13.5,-56,13.5,-56" transform="matrix(1,0,0,1,702,140)" stroke-linejoin="round" id="127" ed:parentid="120" ed:tosuperid="126"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,40.5C4.8,40.5,-12.1,-40.5,13.5,-40.5" transform="matrix(1,0,0,1,702,155)" stroke-linejoin="round" id="129" ed:parentid="120" ed:tosuperid="128"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,6C-1.3,6,2.1,-6,13.5,-6" transform="matrix(1,0,0,1,702,190)" stroke-linejoin="round" id="131" ed:parentid="120" ed:tosuperid="130"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-9.5C-0.5,-9.5,0.2,9.5,13.5,9.5" transform="matrix(1,0,0,1,702,205)" stroke-linejoin="round" id="133" ed:parentid="120" ed:tosuperid="132"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" transform="matrix(1,0,0,1,702,221)" stroke-linejoin="round" id="135" ed:parentid="120" ed:tosuperid="134"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-40.5C4.8,-40.5,-12.1,40.5,13.5,40.5" transform="matrix(1,0,0,1,702,236)" stroke-linejoin="round" id="137" ed:parentid="120" ed:tosuperid="136"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-75C5.4,-75,-13.5,75,13.5,75" transform="matrix(1,0,0,1,702,271)" stroke-linejoin="round" id="139" ed:parentid="120" ed:tosuperid="138"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,40.5C4.8,40.5,-12.1,-40.5,13.5,-40.5" transform="matrix(1,0,0,1,662,436)" stroke-linejoin="round" id="141" ed:parentid="122" ed:tosuperid="140"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" transform="matrix(1,0,0,1,662,461)" stroke-linejoin="round" id="143" ed:parentid="122" ed:tosuperid="142"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-9.5C-0.5,-9.5,0.2,9.5,13.5,9.5" transform="matrix(1,0,0,1,662,486)" stroke-linejoin="round" id="145" ed:parentid="122" ed:tosuperid="144"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" transform="matrix(1,0,0,1,662,502)" stroke-linejoin="round" id="147" ed:parentid="122" ed:tosuperid="146"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-50C5.3,-50,-13.4,50,13.5,50" transform="matrix(1,0,0,1,662,527)" stroke-linejoin="round" id="149" ed:parentid="122" ed:tosuperid="148"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" transform="matrix(1,0,0,1,785,622)" stroke-linejoin="round" id="151" ed:parentid="124" ed:tosuperid="150"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,110.6C5.4,110.6,-13.5,-110.6,13.5,-110.6" transform="matrix(1,0,0,1,535,873)" stroke-linejoin="round" id="153" ed:parentid="104" ed:tosuperid="152"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,10.6C-0.2,10.6,-0.3,-10.6,13.5,-10.6" transform="matrix(1,0,0,1,535,973)" stroke-linejoin="round" id="155" ed:parentid="104" ed:tosuperid="154"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-106.1C5.4,-106.1,-13.5,106.1,13.5,106.1" transform="matrix(1,0,0,1,535,1090)" stroke-linejoin="round" id="157" ed:parentid="104" ed:tosuperid="156"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,29.8C3.5,29.8,-9,-29.8,13.5,-29.8" transform="matrix(1,0,0,1,651,733)" stroke-linejoin="round" id="161" ed:parentid="152" ed:tosuperid="160"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" transform="matrix(1,0,0,1,651,767)" stroke-linejoin="round" id="163" ed:parentid="152" ed:tosuperid="162"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-39.3C4.7,-39.3,-11.8,39.3,13.5,39.3" transform="matrix(1,0,0,1,651,802)" stroke-linejoin="round" id="165" ed:parentid="152" ed:tosuperid="164"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,45.3C5.1,45.3,-12.9,-45.3,13.5,-45.3" transform="matrix(1,0,0,1,677,917)" stroke-linejoin="round" id="167" ed:parentid="154" ed:tosuperid="166"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,10.8C-0.2,10.8,-0.4,-10.8,13.5,-10.8" transform="matrix(1,0,0,1,677,952)" stroke-linejoin="round" id="169" ed:parentid="154" ed:tosuperid="168"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" transform="matrix(1,0,0,1,677,967)" stroke-linejoin="round" id="171" ed:parentid="154" ed:tosuperid="170"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-29.8C3.5,-29.8,-9,29.8,13.5,29.8" transform="matrix(1,0,0,1,677,992)" stroke-linejoin="round" id="173" ed:parentid="154" ed:tosuperid="172"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-45.3C5.1,-45.3,-12.9,45.3,13.5,45.3" transform="matrix(1,0,0,1,677,1008)" stroke-linejoin="round" id="175" ed:parentid="154" ed:tosuperid="174"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,56C5.4,56,-13.5,-56,13.5,-56" transform="matrix(1,0,0,1,677,1140)" stroke-linejoin="round" id="177" ed:parentid="156" ed:tosuperid="176"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,40.5C4.8,40.5,-12.1,-40.5,13.5,-40.5" transform="matrix(1,0,0,1,677,1156)" stroke-linejoin="round" id="179" ed:parentid="156" ed:tosuperid="178"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" transform="matrix(1,0,0,1,677,1181)" stroke-linejoin="round" id="181" ed:parentid="156" ed:tosuperid="180"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" transform="matrix(1,0,0,1,677,1196)" stroke-linejoin="round" id="183" ed:parentid="156" ed:tosuperid="182"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-15.5C0.8,-15.5,-2.8,15.5,13.5,15.5" transform="matrix(1,0,0,1,677,1212)" stroke-linejoin="round" id="185" ed:parentid="156" ed:tosuperid="184"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-31C3.7,-31,-9.4,31,13.5,31" transform="matrix(1,0,0,1,677,1227)" stroke-linejoin="round" id="187" ed:parentid="156" ed:tosuperid="186"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-56C5.4,-56,-13.5,56,13.5,56" transform="matrix(1,0,0,1,677,1252)" stroke-linejoin="round" id="189" ed:parentid="156" ed:tosuperid="188"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,93.9C5.4,93.9,-13.5,-93.9,13.5,-93.9" transform="matrix(1,0,0,1,506,1509)" stroke-linejoin="round" id="191" ed:parentid="106" ed:tosuperid="190"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-38.9C4.6,-38.9,-11.7,38.9,13.5,38.9" transform="matrix(1,0,0,1,506,1642)" stroke-linejoin="round" id="193" ed:parentid="106" ed:tosuperid="192"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" transform="matrix(1,0,0,1,625,1400)" stroke-linejoin="round" id="195" ed:parentid="190" ed:tosuperid="194"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" transform="matrix(1,0,0,1,625,1416)" stroke-linejoin="round" id="197" ed:parentid="190" ed:tosuperid="196"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" transform="matrix(1,0,0,1,625,1441)" stroke-linejoin="round" id="199" ed:parentid="190" ed:tosuperid="198"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,82.8C5.4,82.8,-13.5,-82.8,13.5,-82.8" transform="matrix(1,0,0,1,704,1598)" stroke-linejoin="round" id="201" ed:parentid="192" ed:tosuperid="200"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,67.3C5.4,67.3,-13.5,-67.3,13.5,-67.3" transform="matrix(1,0,0,1,704,1614)" stroke-linejoin="round" id="203" ed:parentid="192" ed:tosuperid="202"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,32.8C3.9,32.8,-10,-32.8,13.5,-32.8" transform="matrix(1,0,0,1,704,1648)" stroke-linejoin="round" id="205" ed:parentid="192" ed:tosuperid="204"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" transform="matrix(1,0,0,1,704,1673)" stroke-linejoin="round" id="207" ed:parentid="192" ed:tosuperid="206"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-7.8C-0.9,-7.8,1.2,7.8,13.5,7.8" transform="matrix(1,0,0,1,704,1689)" stroke-linejoin="round" id="209" ed:parentid="192" ed:tosuperid="208"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-23.3C2.4,-23.3,-6.4,23.3,13.5,23.3" transform="matrix(1,0,0,1,704,1704)" stroke-linejoin="round" id="211" ed:parentid="192" ed:tosuperid="210"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-57.8C5.4,-57.8,-13.5,57.8,13.5,57.8" transform="matrix(1,0,0,1,704,1739)" stroke-linejoin="round" id="213" ed:parentid="192" ed:tosuperid="212"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-92.3C5.4,-92.3,-13.5,92.3,13.5,92.3" transform="matrix(1,0,0,1,704,1773)" stroke-linejoin="round" id="215" ed:parentid="192" ed:tosuperid="214"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,134.4C5.4,134.4,-13.5,-134.4,13.5,-134.4" transform="matrix(1,0,0,1,514,2343)" stroke-linejoin="round" id="217" ed:parentid="108" ed:tosuperid="216"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-108.4C5.4,-108.4,-13.5,108.4,13.5,108.4" transform="matrix(1,0,0,1,514,2586)" stroke-linejoin="round" id="219" ed:parentid="108" ed:tosuperid="218"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-225.6C5.4,-225.6,-13.5,225.6,13.5,225.6" transform="matrix(1,0,0,1,514,2703)" stroke-linejoin="round" id="221" ed:parentid="108" ed:tosuperid="220"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-273.9C5.4,-273.9,-13.5,273.9,13.5,273.9" transform="matrix(1,0,0,1,514,2751)" stroke-linejoin="round" id="223" ed:parentid="108" ed:tosuperid="222"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,133.3C5.4,133.3,-13.5,-133.3,13.5,-133.3" transform="matrix(1,0,0,1,639,2075)" stroke-linejoin="round" id="225" ed:parentid="216" ed:tosuperid="224"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,79.8C5.4,79.8,-13.5,-79.8,13.5,-79.8" transform="matrix(1,0,0,1,639,2129)" stroke-linejoin="round" id="227" ed:parentid="216" ed:tosuperid="226"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,54.8C5.4,54.8,-13.5,-54.8,13.5,-54.8" transform="matrix(1,0,0,1,639,2154)" stroke-linejoin="round" id="229" ed:parentid="216" ed:tosuperid="228"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,10.8C-0.2,10.8,-0.4,-10.8,13.5,-10.8" transform="matrix(1,0,0,1,639,2198)" stroke-linejoin="round" id="231" ed:parentid="216" ed:tosuperid="230"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-14.3C0.6,-14.3,-2.2,14.3,13.5,14.3" transform="matrix(1,0,0,1,639,2223)" stroke-linejoin="round" id="233" ed:parentid="216" ed:tosuperid="232"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-39.3C4.7,-39.3,-11.8,39.3,13.5,39.3" transform="matrix(1,0,0,1,639,2248)" stroke-linejoin="round" id="235" ed:parentid="216" ed:tosuperid="234"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-73.8C5.4,-73.8,-13.5,73.8,13.5,73.8" transform="matrix(1,0,0,1,639,2282)" stroke-linejoin="round" id="237" ed:parentid="216" ed:tosuperid="236"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-98.8C5.4,-98.8,-13.5,98.8,13.5,98.8" transform="matrix(1,0,0,1,639,2307)" stroke-linejoin="round" id="239" ed:parentid="216" ed:tosuperid="238"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-142.8C5.4,-142.8,-13.5,142.8,13.5,142.8" transform="matrix(1,0,0,1,639,2351)" stroke-linejoin="round" id="241" ed:parentid="216" ed:tosuperid="240"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,75C5.4,75,-13.5,-75,13.5,-75" transform="matrix(1,0,0,1,627,2619)" stroke-linejoin="round" id="243" ed:parentid="218" ed:tosuperid="242"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,50C5.3,50,-13.4,-50,13.5,-50" transform="matrix(1,0,0,1,627,2644)" stroke-linejoin="round" id="245" ed:parentid="218" ed:tosuperid="244"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" transform="matrix(1,0,0,1,627,2679)" stroke-linejoin="round" id="247" ed:parentid="218" ed:tosuperid="246"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-9.5C-0.5,-9.5,0.2,9.5,13.5,9.5" transform="matrix(1,0,0,1,627,2704)" stroke-linejoin="round" id="249" ed:parentid="218" ed:tosuperid="248"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-34.5C4.1,-34.5,-10.5,34.5,13.5,34.5" transform="matrix(1,0,0,1,627,2729)" stroke-linejoin="round" id="251" ed:parentid="218" ed:tosuperid="250"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-59.5C5.4,-59.5,-13.5,59.5,13.5,59.5" transform="matrix(1,0,0,1,627,2754)" stroke-linejoin="round" id="253" ed:parentid="218" ed:tosuperid="252"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-84.5C5.4,-84.5,-13.5,84.5,13.5,84.5" transform="matrix(1,0,0,1,627,2779)" stroke-linejoin="round" id="255" ed:parentid="218" ed:tosuperid="254"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" transform="matrix(1,0,0,1,736,2921)" stroke-linejoin="round" id="257" ed:parentid="220" ed:tosuperid="256"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-17.3C1.2,-17.3,-3.7,17.3,13.5,17.3" transform="matrix(1,0,0,1,736,2946)" stroke-linejoin="round" id="259" ed:parentid="220" ed:tosuperid="258"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" transform="matrix(1,0,0,1,717,3010)" stroke-linejoin="round" id="261" ed:parentid="222" ed:tosuperid="260"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" transform="matrix(1,0,0,1,717,3025)" stroke-linejoin="round" id="263" ed:parentid="222" ed:tosuperid="262"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-15.5C0.8,-15.5,-2.8,15.5,13.5,15.5" transform="matrix(1,0,0,1,717,3041)" stroke-linejoin="round" id="265" ed:parentid="222" ed:tosuperid="264"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,129.6C5.4,129.6,-13.5,-129.6,13.5,-129.6" transform="matrix(1,0,0,1,607,3412)" stroke-linejoin="round" id="267" ed:parentid="110" ed:tosuperid="266"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-28.1C3.2,-28.1,-8.4,28.1,13.5,28.1" transform="matrix(1,0,0,1,607,3570)" stroke-linejoin="round" id="269" ed:parentid="110" ed:tosuperid="268"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-121.6C5.4,-121.6,-13.5,121.6,13.5,121.6" transform="matrix(1,0,0,1,607,3663)" stroke-linejoin="round" id="271" ed:parentid="110" ed:tosuperid="270"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-191.9C5.4,-191.9,-13.5,191.9,13.5,191.9" transform="matrix(1,0,0,1,607,3734)" stroke-linejoin="round" id="273" ed:parentid="110" ed:tosuperid="272"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,124.9C5.4,124.9,-13.5,-124.9,13.5,-124.9" transform="matrix(1,0,0,1,522,4277)" stroke-linejoin="round" id="275" ed:parentid="112" ed:tosuperid="274"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,21.9C2.1,21.9,-5.8,-21.9,13.5,-21.9" transform="matrix(1,0,0,1,522,4380)" stroke-linejoin="round" id="277" ed:parentid="112" ed:tosuperid="276"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-38.9C4.6,-38.9,-11.7,38.9,13.5,38.9" transform="matrix(1,0,0,1,522,4441)" stroke-linejoin="round" id="279" ed:parentid="112" ed:tosuperid="278"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-124.6C5.4,-124.6,-13.5,124.6,13.5,124.6" transform="matrix(1,0,0,1,522,4526)" stroke-linejoin="round" id="281" ed:parentid="112" ed:tosuperid="280"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,73.6C5.4,73.6,-13.5,-73.6,13.5,-73.6" transform="matrix(1,0,0,1,538,5091)" stroke-linejoin="round" id="283" ed:parentid="114" ed:tosuperid="282"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,9.9C-0.4,9.9,0,-9.9,13.5,-9.9" transform="matrix(1,0,0,1,538,5154)" stroke-linejoin="round" id="285" ed:parentid="114" ed:tosuperid="284"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-30.6C3.6,-30.6,-9.3,30.6,13.5,30.6" transform="matrix(1,0,0,1,538,5195)" stroke-linejoin="round" id="287" ed:parentid="114" ed:tosuperid="286"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-118.1C5.4,-118.1,-13.5,118.1,13.5,118.1" transform="matrix(1,0,0,1,538,5282)" stroke-linejoin="round" id="289" ed:parentid="114" ed:tosuperid="288"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,109.4C5.4,109.4,-13.5,-109.4,13.5,-109.4" transform="matrix(1,0,0,1,554,5792)" stroke-linejoin="round" id="291" ed:parentid="116" ed:tosuperid="290"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-6.1C-1.3,-6.1,2.1,6.1,13.5,6.1" transform="matrix(1,0,0,1,554,5908)" stroke-linejoin="round" id="293" ed:parentid="116" ed:tosuperid="292"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-121.6C5.4,-121.6,-13.5,121.6,13.5,121.6" transform="matrix(1,0,0,1,554,6023)" stroke-linejoin="round" id="295" ed:parentid="116" ed:tosuperid="294"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,75C5.4,75,-13.5,-75,13.5,-75" transform="matrix(1,0,0,1,705,3208)" stroke-linejoin="round" id="299" ed:parentid="266" ed:tosuperid="298"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,59.5C5.4,59.5,-13.5,-59.5,13.5,-59.5" transform="matrix(1,0,0,1,705,3223)" stroke-linejoin="round" id="301" ed:parentid="266" ed:tosuperid="300"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,34.5C4.1,34.5,-10.5,-34.5,13.5,-34.5" transform="matrix(1,0,0,1,705,3248)" stroke-linejoin="round" id="303" ed:parentid="266" ed:tosuperid="302"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" transform="matrix(1,0,0,1,705,3283)" stroke-linejoin="round" id="305" ed:parentid="266" ed:tosuperid="304"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" transform="matrix(1,0,0,1,705,3308)" stroke-linejoin="round" id="307" ed:parentid="266" ed:tosuperid="306"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-69C5.4,-69,-13.5,69,13.5,69" transform="matrix(1,0,0,1,705,3352)" stroke-linejoin="round" id="309" ed:parentid="266" ed:tosuperid="308"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-84.5C5.4,-84.5,-13.5,84.5,13.5,84.5" transform="matrix(1,0,0,1,705,3367)" stroke-linejoin="round" id="311" ed:parentid="266" ed:tosuperid="310"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,48.3C5.3,48.3,-13.2,-48.3,13.5,-48.3" transform="matrix(1,0,0,1,726,3550)" stroke-linejoin="round" id="313" ed:parentid="268" ed:tosuperid="312"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,23.3C2.4,23.3,-6.4,-23.3,13.5,-23.3" transform="matrix(1,0,0,1,726,3575)" stroke-linejoin="round" id="315" ed:parentid="268" ed:tosuperid="314"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" transform="matrix(1,0,0,1,726,3590)" stroke-linejoin="round" id="317" ed:parentid="268" ed:tosuperid="316"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-17.3C1.2,-17.3,-3.7,17.3,13.5,17.3" transform="matrix(1,0,0,1,726,3615)" stroke-linejoin="round" id="319" ed:parentid="268" ed:tosuperid="318"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-42.3C4.9,-42.3,-12.4,42.3,13.5,42.3" transform="matrix(1,0,0,1,726,3640)" stroke-linejoin="round" id="321" ed:parentid="268" ed:tosuperid="320"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-57.8C5.4,-57.8,-13.5,57.8,13.5,57.8" transform="matrix(1,0,0,1,726,3656)" stroke-linejoin="round" id="323" ed:parentid="268" ed:tosuperid="322"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,20.3C1.8,20.3,-5.1,-20.3,13.5,-20.3" transform="matrix(1,0,0,1,726,3765)" stroke-linejoin="round" id="325" ed:parentid="270" ed:tosuperid="324"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,4.8C-1.6,4.8,2.8,-4.8,13.5,-4.8" transform="matrix(1,0,0,1,726,3780)" stroke-linejoin="round" id="327" ed:parentid="270" ed:tosuperid="326"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-20.3C1.8,-20.3,-5.1,20.3,13.5,20.3" transform="matrix(1,0,0,1,726,3805)" stroke-linejoin="round" id="329" ed:parentid="270" ed:tosuperid="328"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,25C2.7,25,-7.2,-25,13.5,-25" transform="matrix(1,0,0,1,778,3901)" stroke-linejoin="round" id="331" ed:parentid="272" ed:tosuperid="330"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-9.5C-0.5,-9.5,0.2,9.5,13.5,9.5" transform="matrix(1,0,0,1,778,3935)" stroke-linejoin="round" id="333" ed:parentid="272" ed:tosuperid="332"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-34.5C4.1,-34.5,-10.5,34.5,13.5,34.5" transform="matrix(1,0,0,1,778,3960)" stroke-linejoin="round" id="335" ed:parentid="272" ed:tosuperid="334"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,40.5C4.8,40.5,-12.1,-40.5,13.5,-40.5" transform="matrix(1,0,0,1,654,4112)" stroke-linejoin="round" id="337" ed:parentid="274" ed:tosuperid="336"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,25C2.7,25,-7.2,-25,13.5,-25" transform="matrix(1,0,0,1,654,4127)" stroke-linejoin="round" id="339" ed:parentid="274" ed:tosuperid="338"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" transform="matrix(1,0,0,1,654,4152)" stroke-linejoin="round" id="341" ed:parentid="274" ed:tosuperid="340"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" transform="matrix(1,0,0,1,654,4177)" stroke-linejoin="round" id="343" ed:parentid="274" ed:tosuperid="342"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-50C5.3,-50,-13.4,50,13.5,50" transform="matrix(1,0,0,1,654,4202)" stroke-linejoin="round" id="345" ed:parentid="274" ed:tosuperid="344"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,28C3.2,28,-8.3,-28,13.5,-28" transform="matrix(1,0,0,1,749,4330)" stroke-linejoin="round" id="347" ed:parentid="276" ed:tosuperid="346"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,12.5C0.2,12.5,-1.3,-12.5,13.5,-12.5" transform="matrix(1,0,0,1,749,4346)" stroke-linejoin="round" id="349" ed:parentid="276" ed:tosuperid="348"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" transform="matrix(1,0,0,1,749,4371)" stroke-linejoin="round" id="351" ed:parentid="276" ed:tosuperid="350"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-37.5C4.5,-37.5,-11.4,37.5,13.5,37.5" transform="matrix(1,0,0,1,749,4396)" stroke-linejoin="round" id="353" ed:parentid="276" ed:tosuperid="352"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" transform="matrix(1,0,0,1,766,4472)" stroke-linejoin="round" id="355" ed:parentid="278" ed:tosuperid="354"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-7.8C-0.9,-7.8,1.2,7.8,13.5,7.8" transform="matrix(1,0,0,1,766,4487)" stroke-linejoin="round" id="357" ed:parentid="278" ed:tosuperid="356"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,53C5.4,53,-13.5,-53,13.5,-53" transform="matrix(1,0,0,1,735,4598)" stroke-linejoin="round" id="361" ed:parentid="280" ed:tosuperid="360"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,18.5C1.5,18.5,-4.3,-18.5,13.5,-18.5" transform="matrix(1,0,0,1,735,4633)" stroke-linejoin="round" id="363" ed:parentid="280" ed:tosuperid="362"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-6.5C-1.2,-6.5,1.8,6.5,13.5,6.5" transform="matrix(1,0,0,1,735,4658)" stroke-linejoin="round" id="365" ed:parentid="280" ed:tosuperid="364"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-22C2.1,-22,-5.9,22,13.5,22" transform="matrix(1,0,0,1,735,4673)" stroke-linejoin="round" id="367" ed:parentid="280" ed:tosuperid="366"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-47C5.2,-47,-13.1,47,13.5,47" transform="matrix(1,0,0,1,735,4698)" stroke-linejoin="round" id="369" ed:parentid="280" ed:tosuperid="368"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-62.5C5.4,-62.5,-13.5,62.5,13.5,62.5" transform="matrix(1,0,0,1,735,4714)" stroke-linejoin="round" id="371" ed:parentid="280" ed:tosuperid="370"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,165.4C5.4,165.4,-13.5,-165.4,13.5,-165.4" transform="matrix(1,0,0,1,538,4999)" stroke-linejoin="round" id="373" ed:parentid="114" ed:tosuperid="372"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,140.4C5.4,140.4,-13.5,-140.4,13.5,-140.4" transform="matrix(1,0,0,1,538,5024)" stroke-linejoin="round" id="375" ed:parentid="114" ed:tosuperid="374"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,124.9C5.4,124.9,-13.5,-124.9,13.5,-124.9" transform="matrix(1,0,0,1,538,5039)" stroke-linejoin="round" id="377" ed:parentid="114" ed:tosuperid="376"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,26.3C2.9,26.3,-7.7,-26.3,13.5,-26.3" transform="matrix(1,0,0,1,671,4991)" stroke-linejoin="round" id="379" ed:parentid="282" ed:tosuperid="378"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,10.8C-0.2,10.8,-0.4,-10.8,13.5,-10.8" transform="matrix(1,0,0,1,671,5006)" stroke-linejoin="round" id="381" ed:parentid="282" ed:tosuperid="380"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" transform="matrix(1,0,0,1,671,5022)" stroke-linejoin="round" id="383" ed:parentid="282" ed:tosuperid="382"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-20.3C1.8,-20.3,-5.1,20.3,13.5,20.3" transform="matrix(1,0,0,1,671,5037)" stroke-linejoin="round" id="385" ed:parentid="282" ed:tosuperid="384"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-35.8C4.3,-35.8,-10.9,35.8,13.5,35.8" transform="matrix(1,0,0,1,671,5053)" stroke-linejoin="round" id="387" ed:parentid="282" ed:tosuperid="386"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,3C-2,3,3.8,-3,13.5,-3" transform="matrix(1,0,0,1,674,5142)" stroke-linejoin="round" id="389" ed:parentid="284" ed:tosuperid="388"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" transform="matrix(1,0,0,1,674,5157)" stroke-linejoin="round" id="391" ed:parentid="284" ed:tosuperid="390"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,12.5C0.2,12.5,-1.3,-12.5,13.5,-12.5" transform="matrix(1,0,0,1,763,5213)" stroke-linejoin="round" id="393" ed:parentid="286" ed:tosuperid="392"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" transform="matrix(1,0,0,1,763,5238)" stroke-linejoin="round" id="395" ed:parentid="286" ed:tosuperid="394"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,50C5.3,50,-13.4,-50,13.5,-50" transform="matrix(1,0,0,1,683,5351)" stroke-linejoin="round" id="397" ed:parentid="288" ed:tosuperid="396"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,25C2.7,25,-7.2,-25,13.5,-25" transform="matrix(1,0,0,1,683,5376)" stroke-linejoin="round" id="399" ed:parentid="288" ed:tosuperid="398"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" transform="matrix(1,0,0,1,683,5401)" stroke-linejoin="round" id="401" ed:parentid="288" ed:tosuperid="400"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-34.5C4.1,-34.5,-10.5,34.5,13.5,34.5" transform="matrix(1,0,0,1,683,5435)" stroke-linejoin="round" id="403" ed:parentid="288" ed:tosuperid="402"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-59.5C5.4,-59.5,-13.5,59.5,13.5,59.5" transform="matrix(1,0,0,1,683,5460)" stroke-linejoin="round" id="405" ed:parentid="288" ed:tosuperid="404"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,53C5.4,53,-13.5,-53,13.5,-53" transform="matrix(1,0,0,1,673,5630)" stroke-linejoin="round" id="407" ed:parentid="290" ed:tosuperid="406"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,37.5C4.5,37.5,-11.4,-37.5,13.5,-37.5" transform="matrix(1,0,0,1,673,5646)" stroke-linejoin="round" id="409" ed:parentid="290" ed:tosuperid="408"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,3C-2,3,3.8,-3,13.5,-3" transform="matrix(1,0,0,1,673,5680)" stroke-linejoin="round" id="411" ed:parentid="290" ed:tosuperid="410"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" transform="matrix(1,0,0,1,673,5696)" stroke-linejoin="round" id="413" ed:parentid="290" ed:tosuperid="412"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-28C3.2,-28,-8.3,28,13.5,28" transform="matrix(1,0,0,1,673,5711)" stroke-linejoin="round" id="415" ed:parentid="290" ed:tosuperid="414"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-53C5.4,-53,-13.5,53,13.5,53" transform="matrix(1,0,0,1,673,5736)" stroke-linejoin="round" id="417" ed:parentid="290" ed:tosuperid="416"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,37.5C4.5,37.5,-11.4,-37.5,13.5,-37.5" transform="matrix(1,0,0,1,647,5877)" stroke-linejoin="round" id="419" ed:parentid="292" ed:tosuperid="418"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,12.5C0.2,12.5,-1.3,-12.5,13.5,-12.5" transform="matrix(1,0,0,1,647,5902)" stroke-linejoin="round" id="423" ed:parentid="292" ed:tosuperid="422"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" transform="matrix(1,0,0,1,647,5927)" stroke-linejoin="round" id="425" ed:parentid="292" ed:tosuperid="424"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-47C5.2,-47,-13.1,47,13.5,47" transform="matrix(1,0,0,1,647,5961)" stroke-linejoin="round" id="427" ed:parentid="292" ed:tosuperid="426"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,53C5.4,53,-13.5,-53,13.5,-53" transform="matrix(1,0,0,1,673,6092)" stroke-linejoin="round" id="429" ed:parentid="294" ed:tosuperid="428"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,28C3.2,28,-8.3,-28,13.5,-28" transform="matrix(1,0,0,1,673,6117)" stroke-linejoin="round" id="431" ed:parentid="294" ed:tosuperid="430"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,3C-2,3,3.8,-3,13.5,-3" transform="matrix(1,0,0,1,673,6142)" stroke-linejoin="round" id="433" ed:parentid="294" ed:tosuperid="432"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-22C2.1,-22,-5.9,22,13.5,22" transform="matrix(1,0,0,1,673,6167)" stroke-linejoin="round" id="435" ed:parentid="294" ed:tosuperid="434"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-37.5C4.5,-37.5,-11.4,37.5,13.5,37.5" transform="matrix(1,0,0,1,673,6183)" stroke-linejoin="round" id="437" ed:parentid="294" ed:tosuperid="436"/><path stroke="#696969" stroke-linecap="round" fill="none" d="M-13.5,-53C5.4,-53,-13.5,53,13.5,53" transform="matrix(1,0,0,1,673,6198)" stroke-linejoin="round" id="439" ed:parentid="294" ed:tosuperid="438"/><g ed:width="282" ed:height="57" ed:layout="rightmap" transform="matrix(1,0,0,1,23,3108)" id="101" ed:topictype="mainidea"><path stroke="#435fbc" fill="#435fbc" d="M4,0L278,0C280.7,0,282,1.3,282,4L282,53C282,55.7,280.7,57,278,57L4,57C1.3,57,0,55.7,0,53L0,4C0,1.3,1.3,0,4,0z" stroke-width="3" stroke-linejoin="round"/><text class="st1"><tspan style="white-space:pre" y="34.5" x="21">《Koa和Node.js开发实战》</tspan></text></g><g ed:width="181" ed:height="37" transform="matrix(1,0,0,1,368,305)" id="102" ed:parentid="101"><path stroke="#ebecf3" fill="#ebecf3" d="M4,0L177,0C179.7,0,181,1.3,181,4L181,33C181,35.7,179.7,37,177,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.5" x="18">第一章 Node.js入门</tspan></text></g><g ed:width="153" ed:height="37" transform="matrix(1,0,0,1,368,965)" id="104" ed:parentid="101"><path stroke="#ebecf3" fill="#ebecf3" d="M4,0L149,0C151.7,0,153,1.3,153,4L153,33C153,35.7,151.7,37,149,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.5" x="18">第二章 遇见Koa</tspan></text></g><g ed:width="124" ed:height="37" transform="matrix(1,0,0,1,368,1585)" id="106" ed:parentid="101"><path stroke="#ebecf3" fill="#ebecf3" d="M4,0L120,0C122.7,0,124,1.3,124,4L124,33C124,35.7,122.7,37,120,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.5" x="18">第三章 路由</tspan></text></g><g ed:width="132" ed:height="37" transform="matrix(1,0,0,1,368,2459)" id="108" ed:parentid="101"><path stroke="#ebecf3" fill="#ebecf3" d="M4,0L128,0C130.7,0,132,1.3,132,4L132,33C132,35.7,130.7,37,128,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.5" x="18">第四章 HTTP</tspan></text></g><g ed:width="225" ed:height="37" transform="matrix(1,0,0,1,368,3523)" id="110" ed:parentid="101"><path stroke="#ebecf3" fill="#ebecf3" d="M4,0L221,0C223.7,0,225,1.3,225,4L225,33C225,35.7,223.7,37,221,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.5" x="18">第五章 构建Koa Web应用</tspan></text></g><g ed:width="140" ed:height="37" transform="matrix(1,0,0,1,368,4383)" id="112" ed:parentid="101"><path stroke="#ebecf3" fill="#ebecf3" d="M4,0L136,0C138.7,0,140,1.3,140,4L140,33C140,35.7,138.7,37,136,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.5" x="18">第六章 数据库</tspan></text></g><g ed:width="156" ed:height="37" transform="matrix(1,0,0,1,368,5146)" id="114" ed:parentid="101"><path stroke="#ebecf3" fill="#ebecf3" d="M4,0L152,0C154.7,0,156,1.3,156,4L156,33C156,35.7,154.7,37,152,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.5" x="18">第七章 单元测试</tspan></text></g><g ed:width="172" ed:height="37" transform="matrix(1,0,0,1,368,5883)" id="116" ed:parentid="101"><path stroke="#ebecf3" fill="#ebecf3" d="M4,0L168,0C170.7,0,172,1.3,172,4L172,33C172,35.7,170.7,37,168,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" y="23.5" x="18">第八章 优化与部署</tspan></text></g><g ed:width="112" ed:height="24.5" transform="matrix(1,0,0,1,576,171)" id="120" ed:parentid="102"><path stroke="#696969" fill="none" d="M0,24.5L112,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.1.Node.js介绍</tspan></text></g><g ed:width="72" ed:height="24.5" transform="matrix(1,0,0,1,576,452)" id="122" ed:parentid="102"><path stroke="#696969" fill="none" d="M0,24.5L72,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.2.NPM</tspan></text></g><g ed:width="195" ed:height="24.5" transform="matrix(1,0,0,1,576,593)" id="124" ed:parentid="102"><path stroke="#696969" fill="none" d="M0,24.5L195,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">1.3.Visual Studio Code编辑器</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,715,21)" id="126" ed:parentid="120"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">官方描述：Node.js 是一个基于 Chrome v8 引擎的 JavaScript 运行环境 。 Node.js </tspan><tspan style="white-space:pre" y="35.1" x="8">使用了一个事件驱动、非阻塞式 I/0 的模型，使其轻量又高效。Node.js 的包管理器 </tspan><tspan style="white-space:pre" y="54.1" x="8">NPM，是全球最大的开源库系统。</tspan></text></g><g ed:width="383" ed:height="24.5" transform="matrix(1,0,0,1,715,90)" id="128" ed:parentid="120"><path stroke="#696969" fill="none" d="M0,24.5L383,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Node.js 是一个基于 Chrome v8 引擎的 JavaScript 运行时环境</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,715,121)" id="130" ed:parentid="120"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">运行时是一个平台，它把运行在底层的操作系统和体系结构的特点抽象出来，承担了解</tspan><tspan style="white-space:pre" y="35.1" x="8">释与编译、堆管理（ Heap Management ）、垃圾回收机制（ Garbage Co llection </tspan><tspan style="white-space:pre" y="54.1" x="8">）、内存分配 C Memory Allocation ）、安全机制 (Security)等功能 。</tspan></text></g><g ed:width="242" ed:height="24.5" transform="matrix(1,0,0,1,715,190)" id="132" ed:parentid="120"><path stroke="#696969" fill="none" d="M0,24.5L242,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">解决问题的关键是非阻塞和异步 I/O 。</tspan></text></g><g ed:width="366" ed:height="24.5" transform="matrix(1,0,0,1,715,221)" id="134" ed:parentid="120"><path stroke="#696969" fill="none" d="M0,24.5L366,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Node.js使用了事件驱动、非阻塞式 I/O 模型，轻量又高效。</tspan></text></g><g ed:width="442" ed:height="24.5" transform="matrix(1,0,0,1,715,252)" id="136" ed:parentid="120"><path stroke="#696969" fill="none" d="M0,24.5L442,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">事件驱动的异步 I/O 模型使得 Node.js 非常适合用来处理 I/O 密集型应用</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,715,283)" id="138" ed:parentid="120"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">例如 Web 聊天室（ Socket.io ）、 Web 博客（ Hexo ） 、 Web 论坛（ Node Club </tspan><tspan style="white-space:pre" y="35.1" x="8">）、前端模块管理平台（ Bower.js ）、浏览器环境工具（ Browserif沪、命令行工具（ </tspan><tspan style="white-space:pre" y="54.1" x="8">Commander)等。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,675,352)" id="140" ed:parentid="122"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">NPM 是一个 JavaScript 的模块管理工具，遵循 CommonJS 标准，由 Isaac Z . </tspan><tspan style="white-space:pre" y="35.1" x="8">Schlueter 开发</tspan></text></g><g ed:width="496" ed:height="43.5" transform="matrix(1,0,0,1,675,402)" id="142" ed:parentid="122"><path stroke="#696969" fill="none" d="M0,43.5L496,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Facebook 、 Google 、 Exponent 和 Tilda 于 2016 年开发了一款新的模块管理工</tspan><tspan style="white-space:pre" y="35.1" x="8">具 Yam ，在速度和可靠性上较 NPM 更加优秀</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,675,452)" id="144" ed:parentid="122"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">package.json文件包含了模块所有的依赖关系，也可以定义依赖项的元数据（如名称、</tspan><tspan style="white-space:pre" y="35.1" x="8">版本、许可证等） </tspan></text></g><g ed:width="329" ed:height="24.5" transform="matrix(1,0,0,1,675,502)" id="146" ed:parentid="122"><path stroke="#696969" fill="none" d="M0,24.5L329,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">NVM ( Node Version Manager, Node 版本管理器）</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,675,533)" id="148" ed:parentid="122"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">NProxy 是一个跨平台，支持单文件、多文件及目录替换，支持 HTTP 和 HTTPS 协议</tspan><tspan style="white-space:pre" y="35.1" x="8">的 Web 代理工具，在文件替换功能上尤其出色。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,798,583)" id="150" ed:parentid="124"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Visual Studio Code 是微软在 2015 年发布的一款能够运行在 Windows 、macOS 和 </tspan><tspan style="white-space:pre" y="35.1" x="8">Linux 上的跨平台编辑器</tspan></text></g><g ed:width="89" ed:height="24.5" transform="matrix(1,0,0,1,548,738)" id="152" ed:parentid="104"><path stroke="#696969" fill="none" d="M0,24.5L89,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.1.Koa介绍</tspan></text></g><g ed:width="115" ed:height="24.5" transform="matrix(1,0,0,1,548,938)" id="154" ed:parentid="104"><path stroke="#696969" fill="none" d="M0,24.5L115,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.2.Context对象</tspan></text></g><g ed:width="115" ed:height="24.5" transform="matrix(1,0,0,1,548,1172)" id="156" ed:parentid="104"><path stroke="#696969" fill="none" d="M0,24.5L115,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2.3.Koa的中间件</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,664,660)" id="160" ed:parentid="152"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Koa 是基于 Node.js 的 Web 框架，其特点是轻量、健壮、富有表现力，由 Express 的</tspan><tspan style="white-space:pre" y="35.1" x="8">原班人马打造，目前有 Koal 和 Koa2 两种版本。</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,664,710)" id="162" ed:parentid="152"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Express 4 之前的版本主要基于 Connect，封装了大量便利的功能，如路由、视图处</tspan><tspan style="white-space:pre" y="35.1" x="8">理、错误处理等 。Express 4 之后不再依赖 Connect，除 express.static外的内置中间</tspan><tspan style="white-space:pre" y="54.1" x="8">件也全部作为单独模块安装 。</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,664,779)" id="164" ed:parentid="152"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Koa 采用 Generator 函数+yield 语句处理异步函数，解决了“回调金字塔”的问题 。 </tspan><tspan style="white-space:pre" y="35.1" x="8">但是 Generator 的设计初衷不是为了解决异步编程的问题，而是为了实现“协程”的</tspan><tspan style="white-space:pre" y="54.1" x="8">功能 。 </tspan></text></g><g ed:width="244" ed:height="24.5" transform="matrix(1,0,0,1,690,848)" id="166" ed:parentid="154"><path stroke="#696969" fill="none" d="M0,24.5L244,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Koa 中有一个非常重要的概念叫上下文 </tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,690,879)" id="168" ed:parentid="154"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Koa 将 Node.js 的 Request （请求〉和 Response （响应）对象封装到 Context 对象</tspan><tspan style="white-space:pre" y="35.1" x="8">中，所以也可以把 Context 对象称为一次对话的上下文，通过加工 Context 对象，就</tspan><tspan style="white-space:pre" y="54.1" x="8">可以控制返回给用户的内容。</tspan></text></g><g ed:width="488" ed:height="24.5" transform="matrix(1,0,0,1,690,948)" id="170" ed:parentid="154"><path stroke="#696969" fill="none" d="M0,24.5L488,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Koa 应用程序中的每个请求都将创建一个 Context，并在中间件中被作为参数引用</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,690,979)" id="172" ed:parentid="154"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Koa 没有封装获取 POST 请求参数的方法，因此需要解析 Context 中的原生 Node .js </tspan><tspan style="white-space:pre" y="35.1" x="8">请求对象 req</tspan></text></g><g ed:width="485" ed:height="24.5" transform="matrix(1,0,0,1,690,1029)" id="174" ed:parentid="154"><path stroke="#696969" fill="none" d="M0,24.5L485,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">可以通过 koa-bodyparser 等中 间件来获取 POST 请求的参数， 而且更加方便。</tspan></text></g><g ed:width="331" ed:height="24.5" transform="matrix(1,0,0,1,690,1060)" id="176" ed:parentid="156"><path stroke="#696969" fill="none" d="M0,24.5L331,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Koa 应用程序其实就是一个包含一组中间件函数的对象</tspan></text></g><g ed:width="353" ed:height="24.5" transform="matrix(1,0,0,1,690,1091)" id="178" ed:parentid="156"><path stroke="#696969" fill="none" d="M0,24.5L353,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">中间件函数是一个带有 ctx 和 next 两个参数的简单函数。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,690,1122)" id="180" ed:parentid="156"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">ctx 就是之前介绍的上下文，封装了 Request 和 Response 等对象；next 用于把中间</tspan><tspan style="white-space:pre" y="35.1" x="8">件的执行权交给下游的中间件。</tspan></text></g><g ed:width="369" ed:height="24.5" transform="matrix(1,0,0,1,690,1172)" id="182" ed:parentid="156"><path stroke="#696969" fill="none" d="M0,24.5L369,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">“洋葱模型”来解释中间件的执行顺序。先进后出的堆栈结构</tspan></text></g><g ed:width="395" ed:height="24.5" transform="matrix(1,0,0,1,690,1203)" id="184" ed:parentid="156"><path stroke="#696969" fill="none" d="M0,24.5L395,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">如果一个中间件没有调用 await next(),后面的中间件将不会被执行</tspan></text></g><g ed:width="477" ed:height="24.5" transform="matrix(1,0,0,1,690,1234)" id="186" ed:parentid="156"><path stroke="#696969" fill="none" d="M0,24.5L477,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">常用 Koa 中间件介绍：koa-bodyparser、koa-router、koa-static、koa-views</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,690,1265)" id="188" ed:parentid="156"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">koa-static 是专门用于加载静态资源的中间件，通过它可以为页面请求加载 css 、 </tspan><tspan style="white-space:pre" y="35.1" x="8">JavaScript 等静态资源，而 koa-views用于加载 HTML 模板文件 。</tspan></text></g><g ed:width="92" ed:height="24.5" transform="matrix(1,0,0,1,519,1391)" id="190" ed:parentid="106"><path stroke="#696969" fill="none" d="M0,24.5L92,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.1.路由介绍</tspan></text></g><g ed:width="171" ed:height="24.5" transform="matrix(1,0,0,1,519,1657)" id="192" ed:parentid="106"><path stroke="#696969" fill="none" d="M0,24.5L171,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3.2.koa-router路由中间件</tspan></text></g><g ed:width="505" ed:height="43.5" transform="matrix(1,0,0,1,638,1341)" id="194" ed:parentid="190"><path stroke="#696969" fill="none" d="M0,43.5L505,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Python官网的描述：路由（请求路由或 URL 分发）是匹配 URL 到相应处理程序的活</tspan><tspan style="white-space:pre" y="35.1" x="8">动）。</tspan></text></g><g ed:width="419" ed:height="24.5" transform="matrix(1,0,0,1,638,1391)" id="196" ed:parentid="190"><path stroke="#696969" fill="none" d="M0,24.5L419,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">通俗地说，路由是根据 URL 的变更重新渲染页面布局和内容的过程 。</tspan></text></g><g ed:width="441" ed:height="43.5" transform="matrix(1,0,0,1,638,1422)" id="198" ed:parentid="190"><path stroke="#696969" fill="none" d="M0,43.5L441,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">前端路由主要解决了两个问题：在页面不刷新的前提下实现 URL 的变化，</tspan><tspan style="white-space:pre" y="35.1" x="8">以及捕捉 U虹的变化并执行相应的页面逻辑。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,717,1472)" id="200" ed:parentid="192"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">koa-router 具有丰富的 API ，可以实现命名参数、命名路由 、多路由中间件 、多路</tspan><tspan style="white-space:pre" y="35.1" x="8">由、嵌套路由等功能。</tspan></text></g><g ed:width="481" ed:height="24.5" transform="matrix(1,0,0,1,717,1522)" id="202" ed:parentid="192"><path stroke="#696969" fill="none" d="M0,24.5L481,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">koa-router 从 5.2.0 版本开始支持 ECMAScript 2016 的 async/await 语法糖。</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,717,1553)" id="204" ed:parentid="192"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">REST 设计一般符合以下条件：1、程序或应用的事物都应该被抽象为资源；2、每个资</tspan><tspan style="white-space:pre" y="35.1" x="8">源对应唯一的 URL；3、使用统一的接口对资源进行操作；4、对资源的各种操作不会</tspan><tspan style="white-space:pre" y="54.1" x="8">改变资源标识；5、所有的操作都是无状态的 。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,717,1622)" id="206" ed:parentid="192"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">在 HTTP 中，会被经常使用的方法有 POST 、 DELETE 、 PUT 、 GET，对应于增、</tspan><tspan style="white-space:pre" y="35.1" x="8">删、改、查，即常说的 CRUD(Create 、 Retrieve、 Update 、 Delete ）操作。</tspan></text></g><g ed:width="399" ed:height="24.5" transform="matrix(1,0,0,1,717,1672)" id="208" ed:parentid="192"><path stroke="#696969" fill="none" d="M0,24.5L399,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">不得不提的是 GitHub v4 的 API 使用了全新的设计风格 GraphQL</tspan></text></g><g ed:width="434" ed:height="24.5" transform="matrix(1,0,0,1,717,1703)" id="210" ed:parentid="192"><path stroke="#696969" fill="none" d="M0,24.5L434,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">与嵌套路由不同的是，路由前缀是一个固定的字符串，不能添加动态参数</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,717,1734)" id="212" ed:parentid="192"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">常见鉴别用户权限的方式有两种， 一种是广泛使用的 Cookie-Based Authentication </tspan><tspan style="white-space:pre" y="35.1" x="8">（基于 Cookie 的认证模式），另一种是 Token-Based Authentication （基于 Token </tspan><tspan style="white-space:pre" y="54.1" x="8">的认证模式） 。 </tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,717,1803)" id="214" ed:parentid="192"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8"> Token 方式最大的优点在于采用了无状态机制 ，在此基础上，可以实现天然的跨域支</tspan><tspan style="white-space:pre" y="35.1" x="8">持、前后端分离等，同时降低了服务端开发和维护的成本 。Token 方式的缺点在于服</tspan><tspan style="white-space:pre" y="54.1" x="8">务器每次都需要对 Token 进行校验，这一步骤会对服务器产生运算压力 。</tspan></text></g><g ed:width="98" ed:height="24.5" transform="matrix(1,0,0,1,527,2184)" id="216" ed:parentid="108"><path stroke="#696969" fill="none" d="M0,24.5L98,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">4.1.HTTP介绍</tspan></text></g><g ed:width="86" ed:height="24.5" transform="matrix(1,0,0,1,527,2670)" id="218" ed:parentid="108"><path stroke="#696969" fill="none" d="M0,24.5L86,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">4.2.HTTP/2</tspan></text></g><g ed:width="195" ed:height="24.5" transform="matrix(1,0,0,1,527,2904)" id="220" ed:parentid="108"><path stroke="#696969" fill="none" d="M0,24.5L195,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">4.3.Node.js的querystring模块</tspan></text></g><g ed:width="176" ed:height="24.5" transform="matrix(1,0,0,1,527,3001)" id="222" ed:parentid="108"><path stroke="#696969" fill="none" d="M0,24.5L176,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">4.4.koa-bodyparser中间件</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,652,1899)" id="224" ed:parentid="216"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">HTTP 全称为 HyperText Transfer Protocol ，即超文本传输协议，是当今互联网使用</tspan><tspan style="white-space:pre" y="35.1" x="8">最广泛的网络基础协议。</tspan></text></g><g ed:width="514" ed:height="100.5" transform="matrix(1,0,0,1,652,1949)" id="226" ed:parentid="216"><path stroke="#696969" fill="none" d="M0,100.5L514,100.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">HTTP/ I.0 在 HTTP/0.9 的基础上做出了大量的改进，增加了访问不同对象类型的功</tspan><tspan style="white-space:pre" y="35.1" x="8">能，不仅可以传输文本，还可以传输图像、视频、二进制文件等。同时，在 GET 请求</tspan><tspan style="white-space:pre" y="54.1" x="8">命令的基础上，增加了 POST 、 PUT、 HEAD 、 DELETE 、LINK 等命令 。另外，还</tspan><tspan style="white-space:pre" y="73.1" x="8">增加了头部信息，如 User-Agent 、 Accept 、 Last-Modified 、 Content-Type</tspan><tspan style="white-space:pre" y="92.1" x="8">等至今仍在使用的请求头字段。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,652,2056)" id="228" ed:parentid="216"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">HTTP/ 1.1 目前依旧被广泛地使用在互联网领域，其在 HTTP/1.0 的基础上又做了大量</tspan><tspan style="white-space:pre" y="35.1" x="8">的改进</tspan></text></g><g ed:width="514" ed:height="81.5" transform="matrix(1,0,0,1,652,2106)" id="230" ed:parentid="216"><path stroke="#696969" fill="none" d="M0,81.5L514,81.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">2009 年， Goolge 公开了自己研发的 SPDY （单词 speedy 的缩写〉 协议，通过多</tspan><tspan style="white-space:pre" y="35.1" x="8">路复用、压缩、优先级、安全等新技术方案，缩短了网页的加载时间，井提高了安全性 </tspan><tspan style="white-space:pre" y="54.1" x="8">。IETF( The Internet Engineering Task Force,国际互联网工程任务组〉随后对 SPDY </tspan><tspan style="white-space:pre" y="73.1" x="8">进行了标准化， 并作为制定 HTTP/2 标准的起点 。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,652,2194)" id="232" ed:parentid="216"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">URI: Uniform Resource Identifier （统一资源标识符）；URL: Uniform Resource </tspan><tspan style="white-space:pre" y="35.1" x="8">Locator （ 统一资源定位符〉</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,652,2244)" id="234" ed:parentid="216"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一个完整的URL一般由 7 个部分组成：scheme: [//[user[:password]@]host[:port]][/</tspan><tspan style="white-space:pre" y="35.1" x="8">path][?query][#fragment]</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,652,2294)" id="236" ed:parentid="216"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">HTTP 状态码表示服务器响应状态的 3 位数字。 HTTP 状态码主要包括</tspan><tspan style="white-space:pre" y="35.1" x="8">1** （消息）、 2**（成功）、 3**（重定向）、 4**（请求错误〉、 5**和 6** （服</tspan><tspan style="white-space:pre" y="54.1" x="8">务器错误）等 6 种不同类型。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,652,2363)" id="238" ed:parentid="216"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">目前常用的 9 种 HTTP 请求：GET、POST、HEAD、PUT、DELETE、CONNECT、</tspan><tspan style="white-space:pre" y="35.1" x="8">OPTIONS、TRACE、PATCH</tspan></text></g><g ed:width="514" ed:height="81.5" transform="matrix(1,0,0,1,652,2413)" id="240" ed:parentid="216"><path stroke="#696969" fill="none" d="M0,81.5L514,81.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">首部字段是构成 HTTP 的重要元素之一 ，用以提供 HTTP 传输过程中额外</tspan><tspan style="white-space:pre" y="35.1" x="8">的重要信息 。常见的首部字段：User-Agent、Last-Modified、Content-Length、</tspan><tspan style="white-space:pre" y="54.1" x="8">Content-Encoding、Content-Type、Expires、Set-Cookies、Cookie、Cache-</tspan><tspan style="white-space:pre" y="73.1" x="8">Control、ETag、Vary、Server</tspan></text></g><g ed:width="406" ed:height="43.5" transform="matrix(1,0,0,1,640,2501)" id="242" ed:parentid="218"><path stroke="#696969" fill="none" d="M0,43.5L406,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">HTTP/2 在 HTTP/1.1 的基础上保持原有语义和功能不变，但极大地</tspan><tspan style="white-space:pre" y="35.1" x="8">提升了性能。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,640,2551)" id="244" ed:parentid="218"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">采用二进制格式传输数据：之前的 HTTP/1.* 均采用文本格式传输数据，而 HTTP/2 则</tspan><tspan style="white-space:pre" y="35.1" x="8">选择了使用二进制格式传输数据。</tspan></text></g><g ed:width="549" ed:height="62.5" transform="matrix(1,0,0,1,640,2601)" id="246" ed:parentid="218"><path stroke="#696969" fill="none" d="M0,62.5L549,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">在 HTTP/2 中，基本的协议单位是帧，每个数据流均以消息形式发送，消息由一个或</tspan><tspan style="white-space:pre" y="35.1" x="8">多个帧组合而成。帧的内容包括：长度（ Length ）、类型（ Type ）、标记（ Flags ）、保</tspan><tspan style="white-space:pre" y="54.1" x="8">留字段 CR）、流标识符（ Stream Identifier）和帧主体（ Frame Payload ） 。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,640,2670)" id="248" ed:parentid="218"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">多路复用：HTTP/2 重新定义了底层的 HTTP 语义映射，允许在同一个连接上使用请求</tspan><tspan style="white-space:pre" y="35.1" x="8">和响应双向数据流</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,640,2720)" id="250" ed:parentid="218"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">流的优先级：在 HTTP/2 中可以为每个流（ Stream ）设置优先级，高优先级的流会被</tspan><tspan style="white-space:pre" y="35.1" x="8">服务优先处理井返回给客户端</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,640,2770)" id="252" ed:parentid="218"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">首部压缩：HTTP/2 引入了 HPACK 压缩首部数据。 由于 HPACK 压缩引入了索引表概</tspan><tspan style="white-space:pre" y="35.1" x="8">念，包含静态表和动态表 。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,640,2820)" id="254" ed:parentid="218"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">服务端推送：例如，可以在请求该HTML 文档的同时， 一并推送与之关联的静态资源</tspan><tspan style="white-space:pre" y="35.1" x="8">文件，达到性能优化的目的。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,749,2870)" id="256" ed:parentid="220"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">querystring 模块由 Node .js 原生提供，包含相关解析和格式化工具，共有 4 种方</tspan><tspan style="white-space:pre" y="35.1" x="8">法：escape、unescape、parse、stringify</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,749,2920)" id="258" ed:parentid="220"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">通过 query 或 querystring 可以直接获取 GET 请求的数据，唯一不同的是 query 返回</tspan><tspan style="white-space:pre" y="35.1" x="8">的是对象，而querystring 返回的 是查询字符串。</tspan></text></g><g ed:width="454" ed:height="24.5" transform="matrix(1,0,0,1,730,2970)" id="260" ed:parentid="222"><path stroke="#696969" fill="none" d="M0,24.5L454,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">通过 POST 请求传递表单数据、上传数据文件、传递 JSON 格式的数据等。</tspan></text></g><g ed:width="509" ed:height="24.5" transform="matrix(1,0,0,1,730,3001)" id="262" ed:parentid="222"><path stroke="#696969" fill="none" d="M0,24.5L509,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">koa-bodyparser 中间件用于解析请求的 Body，支持 JSON 、 Form 和 Text 类型 。</tspan></text></g><g ed:width="440" ed:height="24.5" transform="matrix(1,0,0,1,730,3032)" id="264" ed:parentid="222"><path stroke="#696969" fill="none" d="M0,24.5L440,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">解析后的数据会被存储在 ctx.request.body 中，如果没有数据则为空对象</tspan></text></g><g ed:width="71" ed:height="24.5" transform="matrix(1,0,0,1,620,3258)" id="266" ed:parentid="110"><path stroke="#696969" fill="none" d="M0,24.5L71,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">5.1.MVC</tspan></text></g><g ed:width="92" ed:height="24.5" transform="matrix(1,0,0,1,620,3574)" id="268" ed:parentid="110"><path stroke="#696969" fill="none" d="M0,24.5L92,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">5.2.模板引擎</tspan></text></g><g ed:width="92" ed:height="24.5" transform="matrix(1,0,0,1,620,3761)" id="270" ed:parentid="110"><path stroke="#696969" fill="none" d="M0,24.5L92,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">5.3.静态资源</tspan></text></g><g ed:width="144" ed:height="24.5" transform="matrix(1,0,0,1,620,3901)" id="272" ed:parentid="110"><path stroke="#696969" fill="none" d="M0,24.5L144,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">5.4.其他常用开发技巧</tspan></text></g><g ed:width="105" ed:height="24.5" transform="matrix(1,0,0,1,535,4128)" id="274" ed:parentid="112"><path stroke="#696969" fill="none" d="M0,24.5L105,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.1.数据库介绍</tspan></text></g><g ed:width="200" ed:height="24.5" transform="matrix(1,0,0,1,535,4334)" id="276" ed:parentid="112"><path stroke="#696969" fill="none" d="M0,24.5L200,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.2.在Koa中应用MySQL数据库</tspan></text></g><g ed:width="217" ed:height="24.5" transform="matrix(1,0,0,1,535,4455)" id="278" ed:parentid="112"><path stroke="#696969" fill="none" d="M0,24.5L217,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.3.在Koa中应用MongoDB数据库</tspan></text></g><g ed:width="186" ed:height="24.5" transform="matrix(1,0,0,1,535,4627)" id="280" ed:parentid="112"><path stroke="#696969" fill="none" d="M0,24.5L186,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">6.4.在Koa中应用Redis数据库</tspan></text></g><g ed:width="106" ed:height="24.5" transform="matrix(1,0,0,1,551,4993)" id="282" ed:parentid="114"><path stroke="#696969" fill="none" d="M0,24.5L106,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.1.Chai断言库</tspan></text></g><g ed:width="109" ed:height="24.5" transform="matrix(1,0,0,1,551,5120)" id="284" ed:parentid="114"><path stroke="#696969" fill="none" d="M0,24.5L109,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.2.Mocha框架</tspan></text></g><g ed:width="198" ed:height="24.5" transform="matrix(1,0,0,1,551,5201)" id="286" ed:parentid="114"><path stroke="#696969" fill="none" d="M0,24.5L198,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.3.SuperTest测试RESTful API</tspan></text></g><g ed:width="118" ed:height="24.5" transform="matrix(1,0,0,1,551,5376)" id="288" ed:parentid="114"><path stroke="#696969" fill="none" d="M0,24.5L118,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">7.4.其他常用工具</tspan></text></g><g ed:width="92" ed:height="24.5" transform="matrix(1,0,0,1,567,5659)" id="290" ed:parentid="116"><path stroke="#696969" fill="none" d="M0,24.5L92,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">8.1.服务优化</tspan></text></g><g ed:width="66" ed:height="24.5" transform="matrix(1,0,0,1,567,5890)" id="292" ed:parentid="116"><path stroke="#696969" fill="none" d="M0,24.5L66,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">8.2.部署</tspan></text></g><g ed:width="92" ed:height="24.5" transform="matrix(1,0,0,1,567,6121)" id="294" ed:parentid="116"><path stroke="#696969" fill="none" d="M0,24.5L92,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">8.3.服务监控</tspan></text></g><g ed:width="512" ed:height="43.5" transform="matrix(1,0,0,1,718,3089)" id="298" ed:parentid="266"><path stroke="#696969" fill="none" d="M0,43.5L512,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">MVC 模式的目的是实现动态的程序设计，简化程序后续 的修改和扩展过程，并且使模</tspan><tspan style="white-space:pre" y="35.1" x="8">块能够被重复利用。</tspan></text></g><g ed:width="364" ed:height="24.5" transform="matrix(1,0,0,1,718,3139)" id="300" ed:parentid="266"><path stroke="#696969" fill="none" d="M0,24.5L364,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">需要注意的是： MVC 不是一种技术，而是一种设计理念 。 </tspan></text></g><g ed:width="365" ed:height="43.5" transform="matrix(1,0,0,1,718,3170)" id="302" ed:parentid="266"><path stroke="#696969" fill="none" d="M0,43.5L365,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">MVC 模式主要采用分层的思想来降低耦合度，从而使系统更</tspan><tspan style="white-space:pre" y="35.1" x="8">加灵活， 扩展性更强 。</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,718,3220)" id="304" ed:parentid="266"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">MVC 模式在概念上强调 Model、View 和 Controller 的分离，模块间也遵循着由 </tspan><tspan style="white-space:pre" y="35.1" x="8">Controller进行消息处理、 Model 进行数据源处理、View 进行数据显示的职责分离原</tspan><tspan style="white-space:pre" y="54.1" x="8">则。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,718,3289)" id="306" ed:parentid="266"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">3个部分分离实现：Model负责数据访问、Controller负责处理消息、View负责显示数</tspan><tspan style="white-space:pre" y="35.1" x="8">据</tspan></text></g><g ed:width="514" ed:height="81.5" transform="matrix(1,0,0,1,718,3339)" id="308" ed:parentid="266"><path stroke="#696969" fill="none" d="M0,81.5L514,81.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">通常意义上的三层架构是将整个业务应用 划分为界面层（ User</tspan><tspan style="white-space:pre" y="35.1" x="8">Interface Layer ）、业务逻辑层（ Business Logic Layer ）、数据访问层（ Data </tspan><tspan style="white-space:pre" y="54.1" x="8">Access Layer ） 。微软推荐的分层式结构一般也分为三层，从下至上分别为数据访问</tspan><tspan style="white-space:pre" y="73.1" x="8">层、业务逻辑层（又称领域层〉和表示层 。</tspan></text></g><g ed:width="412" ed:height="24.5" transform="matrix(1,0,0,1,718,3427)" id="310" ed:parentid="266"><path stroke="#696969" fill="none" d="M0,24.5L412,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">不管是 MVC 还是三层架构，其实设计理念都是一致的： 分层，解耦</tspan></text></g><g ed:width="508" ed:height="43.5" transform="matrix(1,0,0,1,739,3458)" id="312" ed:parentid="268"><path stroke="#696969" fill="none" d="M0,43.5L508,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">模板引擎是 Web 应用中用来生成动态 HTML 的工具，负责将数据模型与 HTML 模板</tspan><tspan style="white-space:pre" y="35.1" x="8">结合（模板渲染），生成最终的 HTML 。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,739,3508)" id="314" ed:parentid="268"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">模板引擎不属于特定技术领域，是为了使用户界面与业务数据（内容）分离而产生的，</tspan><tspan style="white-space:pre" y="35.1" x="8">是跨领域跨平台的概念。</tspan></text></g><g ed:width="304" ed:height="24.5" transform="matrix(1,0,0,1,739,3558)" id="316" ed:parentid="268"><path stroke="#696969" fill="none" d="M0,24.5L304,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">几种类型：“置换型”、“解释型”、“编译型”</tspan></text></g><g ed:width="490" ed:height="43.5" transform="matrix(1,0,0,1,739,3589)" id="318" ed:parentid="268"><path stroke="#696969" fill="none" d="M0,43.5L490,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">可以在 Node.js 中应用且比较成熟的模板引擎有很多 ，例如 EJS 、 Jade （现己改</tspan><tspan style="white-space:pre" y="35.1" x="8">名为 Pug ） 、 Handlebars 、 Nunjucks 、 Swig 等。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,739,3639)" id="320" ed:parentid="268"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一般情况下，模板引 擎都需要具备这些功能：变量、逻辑表达式、循环、 layout、 </tspan><tspan style="white-space:pre" y="35.1" x="8">include 、宏和扩展等。</tspan></text></g><g ed:width="312" ed:height="24.5" transform="matrix(1,0,0,1,739,3689)" id="322" ed:parentid="268"><path stroke="#696969" fill="none" d="M0,24.5L312,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">宏 ： 定义可复用的内容，类似于编程语言中的函数</tspan></text></g><g ed:width="482" ed:height="24.5" transform="matrix(1,0,0,1,739,3720)" id="324" ed:parentid="270"><path stroke="#696969" fill="none" d="M0,24.5L482,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">koa-static 是官方提供的文件服务器中间件，依赖于另一款官方中间件 koa-send</tspan></text></g><g ed:width="282" ed:height="24.5" transform="matrix(1,0,0,1,739,3751)" id="326" ed:parentid="270"><path stroke="#696969" fill="none" d="M0,24.5L282,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">动态资源需要使用的系统开销大于静态资源 。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,739,3782)" id="328" ed:parentid="270"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">MIME Type 通常是通过 HTTP，由 Web 服务器告知浏览器的， 被定义在 Content-</tspan><tspan style="white-space:pre" y="35.1" x="8">Type header 中 。 </tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,791,3832)" id="330" ed:parentid="272"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8"> HTTP 请求的整个过程中所传输的数据，本身没有任何特定的格式或形态，但客户端在</tspan><tspan style="white-space:pre" y="35.1" x="8">接收数据时，会按照 MIME Type 指定的方式去处理 。</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,791,3882)" id="332" ed:parentid="272"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">koa-multer 源于 Multer，并以中间件的形式对 Multer 进行包装，而 Multer 是一个</tspan><tspan style="white-space:pre" y="35.1" x="8">基于 Busboy 模块（专门用于处理表单数据 的模块〕的 Node.js 中间件， 主要用于上</tspan><tspan style="white-space:pre" y="54.1" x="8">传文件，处理 multipart/form-data 类型的表单数据。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,791,3951)" id="334" ed:parentid="272"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">永远不要将 Multer 作为全局中间件使用，因为恶意用户可以上传文件到一个预料之外</tspan><tspan style="white-space:pre" y="35.1" x="8">的路由 。 开发者应该只在自己需要处理上传文件的路由上使用 Multer。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,667,4028)" id="336" ed:parentid="274"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">数据库主要具备以下特点 ：数据共享；减少数据冗余度；数据独立；数据一致性和可</tspan><tspan style="white-space:pre" y="35.1" x="8">维护性；故障恢复</tspan></text></g><g ed:width="226" ed:height="24.5" transform="matrix(1,0,0,1,667,4078)" id="338" ed:parentid="274"><path stroke="#696969" fill="none" d="M0,24.5L226,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">数据库一般采用索引来提升查询效率</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,667,4109)" id="340" ed:parentid="274"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">通过事务，也就是一组有序的数据库操作指令，进行“捆绑”执行，要么全部执行，要</tspan><tspan style="white-space:pre" y="35.1" x="8">么全部不执行，从而保证了数据的一致性和完整性 。 </tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,667,4159)" id="342" ed:parentid="274"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">关系型数据库一般通过 SQL (Structured Query Language ，结构化查询语言〉来操</tspan><tspan style="white-space:pre" y="35.1" x="8">作数据库。代表：Oracle、SQL Server、MySql、MariaDB</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,667,4209)" id="344" ed:parentid="274"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">非关系型数据库一般不采用 SQL 作为查询语言，也经常避免使用类似 SQL 中的 JOIN </tspan><tspan style="white-space:pre" y="35.1" x="8">操作来关联多张数据表。代表：MongoDB、Memcached、Redis</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,762,4259)" id="346" ed:parentid="276"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">ORM 的字面意思为对象关系映射，它提供了概念性的、易于理解的模型化数据的方</tspan><tspan style="white-space:pre" y="35.1" x="8">法。</tspan></text></g><g ed:width="411" ed:height="24.5" transform="matrix(1,0,0,1,762,4309)" id="348" ed:parentid="276"><path stroke="#696969" fill="none" d="M0,24.5L411,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">在Node.js 中， 一般采用 Sequelize 这个 ORM 类库来操作数据库。</tspan></text></g><g ed:width="399" ed:height="43.5" transform="matrix(1,0,0,1,762,4340)" id="350" ed:parentid="276"><path stroke="#696969" fill="none" d="M0,43.5L399,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">可以直接定义数据模型来创建数据表，而不必去数据库中使用 SQL</tspan><tspan style="white-space:pre" y="35.1" x="8">脚本创建。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,762,4390)" id="352" ed:parentid="276"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8"> Sequelize 通过 define 方法定义数据模型，通过访问模型提供的接口来查询和更新数</tspan><tspan style="white-space:pre" y="35.1" x="8">据，避免开发者直接访问数据库</tspan></text></g><g ed:width="384" ed:height="24.5" transform="matrix(1,0,0,1,779,4440)" id="354" ed:parentid="278"><path stroke="#696969" fill="none" d="M0,24.5L384,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">MongoDB 是由 C＋＋编写的基于分布式文件存储的开源数据库</tspan></text></g><g ed:width="376" ed:height="24.5" transform="matrix(1,0,0,1,779,4471)" id="356" ed:parentid="278"><path stroke="#696969" fill="none" d="M0,24.5L376,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">开发Node.js应用时， 一般借助 Mongoose 类库来访问数据库</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,748,4502)" id="360" ed:parentid="280"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Redis 可用作数据库、高速缓存和消息队列代理 。 Redis非常适合处理那些短时间内被</tspan><tspan style="white-space:pre" y="35.1" x="8">高频访问但又不需要长期访问的简单数据存储</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,748,4552)" id="362" ed:parentid="280"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Redis 是一个开源、使用 ANSIC 语言编写 、 遵守 BSD ( Berkeley Software </tspan><tspan style="white-space:pre" y="35.1" x="8">Distribution, 伯克利软件套件）协议、支持网络、可基于内存亦可持久化的日志型 </tspan><tspan style="white-space:pre" y="54.1" x="8">Key-Value 数据库，并提供多种语言的 API。</tspan></text></g><g ed:width="448" ed:height="43.5" transform="matrix(1,0,0,1,748,4621)" id="364" ed:parentid="280"><path stroke="#696969" fill="none" d="M0,43.5L448,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">在 Redis 中，集合是通过哈希表实现的，所以添加、删除、查找的复杂度都</tspan><tspan style="white-space:pre" y="35.1" x="8">是 o(1)</tspan></text></g><g ed:width="470" ed:height="24.5" transform="matrix(1,0,0,1,748,4671)" id="366" ed:parentid="280"><path stroke="#696969" fill="none" d="M0,24.5L470,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">GitHub 上开源的 Redis库有很多 ， 其中使用最广、最成熟的是 node_redis 库</tspan></text></g><g ed:width="436" ed:height="43.5" transform="matrix(1,0,0,1,748,4702)" id="368" ed:parentid="280"><path stroke="#696969" fill="none" d="M0,43.5L436,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8"> Session 中的数据一般都是短时间内高频访问的，需要保证性能，所以比</tspan><tspan style="white-space:pre" y="35.1" x="8">较好的方式是内存配合 Redis 做一个持久化。</tspan></text></g><g ed:width="374" ed:height="24.5" transform="matrix(1,0,0,1,748,4752)" id="370" ed:parentid="280"><path stroke="#696969" fill="none" d="M0,24.5L374,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">在 Koa 应用中可以使用 koa-session 中间件来操作 Session。</tspan></text></g><g ed:width="425" ed:height="24.5" transform="matrix(1,0,0,1,551,4809)" id="372" ed:parentid="114"><path stroke="#696969" fill="none" d="M0,24.5L425,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">所谓单元是指应用的最小可测试部件，通常是单个函数、过程或方法 。</tspan></text></g><g ed:width="343" ed:height="43.5" transform="matrix(1,0,0,1,551,4840)" id="374" ed:parentid="114"><path stroke="#696969" fill="none" d="M0,43.5L343,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">单元测试通常拥有如下优势：尽早发现问题并进行更正；</tspan><tspan style="white-space:pre" y="35.1" x="8">简化集成测试的复杂度；生成文档。</tspan></text></g><g ed:width="333" ed:height="24.5" transform="matrix(1,0,0,1,551,4890)" id="376" ed:parentid="114"><path stroke="#696969" fill="none" d="M0,24.5L333,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">两个概念：TDD是测试驱动开发、BDD是行为驱动开发</tspan></text></g><g ed:width="304" ed:height="43.5" transform="matrix(1,0,0,1,684,4921)" id="378" ed:parentid="282"><path stroke="#696969" fill="none" d="M0,43.5L304,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">所谓断言是一种放在程序中的逻辑判断，目的是检</tspan><tspan style="white-space:pre" y="35.1" x="8">测结果是否与开发者的预想一致。</tspan></text></g><g ed:width="383" ed:height="24.5" transform="matrix(1,0,0,1,684,4971)" id="380" ed:parentid="282"><path stroke="#696969" fill="none" d="M0,24.5L383,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Node.js 内置了断言库 Assert，但并不是一个真正的测试运行器</tspan></text></g><g ed:width="227" ed:height="24.5" transform="matrix(1,0,0,1,684,5002)" id="382" ed:parentid="282"><path stroke="#696969" fill="none" d="M0,24.5L227,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">单元测试的测试用例中推荐使用Chai</tspan></text></g><g ed:width="514" ed:height="24.5" transform="matrix(1,0,0,1,684,5033)" id="384" ed:parentid="282"><path stroke="#696969" fill="none" d="M0,24.5L514,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Chai 包含 3 个断言库，其中有 BDD 风格的 Expect/Should 和 TDD 风格的 Assert 。</tspan></text></g><g ed:width="435" ed:height="24.5" transform="matrix(1,0,0,1,684,5064)" id="386" ed:parentid="282"><path stroke="#696969" fill="none" d="M0,24.5L435,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">可以直接使用 assert(expression, message) PEI数来对应所有断言的情况</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,687,5095)" id="388" ed:parentid="284"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Mocha 是一个功能丰富且流行的 JavaScript 测试框架，支持回调函数、Promise 、 </tspan><tspan style="white-space:pre" y="35.1" x="8">Async等。</tspan></text></g><g ed:width="261" ed:height="24.5" transform="matrix(1,0,0,1,687,5145)" id="390" ed:parentid="284"><path stroke="#696969" fill="none" d="M0,24.5L261,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Mocha 的关键词只有 describe 和 it 两个 </tspan></text></g><g ed:width="497" ed:height="24.5" transform="matrix(1,0,0,1,776,5176)" id="392" ed:parentid="286"><path stroke="#696969" fill="none" d="M0,24.5L497,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">SuperTest 就是一个用来实现 Web 请求的库，是可以用来测试 HTTP 服务的工具。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,776,5207)" id="394" ed:parentid="286"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">SuperTest 也是对 SuperAgent 工具 的扩展，在支持所有 SuperAgent 的 API 基础</tspan><tspan style="white-space:pre" y="35.1" x="8">上，提供了对请求结果的断言处理 。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,696,5257)" id="396" ed:parentid="288"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Nock 提供给开发者一个模拟请求服务器响应的情况，而 Nye 则可以检查代码的测试</tspan><tspan style="white-space:pre" y="35.1" x="8">覆盖情况。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,696,5307)" id="398" ed:parentid="288"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">单元测试过程中， 一方面不一定能够调用这些 API 服务， 另一方面单元测试并不需要</tspan><tspan style="white-space:pre" y="35.1" x="8">承担对第三方服务的测试。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,696,5357)" id="400" ed:parentid="288"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Nock 就是一个模拟服务器响应的工具。Nock 会覆盖 Node.js 的 http.request 方法 </tspan><tspan style="white-space:pre" y="35.1" x="8">， 来伪造一个结果</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,696,5407)" id="402" ed:parentid="288"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">完成所有单元测试后，也可能存在测试用例不够完整或不能测试到所有的应测试代码的</tspan><tspan style="white-space:pre" y="35.1" x="8">情况 。另一种情况是被测试的代码中存在一些“死”代码，即逻辑上不能被执行到的</tspan><tspan style="white-space:pre" y="54.1" x="8">代码 。 </tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,696,5476)" id="404" ed:parentid="288"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8"> 4 个种类：语句覆盖率（ Stmts ）、分支覆盖率 （Branch）、函数覆盖率（ Funes </tspan><tspan style="white-space:pre" y="35.1" x="8">）、行覆盖率（ Lines ）</tspan></text></g><g ed:width="343" ed:height="24.5" transform="matrix(1,0,0,1,686,5553)" id="406" ed:parentid="290"><path stroke="#696969" fill="none" d="M0,24.5L343,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">通过完整的日志记录，能够快速地定位、还原问题现场。</tspan></text></g><g ed:width="373" ed:height="24.5" transform="matrix(1,0,0,1,686,5584)" id="408" ed:parentid="290"><path stroke="#696969" fill="none" d="M0,24.5L373,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">根据日志的用途， 一般可以将日志分为访问日志和应用日志。</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,686,5615)" id="410" ed:parentid="290"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">log4js 中的日志输出可以分为 7 个级别，日志级别由低到高：trace跟踪信息、debug</tspan><tspan style="white-space:pre" y="35.1" x="8">调试信息、info非调试和跟踪信息、warn警告信息、error错误信息、fatal严重错误信</tspan><tspan style="white-space:pre" y="54.1" x="8">息</tspan></text></g><g ed:width="369" ed:height="24.5" transform="matrix(1,0,0,1,686,5684)" id="412" ed:parentid="290"><path stroke="#696969" fill="none" d="M0,24.5L369,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">在项目开发中，一般会分为开发、测试、验证、线上等环境。</tspan></text></g><g ed:width="474" ed:height="24.5" transform="matrix(1,0,0,1,686,5715)" id="414" ed:parentid="290"><path stroke="#696969" fill="none" d="M0,24.5L474,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">除 try/catch 之外，也可以用另外一种方法解决： 使用 uncaughtException 。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,686,5746)" id="416" ed:parentid="290"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">传递异常情况，常见的方式有 3 种，包括 throw 抛出、 callback 回调传递和通过 </tspan><tspan style="white-space:pre" y="35.1" x="8">EventEmitter 触发 error 。</tspan></text></g><g ed:width="503" ed:height="43.5" transform="matrix(1,0,0,1,660,5796)" id="418" ed:parentid="292"><path stroke="#696969" fill="none" d="M0,43.5L503,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">进程管理器用于对应用状态进行管理，可以启动、暂停、重启或删 除应用进程，也可</tspan><tspan style="white-space:pre" y="35.1" x="8">以对进程进行监控，包括对进程错误的记录。</tspan></text></g><g ed:width="508" ed:height="43.5" transform="matrix(1,0,0,1,660,5846)" id="422" ed:parentid="292"><path stroke="#696969" fill="none" d="M0,43.5L508,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Docker 是一个开源的应用容器引擎，能够让应用程序部署在软件容器下，这个容器是</tspan><tspan style="white-space:pre" y="35.1" x="8">在 Linux 操作系统上的一个软件抽象层。</tspan></text></g><g ed:width="503" ed:height="43.5" transform="matrix(1,0,0,1,660,5896)" id="424" ed:parentid="292"><path stroke="#696969" fill="none" d="M0,43.5L503,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Travis CI 是一个免费的持续集成服务。持续集成是指在代码开发过程中经常性地集成</tspan><tspan style="white-space:pre" y="35.1" x="8">（ 通常在某个特定分支修改后 就触发〉。</tspan></text></g><g ed:width="514" ed:height="62.5" transform="matrix(1,0,0,1,660,5946)" id="426" ed:parentid="292"><path stroke="#696969" fill="none" d="M0,62.5L514,62.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">在持续集成环境中有两种自动部署方法： 一种是使用脚本登录对应的线上服务器，在</tspan><tspan style="white-space:pre" y="35.1" x="8">己经设置好 Git 环境的服务器上获取代码，然后启动；另一种是在构建服务器上生成代</tspan><tspan style="white-space:pre" y="54.1" x="8">码压缩包，利用 scp 传输到线上服务器，解压后启动</tspan></text></g><g ed:width="447" ed:height="24.5" transform="matrix(1,0,0,1,686,6015)" id="428" ed:parentid="294"><path stroke="#696969" fill="none" d="M0,24.5L447,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一般来说，服务的性能分为两部分：服务的吞吐量和服务对资源的占用量。</tspan></text></g><g ed:width="468" ed:height="43.5" transform="matrix(1,0,0,1,686,6046)" id="430" ed:parentid="294"><path stroke="#696969" fill="none" d="M0,43.5L468,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">Node.js 是基于 v8 引擎的 ， 在 JavaScript 中，内存采用堆的方式来分配，因</tspan><tspan style="white-space:pre" y="35.1" x="8">此 ， 可以根据堆的统计信息查看 Node. 月民务的内存使用情况。</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,686,6096)" id="432" ed:parentid="294"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一般情况下， HTTP 服务采用 QPS（查询量/秒）和 TPS（事务/秒） 来衡量服务的性</tspan><tspan style="white-space:pre" y="35.1" x="8">能</tspan></text></g><g ed:width="514" ed:height="43.5" transform="matrix(1,0,0,1,686,6146)" id="434" ed:parentid="294"><path stroke="#696969" fill="none" d="M0,43.5L514,43.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8"> 一般数据通过 Kafka （消息队列）上报到 Influxdb （分布式时序数据库〉中存储，最</tspan><tspan style="white-space:pre" y="35.1" x="8">后通过 Grafana （可视化图表〉展示出来。</tspan></text></g><g ed:width="463" ed:height="24.5" transform="matrix(1,0,0,1,686,6196)" id="436" ed:parentid="294"><path stroke="#696969" fill="none" d="M0,24.5L463,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">一个强大的开源日志管理系统 ELK （即 Elasticsearch Logstash Kibana ） 。</tspan></text></g><g ed:width="454" ed:height="24.5" transform="matrix(1,0,0,1,686,6227)" id="438" ed:parentid="294"><path stroke="#696969" fill="none" d="M0,24.5L454,24.5" stroke-linejoin="round"/><text class="st3"><tspan style="white-space:pre" y="16.1" x="8">PM2 官方也提供了 一个服务--Keymetrics 来进行性能数据的分析和展示 。</tspan></text></g><symbol id="plus"><path fill="url(#lg1)" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6z"/><path stroke="#46a000" fill="none" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6zM3,6L9,6M6,3L6,9" stroke-width="0.7"/></symbol><symbol id="minus"><path fill="url(#lg1)" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6z"/><path stroke="#46a000" fill="none" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6zM3,6L9,6" stroke-width="0.7"/></symbol><g transform="translate(306,3130)" ed:togtopicid="101"><use xlink:href="#minus"/></g><g transform="translate(550,318)" ed:togtopicid="102"><use xlink:href="#minus"/></g><g transform="translate(522,978)" ed:togtopicid="104"><use xlink:href="#minus"/></g><g transform="translate(493,1597)" ed:togtopicid="106"><use xlink:href="#minus"/></g><g transform="translate(501,2471)" ed:togtopicid="108"><use xlink:href="#minus"/></g><g transform="translate(594,3536)" ed:togtopicid="110"><use xlink:href="#minus"/></g><g transform="translate(509,4396)" ed:togtopicid="112"><use xlink:href="#minus"/></g><g transform="translate(525,5158)" ed:togtopicid="114"><use xlink:href="#minus"/></g><g transform="translate(541,5896)" ed:togtopicid="116"><use xlink:href="#minus"/></g><g transform="translate(689,177)" ed:togtopicid="120"><use xlink:href="#minus"/></g><g transform="translate(649,458)" ed:togtopicid="122"><use xlink:href="#minus"/></g><g transform="translate(772,599)" ed:togtopicid="124"><use xlink:href="#minus"/></g><g transform="translate(638,744)" ed:togtopicid="152"><use xlink:href="#minus"/></g><g transform="translate(664,944)" ed:togtopicid="154"><use xlink:href="#minus"/></g><g transform="translate(664,1178)" ed:togtopicid="156"><use xlink:href="#minus"/></g><g transform="translate(612,1397)" ed:togtopicid="190"><use xlink:href="#minus"/></g><g transform="translate(691,1663)" ed:togtopicid="192"><use xlink:href="#minus"/></g><g transform="translate(626,2190)" ed:togtopicid="216"><use xlink:href="#minus"/></g><g transform="translate(614,2676)" ed:togtopicid="218"><use xlink:href="#minus"/></g><g transform="translate(723,2910)" ed:togtopicid="220"><use xlink:href="#minus"/></g><g transform="translate(704,3007)" ed:togtopicid="222"><use xlink:href="#minus"/></g><g transform="translate(692,3264)" ed:togtopicid="266"><use xlink:href="#minus"/></g><g transform="translate(713,3580)" ed:togtopicid="268"><use xlink:href="#minus"/></g><g transform="translate(713,3767)" ed:togtopicid="270"><use xlink:href="#minus"/></g><g transform="translate(765,3907)" ed:togtopicid="272"><use xlink:href="#minus"/></g><g transform="translate(641,4134)" ed:togtopicid="274"><use xlink:href="#minus"/></g><g transform="translate(736,4340)" ed:togtopicid="276"><use xlink:href="#minus"/></g><g transform="translate(753,4461)" ed:togtopicid="278"><use xlink:href="#minus"/></g><g transform="translate(722,4633)" ed:togtopicid="280"><use xlink:href="#minus"/></g><g transform="translate(658,4999)" ed:togtopicid="282"><use xlink:href="#minus"/></g><g transform="translate(661,5126)" ed:togtopicid="284"><use xlink:href="#minus"/></g><g transform="translate(750,5207)" ed:togtopicid="286"><use xlink:href="#minus"/></g><g transform="translate(670,5382)" ed:togtopicid="288"><use xlink:href="#minus"/></g><g transform="translate(660,5665)" ed:togtopicid="290"><use xlink:href="#minus"/></g><g transform="translate(634,5896)" ed:togtopicid="292"><use xlink:href="#minus"/></g><g transform="translate(660,6127)" ed:togtopicid="294"><use xlink:href="#minus"/></g></svg>