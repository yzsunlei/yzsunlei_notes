<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" ed:vSpacing="30" xmlns:ev="http://www.w3.org/2001/xml-events" ed:name="Page-1" id="page100" height="8452" ed:hSpacing="30" viewBox="0 0 1618 8452" width="1618" xmlns:ed="https://www.edrawsoft.cn/xml/2017/SVGExtensions/"><style type="text/css"><![CDATA[
g[ed\:togtopicid],g[ed\:hyperlink],g[ed\:comment],g[ed\:note] {cursor:pointer;}
g[id] {-moz-user-select: none;-ms-user-select: none;user-select: none;}
svg text::selection,svg tspan::selection{background-color: #4285f4;color: #ffffff;fill: #ffffff;}
.st2 {fill:#303030;font-family:微软雅黑;font-size:12pt}
.st3 {fill:#454545;font-family:微软雅黑;font-size:10pt}
.st1 {fill:#ffffff;font-family:微软雅黑;font-size:14pt}
]]></style><defs><linearGradient y1="0%" x2="0%" y2="100%" id="lg1" x1="0%"><stop stop-color="#ffffff" offset="0"/><stop stop-color="#f0f5f0" offset="0.25"/><stop stop-color="#e1ebe1" offset="0.75"/><stop stop-color="#c8d7c8" offset="1"/></linearGradient></defs><rect x="0" height="8452" width="1618" y="0" fill="#ffffff"/><path transform="matrix(1,0,0,1,314,2352)" id="103" stroke="#696969" ed:tosuperid="102" d="M-95.1,1845.9C31.3,1500.2,-105.9,-1874.4,118,-1874.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,314,2775)" id="105" stroke="#696969" ed:tosuperid="104" d="M-92.3,1422.4C29.3,1122,-104.2,-1450.9,118,-1450.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,314,3196)" id="107" stroke="#696969" ed:tosuperid="106" d="M-88.1,1001.9C26.2,753.8,-101.6,-1030.4,118,-1030.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,634,345)" id="109" stroke="#696969" ed:tosuperid="108" d="M-13.5,132.6C5.4,132.6,-13.5,-132.6,13.5,-132.6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="102"/><path transform="matrix(1,0,0,1,634,510)" id="111" stroke="#696969" ed:tosuperid="110" d="M-13.5,-32.4C3.8,-32.4,-9.9,32.4,13.5,32.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="102"/><path transform="matrix(1,0,0,1,634,631)" id="113" stroke="#696969" ed:tosuperid="112" d="M-13.5,-153.9C5.4,-153.9,-13.5,153.9,13.5,153.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="102"/><path transform="matrix(1,0,0,1,634,661)" id="115" stroke="#696969" ed:tosuperid="114" d="M-13.5,-183.6C5.4,-183.6,-13.5,183.6,13.5,183.6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="102"/><path transform="matrix(1,0,0,1,618,1180)" id="119" stroke="#696969" ed:tosuperid="118" d="M-13.5,143.9C5.4,143.9,-13.5,-143.9,13.5,-143.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="104"/><path transform="matrix(1,0,0,1,618,1396)" id="121" stroke="#696969" ed:tosuperid="120" d="M-13.5,-71.6C5.4,-71.6,-13.5,71.6,13.5,71.6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="104"/><path transform="matrix(1,0,0,1,698,1992)" id="127" stroke="#696969" ed:tosuperid="126" d="M-13.5,173.1C5.4,173.1,-13.5,-173.1,13.5,-173.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="106"/><path transform="matrix(1,0,0,1,698,2030)" id="129" stroke="#696969" ed:tosuperid="128" d="M-13.5,135.6C5.4,135.6,-13.5,-135.6,13.5,-135.6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="106"/><path transform="matrix(1,0,0,1,698,2120)" id="131" stroke="#696969" ed:tosuperid="130" d="M-13.5,45.1C5.1,45.1,-12.9,-45.1,13.5,-45.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="106"/><path transform="matrix(1,0,0,1,698,2274)" id="133" stroke="#696969" ed:tosuperid="132" d="M-13.5,-109.1C5.4,-109.1,-13.5,109.1,13.5,109.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="106"/><path transform="matrix(1,0,0,1,314,3486)" id="137" stroke="#696969" ed:tosuperid="136" d="M-83.5,711.1C22.7,505.8,-98.5,-739.6,118,-739.6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,570,2680)" id="139" stroke="#696969" ed:tosuperid="138" d="M-13.5,67.1C5.4,67.1,-13.5,-67.1,13.5,-67.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="136"/><path transform="matrix(1,0,0,1,570,2745)" id="141" stroke="#696969" ed:tosuperid="140" d="M-13.5,1.6C-2.3,1.6,4.5,-1.6,13.5,-1.6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="136"/><path transform="matrix(1,0,0,1,570,2818)" id="143" stroke="#696969" ed:tosuperid="142" d="M-13.5,-71.6C5.4,-71.6,-13.5,71.6,13.5,71.6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="136"/><path transform="matrix(1,0,0,1,314,2133)" id="145" stroke="#696969" ed:tosuperid="144" d="M-96.2,2064.8C32.1,1697.6,-106.6,-2093.3,118,-2093.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,314,3998)" id="147" stroke="#696969" ed:tosuperid="146" d="M-67.2,199.8C3.6,99.9,-38.5,-228.3,118,-228.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,314,4092)" id="149" stroke="#696969" ed:tosuperid="148" d="M-58.5,105.4C1.5,36.4,4.8,-133.9,118,-133.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,597,3907)" id="151" stroke="#696969" ed:tosuperid="150" d="M-13.5,51.6C5.4,51.6,-13.5,-51.6,13.5,-51.6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="148"/><path transform="matrix(1,0,0,1,597,3957)" id="153" stroke="#696969" ed:tosuperid="152" d="M-13.5,1.6C-2.3,1.6,4.5,-1.6,13.5,-1.6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="148"/><path transform="matrix(1,0,0,1,597,4014)" id="155" stroke="#696969" ed:tosuperid="154" d="M-13.5,-56.1C5.4,-56.1,-13.5,56.1,13.5,56.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="148"/><path transform="matrix(1,0,0,1,314,4493)" id="159" stroke="#696969" ed:tosuperid="158" d="M-69.1,-238.4C6,-127.8,-53.1,266.9,118,266.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,629,4481)" id="161" stroke="#696969" ed:tosuperid="160" d="M-13.5,278.4C5.4,278.4,-13.5,-278.4,13.5,-278.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="158"/><path transform="matrix(1,0,0,1,629,4646)" id="163" stroke="#696969" ed:tosuperid="162" d="M-13.5,114.1C5.4,114.1,-13.5,-114.1,13.5,-114.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="158"/><path transform="matrix(1,0,0,1,629,4877)" id="165" stroke="#696969" ed:tosuperid="164" d="M-13.5,-117.4C5.4,-117.4,-13.5,117.4,13.5,117.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="158"/><path transform="matrix(1,0,0,1,629,5010)" id="167" stroke="#696969" ed:tosuperid="166" d="M-13.5,-250.1C5.4,-250.1,-13.5,250.1,13.5,250.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="158"/><path transform="matrix(1,0,0,1,629,5063)" id="169" stroke="#696969" ed:tosuperid="168" d="M-13.5,-303.1C5.4,-303.1,-13.5,303.1,13.5,303.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="158"/><path transform="matrix(1,0,0,1,314,5106)" id="171" stroke="#696969" ed:tosuperid="170" d="M-86,-851.6C24.6,-624.7,-100.2,880.1,118,880.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,570,5730)" id="173" stroke="#696969" ed:tosuperid="172" d="M-13.5,256.4C5.4,256.4,-13.5,-256.4,13.5,-256.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="170"/><path transform="matrix(1,0,0,1,570,5853)" id="175" stroke="#696969" ed:tosuperid="174" d="M-13.5,133.1C5.4,133.1,-13.5,-133.1,13.5,-133.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="170"/><path transform="matrix(1,0,0,1,570,6091)" id="177" stroke="#696969" ed:tosuperid="176" d="M-13.5,-104.4C5.4,-104.4,-13.5,104.4,13.5,104.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="170"/><path transform="matrix(1,0,0,1,570,6250)" id="179" stroke="#696969" ed:tosuperid="178" d="M-13.5,-263.9C5.4,-263.9,-13.5,263.9,13.5,263.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="170"/><path transform="matrix(1,0,0,1,314,5585)" id="181" stroke="#696969" ed:tosuperid="180" d="M-91.5,-1330.4C28.7,-1040.7,-103.8,1358.9,118,1358.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,650,6809)" id="183" stroke="#696969" ed:tosuperid="182" d="M-13.5,134.4C5.4,134.4,-13.5,-134.4,13.5,-134.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="180"/><path transform="matrix(1,0,0,1,650,6880)" id="185" stroke="#696969" ed:tosuperid="184" d="M-13.5,64.1C5.4,64.1,-13.5,-64.1,13.5,-64.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="180"/><path transform="matrix(1,0,0,1,650,6970)" id="187" stroke="#696969" ed:tosuperid="186" d="M-13.5,-26.4C2.9,-26.4,-7.7,26.4,13.5,26.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="180"/><path transform="matrix(1,0,0,1,650,7083)" id="189" stroke="#696969" ed:tosuperid="188" d="M-13.5,-138.9C5.4,-138.9,-13.5,138.9,13.5,138.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="180"/><path transform="matrix(1,0,0,1,314,5927)" id="193" stroke="#696969" ed:tosuperid="192" d="M-94.1,-1672.9C30.6,-1345,-105.3,1701.4,118,1701.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,570,7516)" id="195" stroke="#696969" ed:tosuperid="194" d="M-13.5,112.4C5.4,112.4,-13.5,-112.4,13.5,-112.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="192"/><path transform="matrix(1,0,0,1,570,7582)" id="197" stroke="#696969" ed:tosuperid="196" d="M-13.5,46.9C5.2,46.9,-13.1,-46.9,13.5,-46.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="192"/><path transform="matrix(1,0,0,1,570,7655)" id="199" stroke="#696969" ed:tosuperid="198" d="M-13.5,-26.4C2.9,-26.4,-7.7,26.4,13.5,26.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="192"/><path transform="matrix(1,0,0,1,570,7736)" id="201" stroke="#696969" ed:tosuperid="200" d="M-13.5,-107.4C5.4,-107.4,-13.5,107.4,13.5,107.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="192"/><path transform="matrix(1,0,0,1,314,6209)" id="205" stroke="#696969" ed:tosuperid="204" d="M-95.7,-1954.1C31.7,-1597.7,-106.3,1982.6,118,1982.6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,602,8099)" id="207" stroke="#696969" ed:tosuperid="206" d="M-13.5,92.1C5.4,92.1,-13.5,-92.1,13.5,-92.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="204"/><path transform="matrix(1,0,0,1,602,8147)" id="209" stroke="#696969" ed:tosuperid="208" d="M-13.5,43.9C5.1,43.9,-12.7,-43.9,13.5,-43.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="204"/><path transform="matrix(1,0,0,1,602,8180)" id="211" stroke="#696969" ed:tosuperid="210" d="M-13.5,11.1C-0.1,11.1,-0.6,-11.1,13.5,-11.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="204"/><path transform="matrix(1,0,0,1,602,8216)" id="213" stroke="#696969" ed:tosuperid="212" d="M-13.5,-24.6C2.6,-24.6,-7,24.6,13.5,24.6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="204"/><path transform="matrix(1,0,0,1,602,8281)" id="215" stroke="#696969" ed:tosuperid="214" d="M-13.5,-90.1C5.4,-90.1,-13.5,90.1,13.5,90.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="204"/><path transform="matrix(1,0,0,1,753,164)" id="217" stroke="#696969" ed:tosuperid="216" d="M-13.5,48.3C5.3,48.3,-13.2,-48.3,13.5,-48.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="108"/><path transform="matrix(1,0,0,1,753,245)" id="219" stroke="#696969" ed:tosuperid="218" d="M-13.5,-32.8C3.9,-32.8,-10,32.8,13.5,32.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="108"/><path transform="matrix(1,0,0,1,753,260)" id="221" stroke="#696969" ed:tosuperid="220" d="M-13.5,-48.3C5.3,-48.3,-13.2,48.3,13.5,48.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="108"/><path transform="matrix(1,0,0,1,766,441)" id="223" stroke="#696969" ed:tosuperid="222" d="M-13.5,101.3C5.4,101.3,-13.5,-101.3,13.5,-101.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="110"/><path transform="matrix(1,0,0,1,766,456)" id="225" stroke="#696969" ed:tosuperid="224" d="M-13.5,85.8C5.4,85.8,-13.5,-85.8,13.5,-85.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="110"/><path transform="matrix(1,0,0,1,766,481)" id="227" stroke="#696969" ed:tosuperid="226" d="M-13.5,60.8C5.4,60.8,-13.5,-60.8,13.5,-60.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="110"/><path transform="matrix(1,0,0,1,766,587)" id="229" stroke="#696969" ed:tosuperid="228" d="M-13.5,-45.3C5.1,-45.3,-12.9,45.3,13.5,45.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="110"/><path transform="matrix(1,0,0,1,766,603)" id="231" stroke="#696969" ed:tosuperid="230" d="M-13.5,-60.8C5.4,-60.8,-13.5,60.8,13.5,60.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="110"/><path transform="matrix(1,0,0,1,766,618)" id="233" stroke="#696969" ed:tosuperid="232" d="M-13.5,-76.3C5.4,-76.3,-13.5,76.3,13.5,76.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="110"/><path transform="matrix(1,0,0,1,766,643)" id="235" stroke="#696969" ed:tosuperid="234" d="M-13.5,-101.3C5.4,-101.3,-13.5,101.3,13.5,101.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="110"/><path transform="matrix(1,0,0,1,737,1038)" id="239" stroke="#696969" ed:tosuperid="238" d="M-13.5,-1.8C-2.3,-1.8,4.4,1.8,13.5,1.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="118"/><path transform="matrix(1,0,0,1,737,1063)" id="241" stroke="#696969" ed:tosuperid="240" d="M-13.5,-26.8C3,-26.8,-7.9,26.8,13.5,26.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="118"/><path transform="matrix(1,0,0,1,737,1325)" id="245" stroke="#696969" ed:tosuperid="244" d="M-13.5,142.3C5.4,142.3,-13.5,-142.3,13.5,-142.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,737,1400)" id="247" stroke="#696969" ed:tosuperid="246" d="M-13.5,67.3C5.4,67.3,-13.5,-67.3,13.5,-67.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,737,1441)" id="249" stroke="#696969" ed:tosuperid="248" d="M-13.5,26.8C3,26.8,-7.9,-26.8,13.5,-26.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,737,1550)" id="251" stroke="#696969" ed:tosuperid="250" d="M-13.5,-82.8C5.4,-82.8,-13.5,82.8,13.5,82.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,737,1079)" id="253" stroke="#696969" ed:tosuperid="252" d="M-13.5,-42.3C4.9,-42.3,-12.4,42.3,13.5,42.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="118"/><path transform="matrix(1,0,0,1,737,1094)" id="255" stroke="#696969" ed:tosuperid="254" d="M-13.5,-57.8C5.4,-57.8,-13.5,57.8,13.5,57.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="118"/><path transform="matrix(1,0,0,1,856,1824)" id="257" stroke="#696969" ed:tosuperid="256" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="126"/><path transform="matrix(1,0,0,1,830,2027)" id="259" stroke="#696969" ed:tosuperid="258" d="M-13.5,48.3C5.3,48.3,-13.2,-48.3,13.5,-48.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="130"/><path transform="matrix(1,0,0,1,817,2353)" id="261" stroke="#696969" ed:tosuperid="260" d="M-13.5,31C3.7,31,-9.4,-31,13.5,-31" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="132"/><path transform="matrix(1,0,0,1,817,2368)" id="263" stroke="#696969" ed:tosuperid="262" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="132"/><path transform="matrix(1,0,0,1,817,2424)" id="265" stroke="#696969" ed:tosuperid="264" d="M-13.5,-40.5C4.8,-40.5,-12.1,40.5,13.5,40.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="132"/><path transform="matrix(1,0,0,1,817,2440)" id="267" stroke="#696969" ed:tosuperid="266" d="M-13.5,-56C5.4,-56,-13.5,56,13.5,56" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="132"/><path transform="matrix(1,0,0,1,817,2465)" id="269" stroke="#696969" ed:tosuperid="268" d="M-13.5,-81C5.4,-81,-13.5,81,13.5,81" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="132"/><path transform="matrix(1,0,0,1,729,2773)" id="273" stroke="#696969" ed:tosuperid="272" d="M-13.5,-29.8C3.5,-29.8,-9,29.8,13.5,29.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="140"/><path transform="matrix(1,0,0,1,729,2789)" id="275" stroke="#696969" ed:tosuperid="274" d="M-13.5,-45.3C5.1,-45.3,-12.9,45.3,13.5,45.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="140"/><path transform="matrix(1,0,0,1,737,3092)" id="277" stroke="#696969" ed:tosuperid="276" d="M-13.5,50C5.3,50,-13.4,-50,13.5,-50" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="488"/><path transform="matrix(1,0,0,1,737,3136)" id="279" stroke="#696969" ed:tosuperid="278" d="M-13.5,6C-1.3,6,2.1,-6,13.5,-6" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="488"/><path transform="matrix(1,0,0,1,737,3151)" id="281" stroke="#696969" ed:tosuperid="280" d="M-13.5,-9.5C-0.5,-9.5,0.2,9.5,13.5,9.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="488"/><path transform="matrix(1,0,0,1,737,3167)" id="283" stroke="#696969" ed:tosuperid="282" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="488"/><path transform="matrix(1,0,0,1,737,3201)" id="285" stroke="#696969" ed:tosuperid="284" d="M-13.5,-59.5C5.4,-59.5,-13.5,59.5,13.5,59.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="488"/><path transform="matrix(1,0,0,1,751,3860)" id="287" stroke="#696969" ed:tosuperid="286" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="150"/><path transform="matrix(1,0,0,1,690,3935)" id="289" stroke="#696969" ed:tosuperid="288" d="M-13.5,20.3C1.8,20.3,-5.1,-20.3,13.5,-20.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="152"/><path transform="matrix(1,0,0,1,751,4068)" id="291" stroke="#696969" ed:tosuperid="290" d="M-13.5,3C-2,3,3.8,-3,13.5,-3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="154"/><path transform="matrix(1,0,0,1,751,4083)" id="293" stroke="#696969" ed:tosuperid="292" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="154"/><path transform="matrix(1,0,0,1,748,4178)" id="295" stroke="#696969" ed:tosuperid="294" d="M-13.5,25C2.7,25,-7.2,-25,13.5,-25" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="160"/><path transform="matrix(1,0,0,1,748,4203)" id="297" stroke="#696969" ed:tosuperid="296" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="160"/><path transform="matrix(1,0,0,1,748,4408)" id="299" stroke="#696969" ed:tosuperid="298" d="M-13.5,123.8C5.4,123.8,-13.5,-123.8,13.5,-123.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="162"/><path transform="matrix(1,0,0,1,748,4433)" id="301" stroke="#696969" ed:tosuperid="300" d="M-13.5,98.8C5.4,98.8,-13.5,-98.8,13.5,-98.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="162"/><path transform="matrix(1,0,0,1,748,4458)" id="303" stroke="#696969" ed:tosuperid="302" d="M-13.5,73.8C5.4,73.8,-13.5,-73.8,13.5,-73.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="162"/><path transform="matrix(1,0,0,1,748,4527)" id="305" stroke="#696969" ed:tosuperid="304" d="M-13.5,4.8C-1.6,4.8,2.8,-4.8,13.5,-4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="162"/><path transform="matrix(1,0,0,1,748,4561)" id="307" stroke="#696969" ed:tosuperid="306" d="M-13.5,-29.8C3.5,-29.8,-9,29.8,13.5,29.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="162"/><path transform="matrix(1,0,0,1,748,4586)" id="309" stroke="#696969" ed:tosuperid="308" d="M-13.5,-54.8C5.4,-54.8,-13.5,54.8,13.5,54.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="162"/><path transform="matrix(1,0,0,1,748,4655)" id="311" stroke="#696969" ed:tosuperid="310" d="M-13.5,-123.8C5.4,-123.8,-13.5,123.8,13.5,123.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="162"/><path transform="matrix(1,0,0,1,735,4912)" id="313" stroke="#696969" ed:tosuperid="312" d="M-13.5,82.8C5.4,82.8,-13.5,-82.8,13.5,-82.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="164"/><path transform="matrix(1,0,0,1,748,5245)" id="315" stroke="#696969" ed:tosuperid="314" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="166"/><path transform="matrix(1,0,0,1,748,5260)" id="317" stroke="#696969" ed:tosuperid="316" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="166"/><path transform="matrix(1,0,0,1,663,5461)" id="319" stroke="#696969" ed:tosuperid="318" d="M-13.5,12.5C0.2,12.5,-1.3,-12.5,13.5,-12.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="172"/><path transform="matrix(1,0,0,1,663,5634)" id="321" stroke="#696969" ed:tosuperid="320" d="M-13.5,85.8C5.4,85.8,-13.5,-85.8,13.5,-85.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="174"/><path transform="matrix(1,0,0,1,663,5650)" id="323" stroke="#696969" ed:tosuperid="322" d="M-13.5,70.3C5.4,70.3,-13.5,-70.3,13.5,-70.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="174"/><path transform="matrix(1,0,0,1,663,5725)" id="325" stroke="#696969" ed:tosuperid="324" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="174"/><path transform="matrix(1,0,0,1,663,5740)" id="329" stroke="#696969" ed:tosuperid="328" d="M-13.5,-20.3C1.8,-20.3,-5.1,20.3,13.5,20.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="174"/><path transform="matrix(1,0,0,1,663,5815)" id="331" stroke="#696969" ed:tosuperid="330" d="M-13.5,-95.3C5.4,-95.3,-13.5,95.3,13.5,95.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="174"/><path transform="matrix(1,0,0,1,663,6203)" id="335" stroke="#696969" ed:tosuperid="334" d="M-13.5,-7.8C-0.9,-7.8,1.2,7.8,13.5,7.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="176"/><path transform="matrix(1,0,0,1,663,6287)" id="337" stroke="#696969" ed:tosuperid="336" d="M-13.5,-92.3C5.4,-92.3,-13.5,92.3,13.5,92.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="176"/><path transform="matrix(1,0,0,1,663,6322)" id="339" stroke="#696969" ed:tosuperid="338" d="M-13.5,-126.8C5.4,-126.8,-13.5,126.8,13.5,126.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="176"/><path transform="matrix(1,0,0,1,663,6506)" id="341" stroke="#696969" ed:tosuperid="340" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="178"/><path transform="matrix(1,0,0,1,756,6710)" id="343" stroke="#696969" ed:tosuperid="342" d="M-13.5,-34.5C4.1,-34.5,-10.5,34.5,13.5,34.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="182"/><path transform="matrix(1,0,0,1,769,6795)" id="345" stroke="#696969" ed:tosuperid="344" d="M-13.5,20.3C1.8,20.3,-5.1,-20.3,13.5,-20.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="184"/><path transform="matrix(1,0,0,1,769,6820)" id="347" stroke="#696969" ed:tosuperid="346" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="184"/><path transform="matrix(1,0,0,1,769,6836)" id="349" stroke="#696969" ed:tosuperid="348" d="M-13.5,-20.3C1.8,-20.3,-5.1,20.3,13.5,20.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="184"/><path transform="matrix(1,0,0,1,769,6951)" id="351" stroke="#696969" ed:tosuperid="350" d="M-13.5,45.3C5.1,45.3,-12.9,-45.3,13.5,-45.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="186"/><path transform="matrix(1,0,0,1,743,7214)" id="353" stroke="#696969" ed:tosuperid="352" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="188"/><path transform="matrix(1,0,0,1,743,7229)" id="355" stroke="#696969" ed:tosuperid="354" d="M-13.5,-7.8C-0.9,-7.8,1.2,7.8,13.5,7.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="188"/><path transform="matrix(1,0,0,1,760,7992)" id="357" stroke="#696969" ed:tosuperid="356" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="206"/><path transform="matrix(1,0,0,1,760,8007)" id="359" stroke="#696969" ed:tosuperid="358" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="206"/><path transform="matrix(1,0,0,1,760,8023)" id="361" stroke="#696969" ed:tosuperid="360" d="M-13.5,-15.5C0.8,-15.5,-2.8,15.5,13.5,15.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="206"/><path transform="matrix(1,0,0,1,721,8096)" id="363" stroke="#696969" ed:tosuperid="362" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="208"/><path transform="matrix(1,0,0,1,721,8121)" id="365" stroke="#696969" ed:tosuperid="364" d="M-13.5,-17.3C1.2,-17.3,-3.7,17.3,13.5,17.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="208"/><path transform="matrix(1,0,0,1,734,8220)" id="367" stroke="#696969" ed:tosuperid="366" d="M-13.5,20.3C1.8,20.3,-5.1,-20.3,13.5,-20.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="212"/><path transform="matrix(1,0,0,1,734,8245)" id="369" stroke="#696969" ed:tosuperid="368" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="212"/><path transform="matrix(1,0,0,1,695,8342)" id="371" stroke="#696969" ed:tosuperid="370" d="M-13.5,29.8C3.5,29.8,-9,-29.8,13.5,-29.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="214"/><path transform="matrix(1,0,0,1,695,8376)" id="373" stroke="#696969" ed:tosuperid="372" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="214"/><path transform="matrix(1,0,0,1,734,8261)" id="375" stroke="#696969" ed:tosuperid="374" d="M-13.5,-20.3C1.8,-20.3,-5.1,20.3,13.5,20.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="212"/><path transform="matrix(1,0,0,1,695,8401)" id="377" stroke="#696969" ed:tosuperid="376" d="M-13.5,-29.8C3.5,-29.8,-9,29.8,13.5,29.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="214"/><path transform="matrix(1,0,0,1,714,7384)" id="379" stroke="#696969" ed:tosuperid="378" d="M-13.5,20.3C1.8,20.3,-5.1,-20.3,13.5,-20.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="194"/><path transform="matrix(1,0,0,1,714,7399)" id="381" stroke="#696969" ed:tosuperid="380" d="M-13.5,4.8C-1.6,4.8,2.8,-4.8,13.5,-4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="194"/><path transform="matrix(1,0,0,1,714,7424)" id="383" stroke="#696969" ed:tosuperid="382" d="M-13.5,-20.3C1.8,-20.3,-5.1,20.3,13.5,20.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="194"/><path transform="matrix(1,0,0,1,676,7505)" id="385" stroke="#696969" ed:tosuperid="384" d="M-13.5,29.8C3.5,29.8,-9,-29.8,13.5,-29.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="196"/><path transform="matrix(1,0,0,1,676,7530)" id="387" stroke="#696969" ed:tosuperid="386" d="M-13.5,4.8C-1.6,4.8,2.8,-4.8,13.5,-4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="196"/><path transform="matrix(1,0,0,1,676,7565)" id="389" stroke="#696969" ed:tosuperid="388" d="M-13.5,-29.8C3.5,-29.8,-9,29.8,13.5,29.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="196"/><path transform="matrix(1,0,0,1,663,7654)" id="391" stroke="#696969" ed:tosuperid="390" d="M-13.5,28C3.2,28,-8.3,-28,13.5,-28" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="198"/><path transform="matrix(1,0,0,1,663,7679)" id="393" stroke="#696969" ed:tosuperid="392" d="M-13.5,3C-2,3,3.8,-3,13.5,-3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="198"/><path transform="matrix(1,0,0,1,663,7694)" id="395" stroke="#696969" ed:tosuperid="394" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="198"/><path transform="matrix(1,0,0,1,663,7710)" id="397" stroke="#696969" ed:tosuperid="396" d="M-13.5,-28C3.2,-28,-8.3,28,13.5,28" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="198"/><path transform="matrix(1,0,0,1,689,7825)" id="399" stroke="#696969" ed:tosuperid="398" d="M-13.5,18.5C1.5,18.5,-4.3,-18.5,13.5,-18.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="200"/><path transform="matrix(1,0,0,1,689,7841)" id="401" stroke="#696969" ed:tosuperid="400" d="M-13.5,3C-2,3,3.8,-3,13.5,-3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="200"/><path transform="matrix(1,0,0,1,689,7866)" id="403" stroke="#696969" ed:tosuperid="402" d="M-13.5,-22C2.1,-22,-5.9,22,13.5,22" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="200"/><path transform="matrix(1,0,0,1,689,7881)" id="405" stroke="#696969" ed:tosuperid="404" d="M-13.5,-37.5C4.5,-37.5,-11.4,37.5,13.5,37.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="200"/><path transform="matrix(1,0,0,1,753,189)" id="407" stroke="#696969" ed:tosuperid="406" d="M-13.5,23.3C2.4,23.3,-6.4,-23.3,13.5,-23.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="108"/><path transform="matrix(1,0,0,1,753,214)" id="409" stroke="#696969" ed:tosuperid="408" d="M-13.5,-1.8C-2.3,-1.8,4.4,1.8,13.5,1.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="108"/><path transform="matrix(1,0,0,1,753,229)" id="411" stroke="#696969" ed:tosuperid="410" d="M-13.5,-17.3C1.2,-17.3,-3.7,17.3,13.5,17.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="108"/><path transform="matrix(1,0,0,1,766,506)" id="413" stroke="#696969" ed:tosuperid="412" d="M-13.5,35.8C4.3,35.8,-10.9,-35.8,13.5,-35.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="110"/><path transform="matrix(1,0,0,1,766,531)" id="415" stroke="#696969" ed:tosuperid="414" d="M-13.5,10.8C-0.2,10.8,-0.4,-10.8,13.5,-10.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="110"/><path transform="matrix(1,0,0,1,766,547)" id="419" stroke="#696969" ed:tosuperid="418" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="110"/><path transform="matrix(1,0,0,1,766,572)" id="421" stroke="#696969" ed:tosuperid="420" d="M-13.5,-29.8C3.5,-29.8,-9,29.8,13.5,29.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="110"/><path transform="matrix(1,0,0,1,766,790)" id="423" stroke="#696969" ed:tosuperid="422" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="112"/><path transform="matrix(1,0,0,1,727,854)" id="425" stroke="#696969" ed:tosuperid="424" d="M-13.5,-9.5C-0.5,-9.5,0.2,9.5,13.5,9.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="114"/><path transform="matrix(1,0,0,1,737,998)" id="427" stroke="#696969" ed:tosuperid="426" d="M-13.5,38.8C4.6,38.8,-11.7,-38.8,13.5,-38.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="118"/><path transform="matrix(1,0,0,1,737,1013)" id="429" stroke="#696969" ed:tosuperid="428" d="M-13.5,23.3C2.4,23.3,-6.4,-23.3,13.5,-23.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="118"/><path transform="matrix(1,0,0,1,737,1350)" id="431" stroke="#696969" ed:tosuperid="430" d="M-13.5,117.3C5.4,117.3,-13.5,-117.3,13.5,-117.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,737,1375)" id="433" stroke="#696969" ed:tosuperid="432" d="M-13.5,92.3C5.4,92.3,-13.5,-92.3,13.5,-92.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,737,1466)" id="435" stroke="#696969" ed:tosuperid="434" d="M-13.5,1.8C-2.3,1.8,4.4,-1.8,13.5,-1.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,737,1425)" id="437" stroke="#696969" ed:tosuperid="436" d="M-13.5,42.3C4.9,42.3,-12.4,-42.3,13.5,-42.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,737,1491)" id="439" stroke="#696969" ed:tosuperid="438" d="M-13.5,-23.3C2.4,-23.3,-6.4,23.3,13.5,23.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,737,1525)" id="441" stroke="#696969" ed:tosuperid="440" d="M-13.5,-57.8C5.4,-57.8,-13.5,57.8,13.5,57.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,737,1585)" id="443" stroke="#696969" ed:tosuperid="442" d="M-13.5,-117.3C5.4,-117.3,-13.5,117.3,13.5,117.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,737,1610)" id="445" stroke="#696969" ed:tosuperid="444" d="M-13.5,-142.3C5.4,-142.3,-13.5,142.3,13.5,142.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="120"/><path transform="matrix(1,0,0,1,843,1886)" id="447" stroke="#696969" ed:tosuperid="446" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="128"/><path transform="matrix(1,0,0,1,843,1911)" id="449" stroke="#696969" ed:tosuperid="448" d="M-13.5,-17.3C1.2,-17.3,-3.7,17.3,13.5,17.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="128"/><path transform="matrix(1,0,0,1,830,2042)" id="451" stroke="#696969" ed:tosuperid="450" d="M-13.5,32.8C3.9,32.8,-10,-32.8,13.5,-32.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="130"/><path transform="matrix(1,0,0,1,830,2067)" id="453" stroke="#696969" ed:tosuperid="452" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="130"/><path transform="matrix(1,0,0,1,830,2108)" id="455" stroke="#696969" ed:tosuperid="454" d="M-13.5,-32.8C3.9,-32.8,-10,32.8,13.5,32.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="130"/><path transform="matrix(1,0,0,1,1070,2116)" id="457" stroke="#696969" ed:tosuperid="456" d="M-13.5,25C2.7,25,-7.2,-25,13.5,-25" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="454"/><path transform="matrix(1,0,0,1,1070,2141)" id="459" stroke="#696969" ed:tosuperid="458" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="454"/><path transform="matrix(1,0,0,1,1070,2166)" id="461" stroke="#696969" ed:tosuperid="460" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="454"/><path transform="matrix(1,0,0,1,817,2312)" id="463" stroke="#696969" ed:tosuperid="462" d="M-13.5,71.5C5.4,71.5,-13.5,-71.5,13.5,-71.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="132"/><path transform="matrix(1,0,0,1,817,2337)" id="465" stroke="#696969" ed:tosuperid="464" d="M-13.5,46.5C5.2,46.5,-13.1,-46.5,13.5,-46.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="132"/><path transform="matrix(1,0,0,1,817,2384)" id="469" stroke="#696969" ed:tosuperid="468" d="M-13.5,0C-2.7,0,5.4,0,13.5,0" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="132"/><path transform="matrix(1,0,0,1,817,2409)" id="471" stroke="#696969" ed:tosuperid="470" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="132"/><path transform="matrix(1,0,0,1,741,2617)" id="473" stroke="#696969" ed:tosuperid="472" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="138"/><path transform="matrix(1,0,0,1,729,2708)" id="475" stroke="#696969" ed:tosuperid="474" d="M-13.5,35.8C4.3,35.8,-10.9,-35.8,13.5,-35.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="140"/><path transform="matrix(1,0,0,1,729,2733)" id="477" stroke="#696969" ed:tosuperid="476" d="M-13.5,10.8C-0.2,10.8,-0.4,-10.8,13.5,-10.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="140"/><path transform="matrix(1,0,0,1,729,2758)" id="479" stroke="#696969" ed:tosuperid="478" d="M-13.5,-14.3C0.6,-14.3,-2.2,14.3,13.5,14.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="140"/><path transform="matrix(1,0,0,1,689,2887)" id="481" stroke="#696969" ed:tosuperid="480" d="M-13.5,3C-2,3,3.8,-3,13.5,-3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="142"/><path transform="matrix(1,0,0,1,689,2903)" id="483" stroke="#696969" ed:tosuperid="482" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="142"/><path transform="matrix(1,0,0,1,314,3740)" id="485" stroke="#696969" ed:tosuperid="484" d="M-76.8,457.4C17.6,297,-93.8,-485.9,118,-485.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,618,3118)" id="487" stroke="#696969" ed:tosuperid="486" d="M-13.5,136.1C5.4,136.1,-13.5,-136.1,13.5,-136.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="484"/><path transform="matrix(1,0,0,1,618,3198)" id="489" stroke="#696969" ed:tosuperid="488" d="M-13.5,56.4C5.4,56.4,-13.5,-56.4,13.5,-56.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="484"/><path transform="matrix(1,0,0,1,618,3278)" id="491" stroke="#696969" ed:tosuperid="490" d="M-13.5,-23.4C2.4,-23.4,-6.5,23.4,13.5,23.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="484"/><path transform="matrix(1,0,0,1,618,3303)" id="493" stroke="#696969" ed:tosuperid="492" d="M-13.5,-48.4C5.3,-48.4,-13.2,48.4,13.5,48.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="484"/><path transform="matrix(1,0,0,1,618,3365)" id="495" stroke="#696969" ed:tosuperid="494" d="M-13.5,-110.9C5.4,-110.9,-13.5,110.9,13.5,110.9" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="484"/><path transform="matrix(1,0,0,1,711,2987)" id="497" stroke="#696969" ed:tosuperid="496" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="486"/><path transform="matrix(1,0,0,1,750,3306)" id="501" stroke="#696969" ed:tosuperid="500" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="490"/><path transform="matrix(1,0,0,1,750,3356)" id="505" stroke="#696969" ed:tosuperid="504" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="492"/><path transform="matrix(1,0,0,1,711,3451)" id="507" stroke="#696969" ed:tosuperid="506" d="M-13.5,25C2.7,25,-7.2,-25,13.5,-25" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="494"/><path transform="matrix(1,0,0,1,938,3418)" id="509" stroke="#696969" ed:tosuperid="508" d="M-13.5,7.8C-0.9,7.8,1.2,-7.8,13.5,-7.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="506"/><path transform="matrix(1,0,0,1,938,3443)" id="511" stroke="#696969" ed:tosuperid="510" d="M-13.5,-17.3C1.2,-17.3,-3.7,17.3,13.5,17.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="506"/><path transform="matrix(1,0,0,1,711,3503)" id="513" stroke="#696969" ed:tosuperid="512" d="M-13.5,-26.8C3,-26.8,-7.9,26.8,13.5,26.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="494"/><path transform="matrix(1,0,0,1,711,3518)" id="515" stroke="#696969" ed:tosuperid="514" d="M-13.5,-42.3C4.9,-42.3,-12.4,42.3,13.5,42.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="494"/><path transform="matrix(1,0,0,1,314,3941)" id="517" stroke="#696969" ed:tosuperid="516" d="M-69.8,256.6C7.2,141.2,-59.3,-285.1,118,-285.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="101"/><path transform="matrix(1,0,0,1,517,3646)" id="519" stroke="#696969" ed:tosuperid="518" d="M-13.5,9.4C-0.5,9.4,0.3,-9.4,13.5,-9.4" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="516"/><path transform="matrix(1,0,0,1,517,3662)" id="521" stroke="#696969" ed:tosuperid="520" d="M-13.5,-6.1C-1.3,-6.1,2.1,6.1,13.5,6.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="516"/><path transform="matrix(1,0,0,1,517,3687)" id="523" stroke="#696969" ed:tosuperid="522" d="M-13.5,-31.1C3.7,-31.1,-9.5,31.1,13.5,31.1" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="516"/><path transform="matrix(1,0,0,1,690,3960)" id="525" stroke="#696969" ed:tosuperid="524" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="152"/><path transform="matrix(1,0,0,1,690,3985)" id="527" stroke="#696969" ed:tosuperid="526" d="M-13.5,-29.8C3.5,-29.8,-9,29.8,13.5,29.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="152"/><path transform="matrix(1,0,0,1,748,4228)" id="529" stroke="#696969" ed:tosuperid="528" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="160"/><path transform="matrix(1,0,0,1,748,4492)" id="531" stroke="#696969" ed:tosuperid="530" d="M-13.5,39.3C4.7,39.3,-11.8,-39.3,13.5,-39.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="162"/><path transform="matrix(1,0,0,1,748,4611)" id="533" stroke="#696969" ed:tosuperid="532" d="M-13.5,-79.8C5.4,-79.8,-13.5,79.8,13.5,79.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="162"/><path transform="matrix(1,0,0,1,735,4937)" id="535" stroke="#696969" ed:tosuperid="534" d="M-13.5,57.8C5.4,57.8,-13.5,-57.8,13.5,-57.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="164"/><path transform="matrix(1,0,0,1,735,4952)" id="537" stroke="#696969" ed:tosuperid="536" d="M-13.5,42.3C4.9,42.3,-12.4,-42.3,13.5,-42.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="164"/><path transform="matrix(1,0,0,1,735,4996)" id="539" stroke="#696969" ed:tosuperid="538" d="M-13.5,-1.8C-2.3,-1.8,4.4,1.8,13.5,1.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="164"/><path transform="matrix(1,0,0,1,735,5049)" id="541" stroke="#696969" ed:tosuperid="540" d="M-13.5,-54.8C5.4,-54.8,-13.5,54.8,13.5,54.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="164"/><path transform="matrix(1,0,0,1,984,5067)" id="543" stroke="#696969" ed:tosuperid="542" d="M-13.5,37.5C4.5,37.5,-11.4,-37.5,13.5,-37.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="540"/><path transform="matrix(1,0,0,1,984,5092)" id="545" stroke="#696969" ed:tosuperid="544" d="M-13.5,12.5C0.2,12.5,-1.3,-12.5,13.5,-12.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="540"/><path transform="matrix(1,0,0,1,984,5117)" id="547" stroke="#696969" ed:tosuperid="546" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="540"/><path transform="matrix(1,0,0,1,984,5142)" id="549" stroke="#696969" ed:tosuperid="548" d="M-13.5,-37.5C4.5,-37.5,-11.4,37.5,13.5,37.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="540"/><path transform="matrix(1,0,0,1,748,5285)" id="554" stroke="#696969" ed:tosuperid="553" d="M-13.5,-25C2.7,-25,-7.2,25,13.5,25" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="166"/><path transform="matrix(1,0,0,1,744,5354)" id="556" stroke="#696969" ed:tosuperid="555" d="M-13.5,12.5C0.2,12.5,-1.3,-12.5,13.5,-12.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="168"/><path transform="matrix(1,0,0,1,744,5379)" id="558" stroke="#696969" ed:tosuperid="557" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="168"/><path transform="matrix(1,0,0,1,663,5486)" id="560" stroke="#696969" ed:tosuperid="559" d="M-13.5,-12.5C0.2,-12.5,-1.3,12.5,13.5,12.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="172"/><path transform="matrix(1,0,0,1,663,5665)" id="562" stroke="#696969" ed:tosuperid="561" d="M-13.5,54.8C5.4,54.8,-13.5,-54.8,13.5,-54.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="174"/><path transform="matrix(1,0,0,1,663,5700)" id="564" stroke="#696969" ed:tosuperid="563" d="M-13.5,20.3C1.8,20.3,-5.1,-20.3,13.5,-20.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="174"/><path transform="matrix(1,0,0,1,663,5765)" id="566" stroke="#696969" ed:tosuperid="565" d="M-13.5,-45.3C5.1,-45.3,-12.9,45.3,13.5,45.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="174"/><path transform="matrix(1,0,0,1,663,5790)" id="568" stroke="#696969" ed:tosuperid="567" d="M-13.5,-70.3C5.4,-70.3,-13.5,70.3,13.5,70.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="174"/><path transform="matrix(1,0,0,1,663,6068)" id="570" stroke="#696969" ed:tosuperid="569" d="M-13.5,126.8C5.4,126.8,-13.5,-126.8,13.5,-126.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="176"/><path transform="matrix(1,0,0,1,663,6093)" id="572" stroke="#696969" ed:tosuperid="571" d="M-13.5,101.8C5.4,101.8,-13.5,-101.8,13.5,-101.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="176"/><path transform="matrix(1,0,0,1,663,6118)" id="574" stroke="#696969" ed:tosuperid="573" d="M-13.5,76.8C5.4,76.8,-13.5,-76.8,13.5,-76.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="176"/><path transform="matrix(1,0,0,1,663,6143)" id="576" stroke="#696969" ed:tosuperid="575" d="M-13.5,51.8C5.4,51.8,-13.5,-51.8,13.5,-51.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="176"/><path transform="matrix(1,0,0,1,663,6178)" id="578" stroke="#696969" ed:tosuperid="577" d="M-13.5,17.3C1.2,17.3,-3.7,-17.3,13.5,-17.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="176"/><path transform="matrix(1,0,0,1,663,6228)" id="580" stroke="#696969" ed:tosuperid="579" d="M-13.5,-32.8C3.9,-32.8,-10,32.8,13.5,32.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="176"/><path transform="matrix(1,0,0,1,663,6243)" id="582" stroke="#696969" ed:tosuperid="581" d="M-13.5,-48.3C5.3,-48.3,-13.2,48.3,13.5,48.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="176"/><path transform="matrix(1,0,0,1,663,6531)" id="584" stroke="#696969" ed:tosuperid="583" d="M-13.5,-17.3C1.2,-17.3,-3.7,17.3,13.5,17.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="178"/><path transform="matrix(1,0,0,1,756,6660)" id="588" stroke="#696969" ed:tosuperid="587" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="182"/><path transform="matrix(1,0,0,1,756,6685)" id="590" stroke="#696969" ed:tosuperid="589" d="M-13.5,-9.5C-0.5,-9.5,0.2,9.5,13.5,9.5" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="182"/><path transform="matrix(1,0,0,1,769,6976)" id="592" stroke="#696969" ed:tosuperid="591" d="M-13.5,20.3C1.8,20.3,-5.1,-20.3,13.5,-20.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="186"/><path transform="matrix(1,0,0,1,769,7001)" id="594" stroke="#696969" ed:tosuperid="593" d="M-13.5,-4.8C-1.6,-4.8,2.8,4.8,13.5,4.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="186"/><path transform="matrix(1,0,0,1,769,7036)" id="596" stroke="#696969" ed:tosuperid="595" d="M-13.5,-39.3C4.7,-39.3,-11.8,39.3,13.5,39.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="186"/><path transform="matrix(1,0,0,1,769,7051)" id="598" stroke="#696969" ed:tosuperid="597" d="M-13.5,-54.8C5.4,-54.8,-13.5,54.8,13.5,54.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="186"/><path transform="matrix(1,0,0,1,743,7189)" id="600" stroke="#696969" ed:tosuperid="599" d="M-13.5,32.8C3.9,32.8,-10,-32.8,13.5,-32.8" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="188"/><path transform="matrix(1,0,0,1,743,7264)" id="602" stroke="#696969" ed:tosuperid="601" d="M-13.5,-42.3C4.9,-42.3,-12.4,42.3,13.5,42.3" stroke-linejoin="round" fill="none" stroke-linecap="round" ed:parentid="188"/><g transform="matrix(1,0,0,1,23,4198)" id="101" ed:height="57" ed:width="346" ed:topictype="mainidea" ed:layout="rightmap"><path stroke="#435fbc" d="M4,0L342,0C344.7,0,346,1.3,346,4L346,53C346,55.7,344.7,57,342,57L4,57C1.3,57,0,55.7,0,53L0,4C0,1.3,1.3,0,4,0z" fill="#435fbc" stroke-linejoin="round" stroke-width="3"/><text class="st1"><tspan style="white-space:pre" x="21" y="34.5">《你不知道的JavaScript（上卷）》</tspan></text></g><g transform="matrix(1,0,0,1,432,459)" id="102" ed:height="37" ed:width="188" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L184,0C186.7,0,188,1.3,188,4L188,33C188,35.7,186.7,37,184,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第一章 作用域是什么</tspan></text></g><g transform="matrix(1,0,0,1,432,1306)" id="104" ed:height="37" ed:width="172" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L168,0C170.7,0,172,1.3,172,4L172,33C172,35.7,170.7,37,168,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第二章 词法作用域</tspan></text></g><g transform="matrix(1,0,0,1,432,2147)" id="106" ed:height="37" ed:width="252" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L248,0C250.7,0,252,1.3,252,4L252,33C252,35.7,250.7,37,248,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第三章 函数作用域和块作用域</tspan></text></g><g transform="matrix(1,0,0,1,647,188)" id="108" ed:height="24.5" ed:width="92" ed:parentid="102"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">1.1.编译原理</tspan></text></g><g transform="matrix(1,0,0,1,647,518)" id="110" ed:height="24.5" ed:width="105" ed:parentid="102"><path stroke="#696969" d="M0,24.5L105,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">1.2.理解作用域</tspan></text></g><g transform="matrix(1,0,0,1,647,761)" id="112" ed:height="24.5" ed:width="105" ed:parentid="102"><path stroke="#696969" d="M0,24.5L105,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">1.3.作用域嵌套</tspan></text></g><g transform="matrix(1,0,0,1,647,820)" id="114" ed:height="24.5" ed:width="66" ed:parentid="102"><path stroke="#696969" d="M0,24.5L66,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">1.4.异常</tspan></text></g><g transform="matrix(1,0,0,1,631,1012)" id="118" ed:height="24.5" ed:width="92" ed:parentid="104"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">2.1.词法阶段</tspan></text></g><g transform="matrix(1,0,0,1,631,1443)" id="120" ed:height="24.5" ed:width="92" ed:parentid="104"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">2.2.欺骗词法</tspan></text></g><g transform="matrix(1,0,0,1,711,1795)" id="126" ed:height="24.5" ed:width="131" ed:parentid="106"><path stroke="#696969" d="M0,24.5L131,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">3.1.函数中的作用域</tspan></text></g><g transform="matrix(1,0,0,1,711,1870)" id="128" ed:height="24.5" ed:width="118" ed:parentid="106"><path stroke="#696969" d="M0,24.5L118,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">3.2.隐藏内部实现</tspan></text></g><g transform="matrix(1,0,0,1,711,2051)" id="130" ed:height="24.5" ed:width="105" ed:parentid="106"><path stroke="#696969" d="M0,24.5L105,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">3.3.函数作用域</tspan></text></g><g transform="matrix(1,0,0,1,711,2359)" id="132" ed:height="24.5" ed:width="92" ed:parentid="106"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">3.4.块作用域</tspan></text></g><g transform="matrix(1,0,0,1,432,2728)" id="136" ed:height="37" ed:width="124" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L120,0C122.7,0,124,1.3,124,4L124,33C124,35.7,122.7,37,120,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第四章 提升</tspan></text></g><g transform="matrix(1,0,0,1,583,2588)" id="138" ed:height="24.5" ed:width="144" ed:parentid="136"><path stroke="#696969" d="M0,24.5L144,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">4.1.先有鸡还是先有蛋</tspan></text></g><g transform="matrix(1,0,0,1,583,2719)" id="140" ed:height="24.5" ed:width="132" ed:parentid="136"><path stroke="#696969" d="M0,24.5L132,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">4.2.编译器再度来袭</tspan></text></g><g transform="matrix(1,0,0,1,583,2866)" id="142" ed:height="24.5" ed:width="92" ed:parentid="136"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">4.3.函数优先</tspan></text></g><g transform="matrix(1,0,0,1,432,21)" id="144" ed:height="37" ed:width="204" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L200,0C202.7,0,204,1.3,204,4L204,33C204,35.7,202.7,37,200,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第一部分 作用域和闭包</tspan></text></g><g transform="matrix(1,0,0,1,432,3751)" id="146" ed:height="37" ed:width="215" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L211,0C213.7,0,215,1.3,215,4L215,33C215,35.7,213.7,37,211,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第二部分 this和对象原型</tspan></text></g><g transform="matrix(1,0,0,1,432,3940)" id="148" ed:height="37" ed:width="151" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L147,0C149.7,0,151,1.3,151,4L151,33C151,35.7,149.7,37,147,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第一章 关于this</tspan></text></g><g transform="matrix(1,0,0,1,610,3831)" id="150" ed:height="24.5" ed:width="127" ed:parentid="148"><path stroke="#696969" d="M0,24.5L127,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">1.1.为什么要用this</tspan></text></g><g transform="matrix(1,0,0,1,610,3931)" id="152" ed:height="24.5" ed:width="66" ed:parentid="148"><path stroke="#696969" d="M0,24.5L66,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">1.2.误解</tspan></text></g><g transform="matrix(1,0,0,1,610,4046)" id="154" ed:height="24.5" ed:width="127" ed:parentid="148"><path stroke="#696969" d="M0,24.5L127,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">1.3.this到底是什么</tspan></text></g><g transform="matrix(1,0,0,1,432,4741)" id="158" ed:height="37" ed:width="183" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L179,0C181.7,0,183,1.3,183,4L183,33C183,35.7,181.7,37,179,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第二章 this全面解析</tspan></text></g><g transform="matrix(1,0,0,1,642,4179)" id="160" ed:height="24.5" ed:width="92" ed:parentid="158"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">2.1.调用位置</tspan></text></g><g transform="matrix(1,0,0,1,642,4507)" id="162" ed:height="24.5" ed:width="92" ed:parentid="158"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">2.2.绑定规则</tspan></text></g><g transform="matrix(1,0,0,1,642,4970)" id="164" ed:height="24.5" ed:width="79" ed:parentid="158"><path stroke="#696969" d="M0,24.5L79,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">2.3.优先级</tspan></text></g><g transform="matrix(1,0,0,1,642,5236)" id="166" ed:height="24.5" ed:width="92" ed:parentid="158"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">2.4.绑定例外</tspan></text></g><g transform="matrix(1,0,0,1,642,5342)" id="168" ed:height="24.5" ed:width="88" ed:parentid="158"><path stroke="#696969" d="M0,24.5L88,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">2.5.this词法</tspan></text></g><g transform="matrix(1,0,0,1,432,5968)" id="170" ed:height="37" ed:width="124" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L120,0C122.7,0,124,1.3,124,4L124,33C124,35.7,122.7,37,120,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第三章 对象</tspan></text></g><g transform="matrix(1,0,0,1,583,5449)" id="172" ed:height="24.5" ed:width="66" ed:parentid="170"><path stroke="#696969" d="M0,24.5L66,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">3.1.语法</tspan></text></g><g transform="matrix(1,0,0,1,583,5696)" id="174" ed:height="24.5" ed:width="66" ed:parentid="170"><path stroke="#696969" d="M0,24.5L66,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">3.2.类型</tspan></text></g><g transform="matrix(1,0,0,1,583,6171)" id="176" ed:height="24.5" ed:width="66" ed:parentid="170"><path stroke="#696969" d="M0,24.5L66,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">3.3.内容</tspan></text></g><g transform="matrix(1,0,0,1,583,6490)" id="178" ed:height="24.5" ed:width="66" ed:parentid="170"><path stroke="#696969" d="M0,24.5L66,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">3.4.遍历</tspan></text></g><g transform="matrix(1,0,0,1,432,6925)" id="180" ed:height="37" ed:width="204" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L200,0C202.7,0,204,1.3,204,4L204,33C204,35.7,202.7,37,200,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第四章 混合对象“类”</tspan></text></g><g transform="matrix(1,0,0,1,663,6651)" id="182" ed:height="24.5" ed:width="79" ed:parentid="180"><path stroke="#696969" d="M0,24.5L79,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">4.1.类理论</tspan></text></g><g transform="matrix(1,0,0,1,663,6791)" id="184" ed:height="24.5" ed:width="92" ed:parentid="180"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">4.2.类的机制</tspan></text></g><g transform="matrix(1,0,0,1,663,6972)" id="186" ed:height="24.5" ed:width="92" ed:parentid="180"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">4.3.类的继承</tspan></text></g><g transform="matrix(1,0,0,1,663,7197)" id="188" ed:height="24.5" ed:width="66" ed:parentid="180"><path stroke="#696969" d="M0,24.5L66,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">4.4.混入</tspan></text></g><g transform="matrix(1,0,0,1,432,7610)" id="192" ed:height="37" ed:width="124" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L120,0C122.7,0,124,1.3,124,4L124,33C124,35.7,122.7,37,120,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第五章 原型</tspan></text></g><g transform="matrix(1,0,0,1,583,7380)" id="194" ed:height="24.5" ed:width="117" ed:parentid="192"><path stroke="#696969" d="M0,24.5L117,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">5.1.[[Prototype]]</tspan></text></g><g transform="matrix(1,0,0,1,583,7511)" id="196" ed:height="24.5" ed:width="79" ed:parentid="192"><path stroke="#696969" d="M0,24.5L79,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">5.2.“类”</tspan></text></g><g transform="matrix(1,0,0,1,583,7657)" id="198" ed:height="24.5" ed:width="66" ed:parentid="192"><path stroke="#696969" d="M0,24.5L66,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">5.3.技术</tspan></text></g><g transform="matrix(1,0,0,1,583,7819)" id="200" ed:height="24.5" ed:width="92" ed:parentid="192"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">5.4.对象关联</tspan></text></g><g transform="matrix(1,0,0,1,432,8173)" id="204" ed:height="37" ed:width="156" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L152,0C154.7,0,156,1.3,156,4L156,33C156,35.7,154.7,37,152,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第六章 行为委托</tspan></text></g><g transform="matrix(1,0,0,1,615,7983)" id="206" ed:height="24.5" ed:width="131" ed:parentid="204"><path stroke="#696969" d="M0,24.5L131,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">6.1.面向委托的设计</tspan></text></g><g transform="matrix(1,0,0,1,615,8079)" id="208" ed:height="24.5" ed:width="92" ed:parentid="204"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">6.2.类与对象</tspan></text></g><g transform="matrix(1,0,0,1,615,8145)" id="210" ed:height="24.5" ed:width="118" ed:parentid="204"><path stroke="#696969" d="M0,24.5L118,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">6.3.更简洁的设计</tspan></text></g><g transform="matrix(1,0,0,1,615,8216)" id="212" ed:height="24.5" ed:width="105" ed:parentid="204"><path stroke="#696969" d="M0,24.5L105,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">6.4.更好的语法</tspan></text></g><g transform="matrix(1,0,0,1,615,8347)" id="214" ed:height="24.5" ed:width="66" ed:parentid="204"><path stroke="#696969" d="M0,24.5L66,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">6.5.内省</tspan></text></g><g transform="matrix(1,0,0,1,766,91)" id="216" ed:height="24.5" ed:width="418" ed:parentid="108"><path stroke="#696969" d="M0,24.5L418,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">编译三个步骤：1、分词/词法分析；2、解析/语法分析；3、代码生成</tspan></text></g><g transform="matrix(1,0,0,1,766,253)" id="218" ed:height="24.5" ed:width="340" ed:parentid="108"><path stroke="#696969" d="M0,24.5L340,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">JavaScript大部分情况下编译发生在代码执行前的几微秒</tspan></text></g><g transform="matrix(1,0,0,1,766,284)" id="220" ed:height="24.5" ed:width="447" ed:parentid="108"><path stroke="#696969" d="M0,24.5L447,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">JavaScript用尽各种办法去保证性能最佳，比如JIT可以延迟编译设置重编译</tspan></text></g><g transform="matrix(1,0,0,1,779,315)" id="222" ed:height="24.5" ed:width="301" ed:parentid="110"><path stroke="#696969" d="M0,24.5L301,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">引擎：负责整个JavaScript程序的编译及执行过程</tspan></text></g><g transform="matrix(1,0,0,1,779,346)" id="224" ed:height="24.5" ed:width="213" ed:parentid="110"><path stroke="#696969" d="M0,24.5L213,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">编译器负责语法分析及代码生成等</tspan></text></g><g transform="matrix(1,0,0,1,779,377)" id="226" ed:height="43.5" ed:width="514" ed:parentid="110"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">作用域：负责收集并维护由所有声明的标识符（变量） 组成的一系列查询， 并实施一</tspan><tspan style="white-space:pre" x="8" y="35.1">套非常严格的规则， 确定当前执行的代码对这些标识符的访问权限</tspan></text></g><g transform="matrix(1,0,0,1,779,608)" id="228" ed:height="24.5" ed:width="211" ed:parentid="110"><path stroke="#696969" d="M0,24.5L211,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">LHS查询，例如a=2，对变量赋值</tspan></text></g><g transform="matrix(1,0,0,1,779,639)" id="230" ed:height="24.5" ed:width="284" ed:parentid="110"><path stroke="#696969" d="M0,24.5L284,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">RHS查询，例如console.log(a)，获取变量的值</tspan></text></g><g transform="matrix(1,0,0,1,779,670)" id="232" ed:height="24.5" ed:width="381" ed:parentid="110"><path stroke="#696969" d="M0,24.5L381,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">加强理解，LHS赋值操作的目标是谁，RHS谁是赋值操作的源头</tspan></text></g><g transform="matrix(1,0,0,1,779,701)" id="234" ed:height="43.5" ed:width="514" ed:parentid="110"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">在严格模式中LHS查询失败时，并不会创建并返回一个全局变量，引擎会抛出同RHS查</tspan><tspan style="white-space:pre" x="8" y="35.1">询失败时类似的ReferenceError异常</tspan></text></g><g transform="matrix(1,0,0,1,750,997)" id="238" ed:height="43.5" ed:width="514" ed:parentid="118"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">词法作用域：定义在词法阶段的作用域，动态作用域：作用域气泡，严格包含的，没有</tspan><tspan style="white-space:pre" x="8" y="35.1">任何函数可以部分地出现在2个父级函数中</tspan></text></g><g transform="matrix(1,0,0,1,750,1047)" id="240" ed:height="43.5" ed:width="514" ed:parentid="118"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数被声明时所</tspan><tspan style="white-space:pre" x="8" y="35.1">处的位置决定</tspan></text></g><g transform="matrix(1,0,0,1,750,1159)" id="244" ed:height="24.5" ed:width="81" ed:parentid="120"><path stroke="#696969" d="M0,24.5L81,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">eval和with</tspan></text></g><g transform="matrix(1,0,0,1,750,1290)" id="246" ed:height="43.5" ed:width="514" ed:parentid="120"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">eval执行字符串，使其可以在运行期修改书写期的词法作用域，类似的还有setTimeout</tspan><tspan style="white-space:pre" x="8" y="35.1">和SetInterval第一个参数传入字符串的情况</tspan></text></g><g transform="matrix(1,0,0,1,750,1390)" id="248" ed:height="24.5" ed:width="466" ed:parentid="120"><path stroke="#696969" d="M0,24.5L466,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">在严格模式中，eval()在运行时有其自己的词法作用域，无法修改所在的作用域</tspan></text></g><g transform="matrix(1,0,0,1,750,1590)" id="250" ed:height="43.5" ed:width="514" ed:parentid="120"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">with声明实际上是根据你传递给它的对象凭空创建了一个全新的词法作用域，这两个机</tspan><tspan style="white-space:pre" x="8" y="35.1">制（eval和with）的副作用是引擎无法在编译中对作用域查找进行优化</tspan></text></g><g transform="matrix(1,0,0,1,750,1097)" id="252" ed:height="24.5" ed:width="460" ed:parentid="118"><path stroke="#696969" d="M0,24.5L460,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">词法作用域是在写代码或者说定义时确定的，而动态作用域是在运行时确定的</tspan></text></g><g transform="matrix(1,0,0,1,750,1128)" id="254" ed:height="24.5" ed:width="408" ed:parentid="118"><path stroke="#696969" d="M0,24.5L408,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">词法作用域关注函数在何处声明，而动态作用域关注函数从何处调用</tspan></text></g><g transform="matrix(1,0,0,1,869,1785)" id="256" ed:height="43.5" ed:width="514" ed:parentid="126"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">函数作用域的含义是指属于这个函数的全部变量都可以在整个函数的范围内使用及复用</tspan><tspan style="white-space:pre" x="8" y="35.1">（包括嵌套的作用域）</tspan></text></g><g transform="matrix(1,0,0,1,843,1935)" id="258" ed:height="43.5" ed:width="514" ed:parentid="130"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">区分函数声明和函数表达式最简单方法看function关键字出现在声明中的位置（不仅仅</tspan><tspan style="white-space:pre" x="8" y="35.1">是一行代码， 而是整个声明中的位置）</tspan></text></g><g transform="matrix(1,0,0,1,830,2297)" id="260" ed:height="24.5" ed:width="421" ed:parentid="132"><path stroke="#696969" d="M0,24.5L421,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">用with从对象中创建出的作用域仅在with声明中而非外部作用域中有效</tspan></text></g><g transform="matrix(1,0,0,1,830,2328)" id="262" ed:height="24.5" ed:width="481" ed:parentid="132"><path stroke="#696969" d="M0,24.5L481,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效</tspan></text></g><g transform="matrix(1,0,0,1,830,2440)" id="264" ed:height="24.5" ed:width="458" ed:parentid="132"><path stroke="#696969" d="M0,24.5L458,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">Tracer，Google维护的项目，正是用来将ES6代码转换成兼容ES6之前的环境</tspan></text></g><g transform="matrix(1,0,0,1,830,2471)" id="266" ed:height="24.5" ed:width="442" ed:parentid="132"><path stroke="#696969" d="M0,24.5L442,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">IIFE和try/catch都可以用来实现let块作用域，但try/catch性能的确很糟糕</tspan></text></g><g transform="matrix(1,0,0,1,830,2502)" id="268" ed:height="43.5" ed:width="514" ed:parentid="132"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">var a=2；JavaScript实际上会将其看成两个声明。var a；和a=2；第一个定义声明是</tspan><tspan style="white-space:pre" x="8" y="35.1">在编译阶段进行的，第二个赋值会留在原地等待执行阶段</tspan></text></g><g transform="matrix(1,0,0,1,742,2779)" id="272" ed:height="24.5" ed:width="369" ed:parentid="140"><path stroke="#696969" d="M0,24.5L369,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">只有声明本身会被提升，但函数会首先被提升，然后才是变量</tspan></text></g><g transform="matrix(1,0,0,1,742,2810)" id="274" ed:height="24.5" ed:width="245" ed:parentid="140"><path stroke="#696969" d="M0,24.5L245,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">函数声明后面同名的var声明会被忽略掉</tspan></text></g><g transform="matrix(1,0,0,1,750,2998)" id="276" ed:height="43.5" ed:width="514" ed:parentid="488"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">函数在定义时的词法作用域以外的地方被调用，闭包使得函数可以继续访问定义时的词</tspan><tspan style="white-space:pre" x="8" y="35.1">法作用域</tspan></text></g><g transform="matrix(1,0,0,1,750,3048)" id="278" ed:height="81.5" ed:width="514" ed:parentid="488"><path stroke="#696969" d="M0,81.5L514,81.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">如果将（访问它们各自词法作用域的）函数当作第一级的值类型并到处传递，你就会看</tspan><tspan style="white-space:pre" x="8" y="35.1">到闭包在这些函数中的应用，在定时器，事件监听器，Ajax请求，跨窗口通信，Web </tspan><tspan style="white-space:pre" x="8" y="54.1">workers或者任何其他的异步（或者同步）任务中，只要有用了回调函数，实际上就是</tspan><tspan style="white-space:pre" x="8" y="73.1">在使用闭包</tspan></text></g><g transform="matrix(1,0,0,1,750,3136)" id="280" ed:height="24.5" ed:width="317" ed:parentid="488"><path stroke="#696969" d="M0,24.5L317,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">循环和闭包：延迟函数的回调会在循环结束时才执行</tspan></text></g><g transform="matrix(1,0,0,1,750,3167)" id="282" ed:height="24.5" ed:width="421" ed:parentid="488"><path stroke="#696969" d="M0,24.5L421,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">for/let行为指出变量在循环过程中不止被声明一次，每次迭代都会声明</tspan></text></g><g transform="matrix(1,0,0,1,750,3198)" id="284" ed:height="62.5" ed:width="514" ed:parentid="488"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">模块模式需具备的两个必要条件：1、必须有外部的封闭函数，该函数必须至少被调用</tspan><tspan style="white-space:pre" x="8" y="35.1">一次；2、封闭函数必须返回至少一个内部函数，这样内部函数才能在私有作用域中形</tspan><tspan style="white-space:pre" x="8" y="54.1">成闭包，并且可以访问或修改私有的状态</tspan></text></g><g transform="matrix(1,0,0,1,764,3821)" id="286" ed:height="43.5" ed:width="514" ed:parentid="150"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">箭头函数：1、容易让人混淆了this绑定规则和词法作用域规则，2、另外箭头函数是匿</tspan><tspan style="white-space:pre" x="8" y="35.1">名而非具名的</tspan></text></g><g transform="matrix(1,0,0,1,703,3871)" id="288" ed:height="43.5" ed:width="514" ed:parentid="152"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">this误解：1、指向自身，误理解成指向函数自身；2、指向函数作用域，误理解成指向</tspan><tspan style="white-space:pre" x="8" y="35.1">函数的作用域</tspan></text></g><g transform="matrix(1,0,0,1,764,4021)" id="290" ed:height="43.5" ed:width="514" ed:parentid="154"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">this是在运行时进行绑定的，并不是在编写时绑定。它的上下文取决于函数调用时的各</tspan><tspan style="white-space:pre" x="8" y="35.1">种条件</tspan></text></g><g transform="matrix(1,0,0,1,764,4071)" id="292" ed:height="24.5" ed:width="391" ed:parentid="154"><path stroke="#696969" d="M0,24.5L391,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">this的绑定和函数声明的位置没有关系，只取决于函数的调用方式</tspan></text></g><g transform="matrix(1,0,0,1,761,4129)" id="294" ed:height="24.5" ed:width="395" ed:parentid="160"><path stroke="#696969" d="M0,24.5L395,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">调用位置：寻找函数在代码中被调用的地方（而不是声明的位置）</tspan></text></g><g transform="matrix(1,0,0,1,761,4160)" id="296" ed:height="43.5" ed:width="514" ed:parentid="160"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">调用栈：为了到达当前执行位置所调用的所有函数，在JavaScript调试器中可以很方便</tspan><tspan style="white-space:pre" x="8" y="35.1">查看</tspan></text></g><g transform="matrix(1,0,0,1,761,4260)" id="298" ed:height="24.5" ed:width="264" ed:parentid="162"><path stroke="#696969" d="M0,24.5L264,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">默认绑定、隐式绑定、显式绑定、new绑定</tspan></text></g><g transform="matrix(1,0,0,1,761,4291)" id="300" ed:height="43.5" ed:width="514" ed:parentid="162"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">默认绑定：常见的独立函数调用，无法应用其他规则时默认规则。但使用严格模式</tspan><tspan style="white-space:pre" x="8" y="35.1">（strict mode）时，不能将全局对象用于默认绑定，因此this会绑定到undefined</tspan></text></g><g transform="matrix(1,0,0,1,761,4341)" id="302" ed:height="43.5" ed:width="514" ed:parentid="162"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">隐式绑定：需要考虑调用位置是否有上下文对象，或者说是否被某个对象拥有或包含。</tspan><tspan style="white-space:pre" x="8" y="35.1">当函数引用有上下文对象时，该规则会把函数调用中的this绑定到这个上下文对象</tspan></text></g><g transform="matrix(1,0,0,1,761,4460)" id="304" ed:height="62.5" ed:width="514" ed:parentid="162"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">隐式丢失：1、var bar = obj.foo； bar()；//会应用默认绑定；2、</tspan><tspan style="white-space:pre" x="8" y="35.1">doFoo(obj.foo)；//函数作为参数传递，隐式赋值；3、setTimeout(obj.foo, 100)；//</tspan><tspan style="white-space:pre" x="8" y="54.1">函数传入语言内置函数，同样</tspan></text></g><g transform="matrix(1,0,0,1,761,4529)" id="306" ed:height="62.5" ed:width="514" ed:parentid="162"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">显式绑定：想在某个对象上强调调用函数，可以使用函数call和apply方法。</tspan><tspan style="white-space:pre" x="8" y="35.1">foo.call(obj)调用foo时强制把this绑定到obj上，如果传入原始值，会转换成它的对象</tspan><tspan style="white-space:pre" x="8" y="54.1">形式，如new String(...)，new Boolean(...)通常称装箱</tspan></text></g><g transform="matrix(1,0,0,1,761,4598)" id="308" ed:height="43.5" ed:width="514" ed:parentid="162"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">也会出现绑定丢失问题，硬绑定：不可能再修改它的this。bind(...)会返回一个硬编码的</tspan><tspan style="white-space:pre" x="8" y="35.1">新函数</tspan></text></g><g transform="matrix(1,0,0,1,761,4698)" id="310" ed:height="81.5" ed:width="514" ed:parentid="162"><path stroke="#696969" d="M0,81.5L514,81.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">new 绑定：JavaScript中new的机制实际上和面向类的语言完全不同，使用new来调用</tspan><tspan style="white-space:pre" x="8" y="35.1">函数时，通常会自动执行下面的操作：1、创建（或者说构造）一个全新的对象；2、</tspan><tspan style="white-space:pre" x="8" y="54.1">这个新对象会被执行[[prototype]]连接；3、新对象会绑定到函数调用的this；4、如果</tspan><tspan style="white-space:pre" x="8" y="73.1">函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象</tspan></text></g><g transform="matrix(1,0,0,1,748,4786)" id="312" ed:height="43.5" ed:width="514" ed:parentid="164"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">四条规则优先级：1、显式绑定比隐式绑定更高；2、new绑定比隐式绑定更高；3、</tspan><tspan style="white-space:pre" x="8" y="35.1">new修改了硬绑定调用中的this</tspan></text></g><g transform="matrix(1,0,0,1,761,5186)" id="314" ed:height="43.5" ed:width="514" ed:parentid="166"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">如果把null或者undefined作为this的绑定对象传入call，apply或者bind会被忽略，实</tspan><tspan style="white-space:pre" x="8" y="35.1">际应用的是默认绑定规则</tspan></text></g><g transform="matrix(1,0,0,1,761,5236)" id="316" ed:height="24.5" ed:width="446" ed:parentid="166"><path stroke="#696969" d="M0,24.5L446,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">Object.create(null)和{}很像，但不会创建Object.prototype，所以比{}更空</tspan></text></g><g transform="matrix(1,0,0,1,676,5424)" id="318" ed:height="24.5" ed:width="403" ed:parentid="172"><path stroke="#696969" d="M0,24.5L403,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">对象可以两种形式定义：构造形式和声明形式，即new Object()和{}</tspan></text></g><g transform="matrix(1,0,0,1,676,5505)" id="320" ed:height="43.5" ed:width="514" ed:parentid="174"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">JavaScript共六种主要类型（语言类型），string、number、boolean、null、</tspan><tspan style="white-space:pre" x="8" y="35.1">undefined、object，前五种是基本类型</tspan></text></g><g transform="matrix(1,0,0,1,676,5555)" id="322" ed:height="24.5" ed:width="262" ed:parentid="174"><path stroke="#696969" d="M0,24.5L262,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">JavaScript中万物皆是对象，显然是错误的</tspan></text></g><g transform="matrix(1,0,0,1,676,5686)" id="324" ed:height="43.5" ed:width="514" ed:parentid="174"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">在JavaScript中二进制前三位都为0的会被判断为object类型，null的二进制全部是0，</tspan><tspan style="white-space:pre" x="8" y="35.1">故被判定为Object类型</tspan></text></g><g transform="matrix(1,0,0,1,676,5736)" id="328" ed:height="24.5" ed:width="456" ed:parentid="174"><path stroke="#696969" d="M0,24.5L456,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">null和undefined没有对应的构造形式，只有文字形式，而Date只有构造形式</tspan></text></g><g transform="matrix(1,0,0,1,676,5867)" id="330" ed:height="43.5" ed:width="514" ed:parentid="174"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">数组和普通的对象都根据其对应的行为和用途进行了优化，所以最好只用对象来存储</tspan><tspan style="white-space:pre" x="8" y="35.1">键/值对，只用数组来存储数值下标/值对</tspan></text></g><g transform="matrix(1,0,0,1,676,6167)" id="334" ed:height="43.5" ed:width="514" ed:parentid="176"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">对象属性描述符：value（值）、writable（是否可修改）、enumrable（是否可枚</tspan><tspan style="white-space:pre" x="8" y="35.1">举）、configurable（是否可配置）、get、set</tspan></text></g><g transform="matrix(1,0,0,1,676,6298)" id="336" ed:height="81.5" ed:width="514" ed:parentid="176"><path stroke="#696969" d="M0,81.5L514,81.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">不变性：1、对象常量 writable: false和configurable: false；2、禁止扩展：</tspan><tspan style="white-space:pre" x="8" y="35.1">Object.preventExtensions(obj)；3、密封：Object.seal在现有对象上调用</tspan><tspan style="white-space:pre" x="8" y="54.1">Object.preventExtensions，并把现有属性标记configuable: false；4、冻结</tspan><tspan style="white-space:pre" x="8" y="73.1">Object.freeze在现有对象上调用Object.seal并把数据访问属性标记writable: false</tspan></text></g><g transform="matrix(1,0,0,1,676,6386)" id="338" ed:height="62.5" ed:width="514" ed:parentid="176"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">存在性：in操作符会检查属性是否在对象及其[[prototype]]原型链中，</tspan><tspan style="white-space:pre" x="8" y="35.1">hasOwnProperty只会检查属性是否在对象中，不会检查[[prototype]]链，object.keys</tspan><tspan style="white-space:pre" x="8" y="54.1">和object.getOwnPropertyNames都只会查找对象直接包含的属性</tspan></text></g><g transform="matrix(1,0,0,1,676,6455)" id="340" ed:height="43.5" ed:width="514" ed:parentid="178"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">遍历：forEach遍历并忽略回调函数返回值，无法break跳出；every一直运行到回调函</tspan><tspan style="white-space:pre" x="8" y="35.1">数返回false，some一直运行到回调函数返回true；for...of遍历值而不是属性</tspan></text></g><g transform="matrix(1,0,0,1,769,6701)" id="342" ed:height="43.5" ed:width="514" ed:parentid="182"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">面向类的设计模式：实例化（instantiation） 继承（inheritance） （相对）多态</tspan><tspan style="white-space:pre" x="8" y="35.1">（polymophism）</tspan></text></g><g transform="matrix(1,0,0,1,782,6751)" id="344" ed:height="24.5" ed:width="491" ed:parentid="184"><path stroke="#696969" d="M0,24.5L491,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">类的机制：许多面向类的语言中，“标准库”会提供stack类，是一种"栈"数据结构</tspan></text></g><g transform="matrix(1,0,0,1,782,6782)" id="346" ed:height="43.5" ed:width="514" ed:parentid="184"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">Stack类内部会有一些变量来存储数据，同时提供一些公有的可访问行为（方法），从</tspan><tspan style="white-space:pre" x="8" y="35.1">而让你的代码可以和（隐藏的）数据进行交互（比如添加、删除数据）</tspan></text></g><g transform="matrix(1,0,0,1,782,6832)" id="348" ed:height="24.5" ed:width="201" ed:parentid="184"><path stroke="#696969" d="M0,24.5L201,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">蓝图---建筑，类比于 类---实例</tspan></text></g><g transform="matrix(1,0,0,1,782,6863)" id="350" ed:height="43.5" ed:width="514" ed:parentid="186"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">对于真正的类来说，构造函数是属于类的，而JavaScript是相反的，实际上类是属于构</tspan><tspan style="white-space:pre" x="8" y="35.1">造函数的，类的继承其实就是复制</tspan></text></g><g transform="matrix(1,0,0,1,756,7163)" id="352" ed:height="43.5" ed:width="514" ed:parentid="188"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">显式混入mixin，无法（用标准、可靠的方法）真正的复制，只能复制对共享函数对象</tspan><tspan style="white-space:pre" x="8" y="35.1">的引用</tspan></text></g><g transform="matrix(1,0,0,1,756,7213)" id="354" ed:height="24.5" ed:width="203" ed:parentid="188"><path stroke="#696969" d="M0,24.5L203,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">隐式混入call，通过this绑定实现</tspan></text></g><g transform="matrix(1,0,0,1,773,7952)" id="356" ed:height="24.5" ed:width="412" ed:parentid="206"><path stroke="#696969" d="M0,24.5L412,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">回顾：[Prototype]机制就是指对象中的一个内部链接引用另一个对象</tspan></text></g><g transform="matrix(1,0,0,1,773,7983)" id="358" ed:height="24.5" ed:width="327" ed:parentid="206"><path stroke="#696969" d="M0,24.5L327,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">JavaScript中这个机制的本质就是对象之间的关联关系</tspan></text></g><g transform="matrix(1,0,0,1,773,8014)" id="360" ed:height="24.5" ed:width="343" ed:parentid="206"><path stroke="#696969" d="M0,24.5L343,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">把思路从类和继承的设计模式转换到委托行为的设计模式</tspan></text></g><g transform="matrix(1,0,0,1,734,8045)" id="362" ed:height="43.5" ed:width="514" ed:parentid="208"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">委托行为意味着某些对象（XYZ）在找不到属性或者方法引用时会把这个请求委托给另</tspan><tspan style="white-space:pre" x="8" y="35.1">一个对象（Task），这是一种极其强大的设计模式和父类、子类、继承、多态完全不同</tspan></text></g><g transform="matrix(1,0,0,1,734,8095)" id="364" ed:height="43.5" ed:width="514" ed:parentid="208"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">对象关联风格的代码相较于对象与类风格更加简洁，因为只关注一件事，对象之间的关</tspan><tspan style="white-space:pre" x="8" y="35.1">系</tspan></text></g><g transform="matrix(1,0,0,1,747,8176)" id="366" ed:height="24.5" ed:width="295" ed:parentid="212"><path stroke="#696969" d="M0,24.5L295,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">ES6中的class仍然是通过[prototype]机制实现的</tspan></text></g><g transform="matrix(1,0,0,1,747,8207)" id="368" ed:height="43.5" ed:width="514" ed:parentid="212"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">匿名函数没有name标识符，会导致：1、自我引用（递归，事件绑定等）更难；2、调</tspan><tspan style="white-space:pre" x="8" y="35.1">用栈更难追踪；3、代码（稍微）更难理解</tspan></text></g><g transform="matrix(1,0,0,1,708,8288)" id="370" ed:height="24.5" ed:width="447" ed:parentid="214"><path stroke="#696969" d="M0,24.5L447,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">内省：检查实例的类型，主要目的是通过创建方式来判断对象的结构和功能</tspan></text></g><g transform="matrix(1,0,0,1,708,8319)" id="372" ed:height="62.5" ed:width="514" ed:parentid="214"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">instanceof：因为Foo.prototype在a1的[prototype]链上，所以instanceof操作告诉我</tspan><tspan style="white-space:pre" x="8" y="35.1">们a1是Foo类的一个实例。从语法角度上说：instanceof似乎是检查a1和Foo的关系，</tspan><tspan style="white-space:pre" x="8" y="54.1">但实际上它想说的是a1和Foo.prototype(引用的对象)是互相关联的</tspan></text></g><g transform="matrix(1,0,0,1,747,8257)" id="374" ed:height="24.5" ed:width="226" ed:parentid="212"><path stroke="#696969" d="M0,24.5L226,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">鸭子类型：辨别特性，很脆弱的设计</tspan></text></g><g transform="matrix(1,0,0,1,708,8388)" id="376" ed:height="43.5" ed:width="514" ed:parentid="214"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">行为委托认为对象之间是兄弟关系，互相委托，而不是父类和子类的关系。我们可以选</tspan><tspan style="white-space:pre" x="8" y="35.1">择在JavaScript中努力实现类机制，也可以拥抱更自然的[prototype]委托机制</tspan></text></g><g transform="matrix(1,0,0,1,727,7339)" id="378" ed:height="24.5" ed:width="480" ed:parentid="194"><path stroke="#696969" d="M0,24.5L480,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">Object的原理：所有普通的[prototype]链最终都会指向内置的Object.prototype</tspan></text></g><g transform="matrix(1,0,0,1,727,7370)" id="380" ed:height="24.5" ed:width="441" ed:parentid="194"><path stroke="#696969" d="M0,24.5L441,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">constructor是一个非常不可靠并且不安全的引用，尽量避免使用这些引用</tspan></text></g><g transform="matrix(1,0,0,1,727,7401)" id="382" ed:height="43.5" ed:width="514" ed:parentid="194"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">调用Object.create会凭空创建一个“新”对象并把新对象内部的[prototype]关联到你</tspan><tspan style="white-space:pre" x="8" y="35.1">指定的对象</tspan></text></g><g transform="matrix(1,0,0,1,689,7451)" id="384" ed:height="24.5" ed:width="478" ed:parentid="196"><path stroke="#696969" d="M0,24.5L478,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">a instanceof Foo，在a的整条[prototype]链中是否有Foo.prototype指向的对象</tspan></text></g><g transform="matrix(1,0,0,1,689,7482)" id="386" ed:height="43.5" ed:width="514" ed:parentid="196"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">JavaScript和面向类的语言不同，它并没有类来作为对象的抽象模式或者说蓝图，</tspan><tspan style="white-space:pre" x="8" y="35.1">JavaScript中只有对象</tspan></text></g><g transform="matrix(1,0,0,1,689,7532)" id="388" ed:height="62.5" ed:width="514" ed:parentid="196"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">继承意味着复制操作，JavaScript（默认）并不会复制对象属性，相反，JavaScript会</tspan><tspan style="white-space:pre" x="8" y="35.1">在两个对象之间创建一个关联，这样一个对象就可以通过委托访问另一个对象的属性和</tspan><tspan style="white-space:pre" x="8" y="54.1">函数</tspan></text></g><g transform="matrix(1,0,0,1,676,7601)" id="390" ed:height="24.5" ed:width="443" ed:parentid="198"><path stroke="#696969" d="M0,24.5L443,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">在JavaScript中，对于“构造函数”最准确的解释是所有带new的函数调用</tspan></text></g><g transform="matrix(1,0,0,1,676,7632)" id="392" ed:height="43.5" ed:width="514" ed:parentid="198"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">实际上，构造函数和你程序中其他函数没有任何区别，当在普通函数调用前加上new关</tspan><tspan style="white-space:pre" x="8" y="35.1">键词之后，就会把这个函数调用变成一个“构造函数调用”</tspan></text></g><g transform="matrix(1,0,0,1,676,7682)" id="394" ed:height="24.5" ed:width="329" ed:parentid="198"><path stroke="#696969" d="M0,24.5L329,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">new会劫持所有普通函数并用构造函数的形式来调用它</tspan></text></g><g transform="matrix(1,0,0,1,676,7713)" id="396" ed:height="24.5" ed:width="512" ed:parentid="198"><path stroke="#696969" d="M0,24.5L512,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">奇怪的__prototype__（在ES6之前并不是标准），属性引用了内部（prototype）对象</tspan></text></g><g transform="matrix(1,0,0,1,702,7744)" id="398" ed:height="62.5" ed:width="514" ed:parentid="200"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">原型链：如果在对象上没有找到需要的属性或者方法引用，引擎就会继续在</tspan><tspan style="white-space:pre" x="8" y="35.1">[prototype]关联的对象上进行查找，同理，如果在后者中也没找到，就到需要的引用</tspan><tspan style="white-space:pre" x="8" y="54.1">就会继续查找它的prototype，以此类推</tspan></text></g><g transform="matrix(1,0,0,1,702,7813)" id="400" ed:height="24.5" ed:width="430" ed:parentid="200"><path stroke="#696969" d="M0,24.5L430,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">Object.create会创建一个新对象(bar)并把它关联到我们指定的对象(foo)</tspan></text></g><g transform="matrix(1,0,0,1,702,7844)" id="402" ed:height="43.5" ed:width="514" ed:parentid="200"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">可以充分发挥[prototype]机制的威力（委托）并且避免不必要的麻烦（比如使用new</tspan><tspan style="white-space:pre" x="8" y="35.1">的构造函数调用会生成.prototype和.constructor引用）</tspan></text></g><g transform="matrix(1,0,0,1,702,7894)" id="404" ed:height="24.5" ed:width="485" ed:parentid="200"><path stroke="#696969" d="M0,24.5L485,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">Object.create(null)会创建一个拥有空[prototype]链接的对象，这个对象无法委托</tspan></text></g><g transform="matrix(1,0,0,1,766,122)" id="406" ed:height="43.5" ed:width="514" ed:parentid="108"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">分词/词法分析（Tokenizing/Lexing）：将由字符组成的字符串分解成（对编程语言来</tspan><tspan style="white-space:pre" x="8" y="35.1">说） 有意义的代码块， 这些代码块被称为词法单元（token）</tspan></text></g><g transform="matrix(1,0,0,1,766,172)" id="408" ed:height="43.5" ed:width="514" ed:parentid="108"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">解析/语法分析（Parsing）：将词法单元流（数组） 转换成一个由元素逐级嵌套所组</tspan><tspan style="white-space:pre" x="8" y="35.1">成的代表了程序语法结构的树</tspan></text></g><g transform="matrix(1,0,0,1,766,222)" id="410" ed:height="24.5" ed:width="271" ed:parentid="108"><path stroke="#696969" d="M0,24.5L271,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">代码生成：将 AST 转换为可执行代码的过程</tspan></text></g><g transform="matrix(1,0,0,1,779,427)" id="412" ed:height="43.5" ed:width="514" ed:parentid="110"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">var a = 2; 引擎认为这里有两个完全不同的声明， 一个由编译器在编译时处理， 另一</tspan><tspan style="white-space:pre" x="8" y="35.1">个则由引擎在运行时处理</tspan></text></g><g transform="matrix(1,0,0,1,779,477)" id="414" ed:height="43.5" ed:width="514" ed:parentid="110"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">伪代码进行概括：“为一个变量分配内存， 将其命名为 a， 然后将值 2 保存进这个变</tspan><tspan style="white-space:pre" x="8" y="35.1">量</tspan></text></g><g transform="matrix(1,0,0,1,779,527)" id="418" ed:height="24.5" ed:width="466" ed:parentid="110"><path stroke="#696969" d="M0,24.5L466,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">当变量出现在赋值操作的左侧时进行 LHS 查询， 出现在右侧时进行 RHS 查询</tspan></text></g><g transform="matrix(1,0,0,1,779,558)" id="420" ed:height="43.5" ed:width="423" ed:parentid="110"><path stroke="#696969" d="M0,43.5L423,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">RHS 查询与简单地查找某个变量的值别无二致， 而 LHS 查询则是试图</tspan><tspan style="white-space:pre" x="8" y="35.1">找到变量的容器本身， 从而可以对其赋值</tspan></text></g><g transform="matrix(1,0,0,1,779,751)" id="422" ed:height="43.5" ed:width="514" ed:parentid="112"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">在当前作用域中无法找到某个变量时， 引擎就会在外层嵌套的作用域中继续查找， 直</tspan><tspan style="white-space:pre" x="8" y="35.1">到找到该变量，或抵达最外层的作用域（也就是全局作用域） 为止</tspan></text></g><g transform="matrix(1,0,0,1,740,801)" id="424" ed:height="62.5" ed:width="514" ed:parentid="114"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">不成功的 RHS 引用会导致抛出 ReferenceError 异常。 不成功的 LHS 引用会导致自动</tspan><tspan style="white-space:pre" x="8" y="35.1">隐式地创建一个全局变量（非严格模式下）， 该变量使用 LHS 引用的目标作为标识</tspan><tspan style="white-space:pre" x="8" y="54.1">符， 或者抛出 ReferenceError 异常（严格模式下）</tspan></text></g><g transform="matrix(1,0,0,1,750,897)" id="426" ed:height="62.5" ed:width="514" ed:parentid="118"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">词法作用域就是定义在词法阶段的作用域。 换句话说， 词法作用域是由你在写</tspan><tspan style="white-space:pre" x="8" y="35.1">代码时将变量和块作用域写在哪里来决定的， 因此当词法分析器处理代码时会保持作</tspan><tspan style="white-space:pre" x="8" y="54.1">用域不变（大部分情况下是这样的）</tspan></text></g><g transform="matrix(1,0,0,1,750,966)" id="428" ed:height="24.5" ed:width="291" ed:parentid="118"><path stroke="#696969" d="M0,24.5L291,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">作用域查找会在找到第一个匹配的标识符时停止</tspan></text></g><g transform="matrix(1,0,0,1,750,1190)" id="430" ed:height="43.5" ed:width="514" ed:parentid="120"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">JavaScript 中的 eval(..) 函数可以接受一个字符串为参数， 并将其中的内容视为好像在</tspan><tspan style="white-space:pre" x="8" y="35.1">书写时就存在于程序中这个位置的代码</tspan></text></g><g transform="matrix(1,0,0,1,750,1240)" id="432" ed:height="43.5" ed:width="445" ed:parentid="120"><path stroke="#696969" d="M0,43.5L445,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">在严格模式的程序中， eval(..) 在运行时有其自己的词法作用域， 意味着其</tspan><tspan style="white-space:pre" x="8" y="35.1">中的声明无法修改所在的作用域</tspan></text></g><g transform="matrix(1,0,0,1,750,1421)" id="434" ed:height="43.5" ed:width="514" ed:parentid="120"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">new Function(..) 函数的行为也很类似， 最后一个参数可以接受代码字符串， 并将其</tspan><tspan style="white-space:pre" x="8" y="35.1">转化为动态生成的函数</tspan></text></g><g transform="matrix(1,0,0,1,750,1340)" id="436" ed:height="43.5" ed:width="514" ed:parentid="120"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">setTimeout(..) 和setInterval(..) 的第一个参数可以是字符串， 字符串的内容可以被解</tspan><tspan style="white-space:pre" x="8" y="35.1">释为一段动态生成的函数代码</tspan></text></g><g transform="matrix(1,0,0,1,750,1471)" id="438" ed:height="43.5" ed:width="514" ed:parentid="120"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">with 可以将一个没有或有多个属性的对象处理为一个完全隔离的词法作用域， 因此这</tspan><tspan style="white-space:pre" x="8" y="35.1">个对象的属性也会被处理为定义在这个作用域中的词法标识符</tspan></text></g><g transform="matrix(1,0,0,1,750,1521)" id="440" ed:height="62.5" ed:width="456" ed:parentid="120"><path stroke="#696969" d="M0,62.5L456,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">尽管 with 块可以将一个对象处理为词法作用域， 但是这个块内部正常的 var</tspan><tspan style="white-space:pre" x="8" y="35.1">声明并不会被限制在这个块的作用域中， 而是被添加到 with 所处的函数作</tspan><tspan style="white-space:pre" x="8" y="54.1">用域中</tspan></text></g><g transform="matrix(1,0,0,1,750,1640)" id="442" ed:height="62.5" ed:width="514" ed:parentid="120"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">JavaScript 引擎会在编译阶段进行数项的性能优化。 其中有些优化依赖于能够根据代</tspan><tspan style="white-space:pre" x="8" y="35.1">码的词法进行静态分析， 并预先确定所有变量和函数的定义位置， 才能在执行过程中</tspan><tspan style="white-space:pre" x="8" y="54.1">快速找到标识符</tspan></text></g><g transform="matrix(1,0,0,1,750,1709)" id="444" ed:height="43.5" ed:width="514" ed:parentid="120"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">最悲观的情况是如果出现了 eval(..) 或 with， 所有的优化可能都是无意义的， 因此最</tspan><tspan style="white-space:pre" x="8" y="35.1">简单的做法就是完全不做任何优化</tspan></text></g><g transform="matrix(1,0,0,1,856,1835)" id="446" ed:height="43.5" ed:width="449" ed:parentid="128"><path stroke="#696969" d="M0,43.5L449,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">最小授权或最小暴露原则：是指在软件设计中， 应该最小限度地暴露必</tspan><tspan style="white-space:pre" x="8" y="35.1">要内容， 而将其他内容都“隐藏” 起来， 比如某个模块或对象的 API 设计</tspan></text></g><g transform="matrix(1,0,0,1,856,1885)" id="448" ed:height="43.5" ed:width="514" ed:parentid="128"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">变量冲突的一个典型例子存在于全局作用域中。 当程序中加载了多个第三方库时， 如</tspan><tspan style="white-space:pre" x="8" y="35.1">果它们没有妥善地将内部私有的函数或变量隐藏起来， 就会很容易引发冲突</tspan></text></g><g transform="matrix(1,0,0,1,843,1985)" id="450" ed:height="24.5" ed:width="460" ed:parentid="130"><path stroke="#696969" d="M0,24.5L460,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">函数声明和函数表达式之间最重要的区别是它们的名称标识符将会绑定在何处</tspan></text></g><g transform="matrix(1,0,0,1,843,2016)" id="452" ed:height="43.5" ed:width="444" ed:parentid="130"><path stroke="#696969" d="M0,43.5L444,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1"> (function foo(){ .. }) 作为函数表达式意味着 foo 只能在 .. 所代表的位置中</tspan><tspan style="white-space:pre" x="8" y="35.1">被访问， 外部作用域则不行</tspan></text></g><g transform="matrix(1,0,0,1,843,2116)" id="454" ed:height="24.5" ed:width="213" ed:parentid="130"><path stroke="#696969" d="M0,24.5L213,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">匿名函数表达式几个缺点需要考虑</tspan></text></g><g transform="matrix(1,0,0,1,1083,2066)" id="456" ed:height="24.5" ed:width="410" ed:parentid="454"><path stroke="#696969" d="M0,24.5L410,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">1.匿名函数在栈追踪中不会显示出有意义的函数名， 使得调试很困难</tspan></text></g><g transform="matrix(1,0,0,1,1083,2097)" id="458" ed:height="43.5" ed:width="514" ed:parentid="454"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">2.如果没有函数名， 当函数需要引用自身时只能使用已经过期的 arguments.callee 引</tspan><tspan style="white-space:pre" x="8" y="35.1">用，比如在递归中</tspan></text></g><g transform="matrix(1,0,0,1,1083,2147)" id="460" ed:height="43.5" ed:width="514" ed:parentid="454"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">3.匿名函数省略了对于代码可读性 / 可理解性很重要的函数名。 一个描述性的名称可</tspan><tspan style="white-space:pre" x="8" y="35.1">以让代码不言自明</tspan></text></g><g transform="matrix(1,0,0,1,830,2197)" id="462" ed:height="43.5" ed:width="373" ed:parentid="132"><path stroke="#696969" d="M0,43.5L373,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">变量的声明应该距离使用的地方越近越好， 并最大限度地本地</tspan><tspan style="white-space:pre" x="8" y="35.1">化</tspan></text></g><g transform="matrix(1,0,0,1,830,2247)" id="464" ed:height="43.5" ed:width="514" ed:parentid="132"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">块作用域是一个用来对之前的最小授权原则进行扩展的工具， 将代码从在函数中隐藏</tspan><tspan style="white-space:pre" x="8" y="35.1">信息扩展为在块中隐藏信息</tspan></text></g><g transform="matrix(1,0,0,1,830,2359)" id="468" ed:height="24.5" ed:width="418" ed:parentid="132"><path stroke="#696969" d="M0,24.5L418,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">let 关键字可以将变量绑定到所在的任意作用域中（通常是 { .. } 内部）</tspan></text></g><g transform="matrix(1,0,0,1,830,2390)" id="470" ed:height="43.5" ed:width="514" ed:parentid="132"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">for 循环头部的 let 不仅将 i 绑定到了 for 循环的块中， 事实上它将其重新绑定到了循</tspan><tspan style="white-space:pre" x="8" y="35.1">环的每一个迭代中， 确保使用上一个循环迭代结束时的值重新进行赋值</tspan></text></g><g transform="matrix(1,0,0,1,754,2579)" id="472" ed:height="43.5" ed:width="403" ed:parentid="138"><path stroke="#696969" d="M0,43.5L403,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">函数作用域和块作用域的行为是一样的， 可以总结为： 任何声明在</tspan><tspan style="white-space:pre" x="8" y="35.1">某个作用域内的变量， 都将附属于这个作用域</tspan></text></g><g transform="matrix(1,0,0,1,742,2629)" id="474" ed:height="43.5" ed:width="514" ed:parentid="140"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">引擎会在解释 JavaScript 代码之前首先对其进行编译。 编译阶段中的一部分工作就是</tspan><tspan style="white-space:pre" x="8" y="35.1">找到所有的声明， 并用合适的作用域将它们关联起来</tspan></text></g><g transform="matrix(1,0,0,1,742,2679)" id="476" ed:height="43.5" ed:width="490" ed:parentid="140"><path stroke="#696969" d="M0,43.5L490,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">正确的思考思路是， 包括变量和函数在内的所有声明都会在任何代码被执行前首先</tspan><tspan style="white-space:pre" x="8" y="35.1">被处理</tspan></text></g><g transform="matrix(1,0,0,1,742,2729)" id="478" ed:height="43.5" ed:width="514" ed:parentid="140"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">变量和函数声明从它们在代码中出现的位置被“移动”到了最上面。 这个过程就叫作</tspan><tspan style="white-space:pre" x="8" y="35.1">提升</tspan></text></g><g transform="matrix(1,0,0,1,702,2841)" id="480" ed:height="43.5" ed:width="514" ed:parentid="142"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">一个值得注意的细节（这个细节可以出现在有多个“重复”声明的代码中） 是函数会</tspan><tspan style="white-space:pre" x="8" y="35.1">首先被提升， 然后才是变量</tspan></text></g><g transform="matrix(1,0,0,1,702,2891)" id="482" ed:height="24.5" ed:width="369" ed:parentid="142"><path stroke="#696969" d="M0,24.5L369,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">一个普通块内部的函数声明通常会被提升到所在作用域的顶部</tspan></text></g><g transform="matrix(1,0,0,1,432,3236)" id="484" ed:height="37" ed:width="172" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L168,0C170.7,0,172,1.3,172,4L172,33C172,35.7,170.7,37,168,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">第五章 作用域闭包</tspan></text></g><g transform="matrix(1,0,0,1,631,2958)" id="486" ed:height="24.5" ed:width="66" ed:parentid="484"><path stroke="#696969" d="M0,24.5L66,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">5.1.启示</tspan></text></g><g transform="matrix(1,0,0,1,631,3117)" id="488" ed:height="24.5" ed:width="92" ed:parentid="484"><path stroke="#696969" d="M0,24.5L92,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">5.2.实质问题</tspan></text></g><g transform="matrix(1,0,0,1,631,3277)" id="490" ed:height="24.5" ed:width="105" ed:parentid="484"><path stroke="#696969" d="M0,24.5L105,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">5.3.现在我懂了</tspan></text></g><g transform="matrix(1,0,0,1,631,3327)" id="492" ed:height="24.5" ed:width="105" ed:parentid="484"><path stroke="#696969" d="M0,24.5L105,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">5.4.循环和闭包</tspan></text></g><g transform="matrix(1,0,0,1,631,3452)" id="494" ed:height="24.5" ed:width="66" ed:parentid="484"><path stroke="#696969" d="M0,24.5L66,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">5.5.模块</tspan></text></g><g transform="matrix(1,0,0,1,724,2948)" id="496" ed:height="43.5" ed:width="514" ed:parentid="486"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">闭包是基于词法作用域书写代码时所产生的自然结果， 你甚至不需要为了利用它们而</tspan><tspan style="white-space:pre" x="8" y="35.1">有意识地创建闭包</tspan></text></g><g transform="matrix(1,0,0,1,763,3267)" id="500" ed:height="43.5" ed:width="514" ed:parentid="490"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">在定时器、 事件监听器、Ajax 请求、 跨窗口通信、 Web Workers 或者任何其他的异</tspan><tspan style="white-space:pre" x="8" y="35.1">步（或者同步） 任务中， 只要使用了回调函数， 实际上就是在使用闭包</tspan></text></g><g transform="matrix(1,0,0,1,763,3317)" id="504" ed:height="43.5" ed:width="514" ed:parentid="492"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">我们使用 IIFE 在每次迭代时都创建一个新的作用域。 换句话说， 每次迭代我们都需要</tspan><tspan style="white-space:pre" x="8" y="35.1">一个块作用域</tspan></text></g><g transform="matrix(1,0,0,1,724,3402)" id="506" ed:height="24.5" ed:width="200" ed:parentid="494"><path stroke="#696969" d="M0,24.5L200,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">模块模式需要具备两个必要条件</tspan></text></g><g transform="matrix(1,0,0,1,951,3367)" id="508" ed:height="43.5" ed:width="514" ed:parentid="506"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">必须有外部的封闭函数， 该函数必须至少被调用一次（每次调用都会创建一个新的模</tspan><tspan style="white-space:pre" x="8" y="35.1">块实例）</tspan></text></g><g transform="matrix(1,0,0,1,951,3417)" id="510" ed:height="43.5" ed:width="514" ed:parentid="506"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">封闭函数必须返回至少一个内部函数， 这样内部函数才能在私有作用域中形成闭包， </tspan><tspan style="white-space:pre" x="8" y="35.1">并且可以访问或者修改私有的状态</tspan></text></g><g transform="matrix(1,0,0,1,724,3467)" id="512" ed:height="62.5" ed:width="454" ed:parentid="494"><path stroke="#696969" d="M0,62.5L454,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">基于函数的模块并不是一个能被稳定识别的模式（编译器无法识别）， 它们</tspan><tspan style="white-space:pre" x="8" y="35.1">的 API 语义只有在运行时才会被考虑进来。 因此可以在运行时修改一个模块</tspan><tspan style="white-space:pre" x="8" y="54.1">的 API</tspan></text></g><g transform="matrix(1,0,0,1,724,3536)" id="514" ed:height="24.5" ed:width="307" ed:parentid="494"><path stroke="#696969" d="M0,24.5L307,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">ES6 模块 API 更加稳定（API 不会在运行时改变）</tspan></text></g><g transform="matrix(1,0,0,1,432,3637)" id="516" ed:height="37" ed:width="71" ed:parentid="101"><path stroke="#ebecf3" d="M4,0L67,0C69.7,0,71,1.3,71,4L71,33C71,35.7,69.7,37,67,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z" fill="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan style="white-space:pre" x="18" y="23.5">附录</tspan></text></g><g transform="matrix(1,0,0,1,530,3594)" id="518" ed:height="43.5" ed:width="514" ed:parentid="516"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">动态作用域并不关心函数和作用域是如何声明以及在何处声明的， 只关心它们从何处</tspan><tspan style="white-space:pre" x="8" y="35.1">调用</tspan></text></g><g transform="matrix(1,0,0,1,530,3644)" id="520" ed:height="24.5" ed:width="403" ed:parentid="516"><path stroke="#696969" d="M0,24.5L403,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">换句话说， 作用域链是基于调用栈的， 而不是代码中的作用域嵌套</tspan></text></g><g transform="matrix(1,0,0,1,530,3675)" id="522" ed:height="43.5" ed:width="514" ed:parentid="516"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">主要区别： 词法作用域是在写代码或者说定义时确定的， 而动态作用域是在运行时确</tspan><tspan style="white-space:pre" x="8" y="35.1">定的</tspan></text></g><g transform="matrix(1,0,0,1,703,3921)" id="524" ed:height="43.5" ed:width="486" ed:parentid="152"><path stroke="#696969" d="M0,43.5L486,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">为什么需要从函数内部引用函数自身：常见的原因是递归（从函数内部调用这个函</tspan><tspan style="white-space:pre" x="8" y="35.1">数） 或者可以写一个在第一次被调用后自己解除绑定的事件处理器</tspan></text></g><g transform="matrix(1,0,0,1,703,3971)" id="526" ed:height="43.5" ed:width="514" ed:parentid="152"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">一种传统的但是现在已经被弃用和批判的用法， 是使用 arguments.callee 来引用当前</tspan><tspan style="white-space:pre" x="8" y="35.1">正在运行的函数对象。 这是唯一一种可以从匿名函数对象内部引用自身的方法</tspan></text></g><g transform="matrix(1,0,0,1,761,4210)" id="528" ed:height="43.5" ed:width="514" ed:parentid="160"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">另一个查看调用栈的方法是使用浏览器的调试工具。 绝大多数现代桌面浏览器都内置</tspan><tspan style="white-space:pre" x="8" y="35.1">了开发者工具，其中包含 JavaScript 调试器</tspan></text></g><g transform="matrix(1,0,0,1,761,4391)" id="530" ed:height="62.5" ed:width="514" ed:parentid="162"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">一个最常见的 this 绑定问题就是被隐式绑定的函数会丢失绑定对象， 也就是说它会应</tspan><tspan style="white-space:pre" x="8" y="35.1">用默认绑定， 从而把 this 绑定到全局对象或者 undefined 上， 取决于是否是严格模</tspan><tspan style="white-space:pre" x="8" y="54.1">式</tspan></text></g><g transform="matrix(1,0,0,1,761,4648)" id="532" ed:height="43.5" ed:width="514" ed:parentid="162"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">由于硬绑定是一种非常常用的模式， 所以在 ES5 中提供了内置的方法</tspan><tspan style="white-space:pre" x="8" y="35.1">Function.prototype.bind</tspan></text></g><g transform="matrix(1,0,0,1,748,4836)" id="534" ed:height="43.5" ed:width="455" ed:parentid="164"><path stroke="#696969" d="M0,43.5L455,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">new 和 call/apply 无法一起使用， 因此无法通过 new foo.call(obj1) 来直接</tspan><tspan style="white-space:pre" x="8" y="35.1">进行测试</tspan></text></g><g transform="matrix(1,0,0,1,748,4886)" id="536" ed:height="24.5" ed:width="192" ed:parentid="164"><path stroke="#696969" d="M0,24.5L192,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">MDN 提供的一种bind(..) 实现</tspan></text></g><g transform="matrix(1,0,0,1,748,4917)" id="538" ed:height="81.5" ed:width="514" ed:parentid="164"><path stroke="#696969" d="M0,81.5L514,81.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">之所以要在 new 中使用硬绑定函数， 主要目的是预先设置函数的一些参数， 这样在使</tspan><tspan style="white-space:pre" x="8" y="35.1">用new 进行初始化时就可以只传入其余的参数。 bind(..) 的功能之一就是可以把除了第</tspan><tspan style="white-space:pre" x="8" y="54.1">一个参数（第一个参数用于绑定 this） 之外的其他参数都传给下层的函数（这种技术</tspan><tspan style="white-space:pre" x="8" y="73.1">称为“部分应用”， 是“柯里化” 的一种）</tspan></text></g><g transform="matrix(1,0,0,1,748,5080)" id="540" ed:height="24.5" ed:width="222" ed:parentid="164"><path stroke="#696969" d="M0,24.5L222,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">可以按照下面的顺序来进行判断this</tspan></text></g><g transform="matrix(1,0,0,1,997,5005)" id="542" ed:height="24.5" ed:width="497" ed:parentid="540"><path stroke="#696969" d="M0,24.5L497,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">1. 函数是否在 new 中调用（new 绑定） ？ 如果是的话 this 绑定的是新创建的对象</tspan></text></g><g transform="matrix(1,0,0,1,997,5036)" id="544" ed:height="43.5" ed:width="514" ed:parentid="540"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">2. 函数是否通过 call、 apply（显式绑定） 或者硬绑定调用？ 如果是的话， this 绑定</tspan><tspan style="white-space:pre" x="8" y="35.1">的是指定的对象。</tspan></text></g><g transform="matrix(1,0,0,1,997,5086)" id="546" ed:height="43.5" ed:width="514" ed:parentid="540"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">3. 函数是否在某个上下文对象中调用（隐式绑定） ？ 如果是的话， this 绑定的是那个</tspan><tspan style="white-space:pre" x="8" y="35.1">上下文对象。</tspan></text></g><g transform="matrix(1,0,0,1,997,5136)" id="548" ed:height="43.5" ed:width="514" ed:parentid="540"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">4. 如果都不是的话， 使用默认绑定。 如果在严格模式下， 就绑定到 undefined， 否</tspan><tspan style="white-space:pre" x="8" y="35.1">则绑定到全局对象。</tspan></text></g><g transform="matrix(1,0,0,1,761,5267)" id="553" ed:height="43.5" ed:width="514" ed:parentid="166"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">注意： 对于默认绑定来说， 决定 this 绑定对象的并不是调用位置是否处于严格模式， </tspan><tspan style="white-space:pre" x="8" y="35.1">而是函数体是否处于严格模式</tspan></text></g><g transform="matrix(1,0,0,1,757,5317)" id="555" ed:height="24.5" ed:width="387" ed:parentid="168"><path stroke="#696969" d="M0,24.5L387,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">ES6 中介绍了一种无法使用这些规则的特殊函数类型： 箭头函数</tspan></text></g><g transform="matrix(1,0,0,1,757,5348)" id="557" ed:height="43.5" ed:width="498" ed:parentid="168"><path stroke="#696969" d="M0,43.5L498,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">箭头函数不使用 this 的四种标准规则， 而是根据外层（函数或者全局） 作用域来决</tspan><tspan style="white-space:pre" x="8" y="35.1">定 this</tspan></text></g><g transform="matrix(1,0,0,1,676,5455)" id="559" ed:height="43.5" ed:width="514" ed:parentid="172"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">唯一的区别是， 在文字声明中你可以添加多个键/值对，但是在构造形式中你必须逐个</tspan><tspan style="white-space:pre" x="8" y="35.1">添加属性</tspan></text></g><g transform="matrix(1,0,0,1,676,5586)" id="561" ed:height="24.5" ed:width="490" ed:parentid="174"><path stroke="#696969" d="M0,24.5L490,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">有些内置对象的名字看起来和简单基础类型一样， 不过实际上它们的关系更复杂。</tspan></text></g><g transform="matrix(1,0,0,1,676,5617)" id="563" ed:height="62.5" ed:width="514" ed:parentid="174"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">原始值 "I am a string" 并不是一个对象， 它只是一个字面量， 并且是一个不可变的</tspan><tspan style="white-space:pre" x="8" y="35.1">值。如果要在这个字面量上执行一些操作， 比如获取长度、 访问其中某个字符等， 那</tspan><tspan style="white-space:pre" x="8" y="54.1">需要将其转换为 String 对象。</tspan></text></g><g transform="matrix(1,0,0,1,676,5767)" id="565" ed:height="43.5" ed:width="514" ed:parentid="174"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">对于 Object、 Array、 Function 和 RegExp（正则表达式） 来说， 无论使用文字形</tspan><tspan style="white-space:pre" x="8" y="35.1">式还是构造形式， 它们都是对象， 不是字面量。 </tspan></text></g><g transform="matrix(1,0,0,1,676,5817)" id="567" ed:height="43.5" ed:width="514" ed:parentid="174"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">Error 对象很少在代码中显式创建， 一般是在抛出异常时被自动创建。 也可以使用 </tspan><tspan style="white-space:pre" x="8" y="35.1">new Error(..) 这种构造形式来创建， 不过一般来说用不着。</tspan></text></g><g transform="matrix(1,0,0,1,676,5917)" id="569" ed:height="24.5" ed:width="409" ed:parentid="176"><path stroke="#696969" d="M0,24.5L409,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1"> .a 语法通常被称为“属性访问”， ["a"] 语法通常被称为“键访问”</tspan></text></g><g transform="matrix(1,0,0,1,676,5948)" id="571" ed:height="43.5" ed:width="509" ed:parentid="176"><path stroke="#696969" d="M0,43.5L509,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">这两种语法的主要区别在于 . 操作符要求属性名满足标识符的命名规范， 而 [".."] 语法</tspan><tspan style="white-space:pre" x="8" y="35.1">可以接受任意 UTF-8/Unicode 字符串作为属性名</tspan></text></g><g transform="matrix(1,0,0,1,676,5998)" id="573" ed:height="43.5" ed:width="514" ed:parentid="176"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">在对象中， 属性名永远都是字符串。 如果你使用 string（字面量） 以外的其他值作为</tspan><tspan style="white-space:pre" x="8" y="35.1">属性名， 那它首先会被转换为一个字符串</tspan></text></g><g transform="matrix(1,0,0,1,676,6048)" id="575" ed:height="43.5" ed:width="514" ed:parentid="176"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">数组也是对象， 所以虽然每个下标都是整数， 你仍然可以给数组添加属性。虽然添加</tspan><tspan style="white-space:pre" x="8" y="35.1">了命名属性（无论是通过 . 语法还是 [] 语法）， 数组的 length 值并未发生变化。</tspan></text></g><g transform="matrix(1,0,0,1,676,6098)" id="577" ed:height="62.5" ed:width="514" ed:parentid="176"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">我们还不确定“复制” 一个函数意味着什么。 有些人会通过 toString() 来序列</tspan><tspan style="white-space:pre" x="8" y="35.1">化一个函数的源代码（但是结果取决于 JavaScript 的具体实现， 而且不同的引擎对于</tspan><tspan style="white-space:pre" x="8" y="54.1">不同类型的函数处理方式并不完全相同）。</tspan></text></g><g transform="matrix(1,0,0,1,676,6217)" id="579" ed:height="43.5" ed:width="514" ed:parentid="176"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1"> 不管是不是处于严格模式， 尝试修改一个不可配置的属性描述符都会出错。 注意： </tspan><tspan style="white-space:pre" x="8" y="35.1">如你所见， 把 configurable 修改成false 是单向操作， 无法撤销！</tspan></text></g><g transform="matrix(1,0,0,1,676,6267)" id="581" ed:height="24.5" ed:width="355" ed:parentid="176"><path stroke="#696969" d="M0,24.5L355,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">除了无法修改， configurable:false 还会禁止删除这个属性</tspan></text></g><g transform="matrix(1,0,0,1,676,6505)" id="583" ed:height="43.5" ed:width="514" ed:parentid="178"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">every(..) 和 some(..) 中特殊的返回值和普通 for 循环中的 break 语句类似， 它们会提</tspan><tspan style="white-space:pre" x="8" y="35.1">前终止遍历。</tspan></text></g><g transform="matrix(1,0,0,1,769,6582)" id="587" ed:height="62.5" ed:width="514" ed:parentid="182"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">面向对象编程强调的是数据和操作数据的行为本质上是互相关联的（当然， 不同的数</tspan><tspan style="white-space:pre" x="8" y="35.1">据有不同的行为）， 因此好的设计就是把数据以及和它相关的行为打包（或者说封</tspan><tspan style="white-space:pre" x="8" y="54.1">装） 起来。</tspan></text></g><g transform="matrix(1,0,0,1,769,6651)" id="589" ed:height="43.5" ed:width="514" ed:parentid="182"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">类的另一个核心概念是多态， 这个概念是说父类的通用行为可以被子类用更特殊的行</tspan><tspan style="white-space:pre" x="8" y="35.1">为重写。</tspan></text></g><g transform="matrix(1,0,0,1,782,6913)" id="591" ed:height="43.5" ed:width="514" ed:parentid="186"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">多态是一个非常广泛的话题， 我们现在所说的“相对” 只是多态的一个方面： 任何方</tspan><tspan style="white-space:pre" x="8" y="35.1">法都可以引用继承层次中高层的方法（无论高层的方法名和当前方法名是否相同）。 </tspan></text></g><g transform="matrix(1,0,0,1,782,6963)" id="593" ed:height="43.5" ed:width="514" ed:parentid="186"><path stroke="#696969" d="M0,43.5L514,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">多态的另一个方面是， 在继承链的不同层次中一个方法名可以被多次定义， 当调用方</tspan><tspan style="white-space:pre" x="8" y="35.1">法时会自动选择合适的定义。</tspan></text></g><g transform="matrix(1,0,0,1,782,7013)" id="595" ed:height="62.5" ed:width="514" ed:parentid="186"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">需要注意， 子类得到的仅仅是继承自父类行为的一份副本。 子类对继承到的一个</tspan><tspan style="white-space:pre" x="8" y="35.1">方法进行“重写”， 不会影响父类中的方法， 这两个方法互不影响， 因此才能使用相</tspan><tspan style="white-space:pre" x="8" y="54.1">对多态引用访问父类中的方法</tspan></text></g><g transform="matrix(1,0,0,1,782,7082)" id="597" ed:height="24.5" ed:width="334" ed:parentid="186"><path stroke="#696969" d="M0,24.5L334,24.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1"> 多重继承意味着所有父类的定义都会被复制到子类中。</tspan></text></g><g transform="matrix(1,0,0,1,756,7113)" id="599" ed:height="43.5" ed:width="508" ed:parentid="188"><path stroke="#696969" d="M0,43.5L508,43.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">在继承或者实例化时， JavaScript 的对象机制并不会自动执行复制行为。 简单来说，</tspan><tspan style="white-space:pre" x="8" y="35.1">JavaScript 中只有对象， 并不存在可以被实例化的“类”。</tspan></text></g><g transform="matrix(1,0,0,1,756,7244)" id="601" ed:height="62.5" ed:width="514" ed:parentid="188"><path stroke="#696969" d="M0,62.5L514,62.5" stroke-linejoin="round" fill="none"/><text class="st3"><tspan style="white-space:pre" x="8" y="16.1">混入模式（无论显式还是隐式） 可以用来模拟类的复制行为， 但是通常会产生丑陋并</tspan><tspan style="white-space:pre" x="8" y="35.1">且脆弱的语法， 比如显式伪多态（OtherObj.methodName.call(this, ...)）， 这会让代</tspan><tspan style="white-space:pre" x="8" y="54.1">码更加难懂并且难以维护</tspan></text></g><symbol id="plus"><path d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6z" fill="url(#lg1)"/><path stroke="#46a000" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6zM3,6L9,6M6,3L6,9" fill="none" stroke-width="0.7"/></symbol><symbol id="minus"><path d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6z" fill="url(#lg1)"/><path stroke="#46a000" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6zM3,6L9,6" fill="none" stroke-width="0.7"/></symbol><g transform="translate(370,4220)" ed:togtopicid="101"><use xlink:href="#minus"/></g><g transform="translate(621,471)" ed:togtopicid="102"><use xlink:href="#minus"/></g><g transform="translate(605,1318)" ed:togtopicid="104"><use xlink:href="#minus"/></g><g transform="translate(685,2159)" ed:togtopicid="106"><use xlink:href="#minus"/></g><g transform="translate(740,194)" ed:togtopicid="108"><use xlink:href="#minus"/></g><g transform="translate(753,524)" ed:togtopicid="110"><use xlink:href="#minus"/></g><g transform="translate(753,767)" ed:togtopicid="112"><use xlink:href="#minus"/></g><g transform="translate(714,826)" ed:togtopicid="114"><use xlink:href="#minus"/></g><g transform="translate(724,1018)" ed:togtopicid="118"><use xlink:href="#minus"/></g><g transform="translate(724,1449)" ed:togtopicid="120"><use xlink:href="#minus"/></g><g transform="translate(843,1801)" ed:togtopicid="126"><use xlink:href="#minus"/></g><g transform="translate(830,1876)" ed:togtopicid="128"><use xlink:href="#minus"/></g><g transform="translate(817,2057)" ed:togtopicid="130"><use xlink:href="#minus"/></g><g transform="translate(804,2365)" ed:togtopicid="132"><use xlink:href="#minus"/></g><g transform="translate(557,2741)" ed:togtopicid="136"><use xlink:href="#minus"/></g><g transform="translate(728,2594)" ed:togtopicid="138"><use xlink:href="#minus"/></g><g transform="translate(716,2725)" ed:togtopicid="140"><use xlink:href="#minus"/></g><g transform="translate(676,2872)" ed:togtopicid="142"><use xlink:href="#minus"/></g><g transform="translate(584,3952)" ed:togtopicid="148"><use xlink:href="#minus"/></g><g transform="translate(738,3837)" ed:togtopicid="150"><use xlink:href="#minus"/></g><g transform="translate(677,3937)" ed:togtopicid="152"><use xlink:href="#minus"/></g><g transform="translate(738,4052)" ed:togtopicid="154"><use xlink:href="#minus"/></g><g transform="translate(616,4754)" ed:togtopicid="158"><use xlink:href="#minus"/></g><g transform="translate(735,4185)" ed:togtopicid="160"><use xlink:href="#minus"/></g><g transform="translate(735,4513)" ed:togtopicid="162"><use xlink:href="#minus"/></g><g transform="translate(722,4976)" ed:togtopicid="164"><use xlink:href="#minus"/></g><g transform="translate(735,5242)" ed:togtopicid="166"><use xlink:href="#minus"/></g><g transform="translate(731,5348)" ed:togtopicid="168"><use xlink:href="#minus"/></g><g transform="translate(557,5980)" ed:togtopicid="170"><use xlink:href="#minus"/></g><g transform="translate(650,5455)" ed:togtopicid="172"><use xlink:href="#minus"/></g><g transform="translate(650,5702)" ed:togtopicid="174"><use xlink:href="#minus"/></g><g transform="translate(650,6177)" ed:togtopicid="176"><use xlink:href="#minus"/></g><g transform="translate(650,6496)" ed:togtopicid="178"><use xlink:href="#minus"/></g><g transform="translate(637,6938)" ed:togtopicid="180"><use xlink:href="#minus"/></g><g transform="translate(743,6657)" ed:togtopicid="182"><use xlink:href="#minus"/></g><g transform="translate(756,6797)" ed:togtopicid="184"><use xlink:href="#minus"/></g><g transform="translate(756,6978)" ed:togtopicid="186"><use xlink:href="#minus"/></g><g transform="translate(730,7203)" ed:togtopicid="188"><use xlink:href="#minus"/></g><g transform="translate(557,7623)" ed:togtopicid="192"><use xlink:href="#minus"/></g><g transform="translate(701,7386)" ed:togtopicid="194"><use xlink:href="#minus"/></g><g transform="translate(663,7517)" ed:togtopicid="196"><use xlink:href="#minus"/></g><g transform="translate(650,7663)" ed:togtopicid="198"><use xlink:href="#minus"/></g><g transform="translate(676,7825)" ed:togtopicid="200"><use xlink:href="#minus"/></g><g transform="translate(589,8185)" ed:togtopicid="204"><use xlink:href="#minus"/></g><g transform="translate(747,7989)" ed:togtopicid="206"><use xlink:href="#minus"/></g><g transform="translate(708,8085)" ed:togtopicid="208"><use xlink:href="#minus"/></g><g transform="translate(721,8222)" ed:togtopicid="212"><use xlink:href="#minus"/></g><g transform="translate(682,8353)" ed:togtopicid="214"><use xlink:href="#minus"/></g><g transform="translate(1057,2122)" ed:togtopicid="454"><use xlink:href="#minus"/></g><g transform="translate(605,3248)" ed:togtopicid="484"><use xlink:href="#minus"/></g><g transform="translate(698,2964)" ed:togtopicid="486"><use xlink:href="#minus"/></g><g transform="translate(724,3123)" ed:togtopicid="488"><use xlink:href="#minus"/></g><g transform="translate(737,3283)" ed:togtopicid="490"><use xlink:href="#minus"/></g><g transform="translate(737,3333)" ed:togtopicid="492"><use xlink:href="#minus"/></g><g transform="translate(698,3458)" ed:togtopicid="494"><use xlink:href="#minus"/></g><g transform="translate(925,3408)" ed:togtopicid="506"><use xlink:href="#minus"/></g><g transform="translate(504,3650)" ed:togtopicid="516"><use xlink:href="#minus"/></g><g transform="translate(971,5086)" ed:togtopicid="540"><use xlink:href="#minus"/></g></svg>