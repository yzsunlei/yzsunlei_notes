<svg viewBox="0 0 1491 10927" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" width="1491" ed:hSpacing="30" id="page100" xmlns:ev="http://www.w3.org/2001/xml-events" height="10927" xmlns:ed="https://www.edrawsoft.cn/xml/2017/SVGExtensions/" ed:vSpacing="30" ed:name="Page-1"><style type="text/css"><![CDATA[
g[ed\:togtopicid],g[ed\:hyperlink],g[ed\:comment],g[ed\:note] {cursor:pointer;}
g[id] {-moz-user-select: none;-ms-user-select: none;user-select: none;}
svg text::selection,svg tspan::selection{background-color: #4285f4;color: #ffffff;fill: #ffffff;}
.st2 {fill:#303030;font-family:微软雅黑;font-size:11pt}
.st3 {fill:#454545;font-family:微软雅黑;font-size:9pt}
.st1 {fill:#ffffff;font-family:微软雅黑;font-size:14pt}
]]></style><defs><linearGradient y2="100%" y1="0%" id="lg1" x1="0%" x2="0%"><stop offset="0" stop-color="#ffffff"/><stop offset="0.25" stop-color="#f0f5f0"/><stop offset="0.75" stop-color="#e1ebe1"/><stop offset="1" stop-color="#c8d7c8"/></linearGradient></defs><rect fill="#ffffff" y="0" x="0" width="1491" height="10927"/><path d="M-74.3,2272.3C25.1,1885.8,-81.9,-2300.8,90.3,-2300.8" fill="none" stroke="#696969" id="103" transform="matrix(1,0,0,1,231,3163)" ed:parentid="101" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="102"/><path d="M-70.4,1389.3C22.2,1092.7,-79.6,-1417.8,90.3,-1417.8" fill="none" stroke="#696969" id="105" transform="matrix(1,0,0,1,231,4046)" ed:parentid="101" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="104"/><path d="M-13.5,343.6C5.4,343.6,-13.5,-343.6,13.5,-343.6" fill="none" stroke="#696969" id="107" transform="matrix(1,0,0,1,541,518)" ed:parentid="102" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="106"/><path d="M-13.5,-35.4C4.2,-35.4,-10.8,35.4,13.5,35.4" fill="none" stroke="#696969" id="109" transform="matrix(1,0,0,1,541,897)" ed:parentid="102" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="108"/><path d="M-13.5,-384.6C5.4,-384.6,-13.5,384.6,13.5,384.6" fill="none" stroke="#696969" id="111" transform="matrix(1,0,0,1,541,1246)" ed:parentid="102" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="110"/><path d="M-13.5,354.9C5.4,354.9,-13.5,-354.9,13.5,-354.9" fill="none" stroke="#696969" id="115" transform="matrix(1,0,0,1,492,2273)" ed:parentid="104" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="114"/><path d="M-13.5,121.6C5.4,121.6,-13.5,-121.6,13.5,-121.6" fill="none" stroke="#696969" id="117" transform="matrix(1,0,0,1,492,2506)" ed:parentid="104" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="116"/><path d="M-13.5,-86.1C5.4,-86.1,-13.5,86.1,13.5,86.1" fill="none" stroke="#696969" id="119" transform="matrix(1,0,0,1,492,2714)" ed:parentid="104" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="118"/><path d="M-13.5,-163.6C5.4,-163.6,-13.5,163.6,13.5,163.6" fill="none" stroke="#696969" id="121" transform="matrix(1,0,0,1,492,2791)" ed:parentid="104" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="120"/><path d="M-13.5,-316.4C5.4,-316.4,-13.5,316.4,13.5,316.4" fill="none" stroke="#696969" id="123" transform="matrix(1,0,0,1,492,2944)" ed:parentid="104" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="122"/><path d="M-50.6,218.2C4.8,113.1,-50.8,-246.8,90.3,-246.8" fill="none" stroke="#696969" id="127" transform="matrix(1,0,0,1,231,5217)" ed:parentid="101" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="126"/><path d="M-13.5,558.4C5.4,558.4,-13.5,-558.4,13.5,-558.4" fill="none" stroke="#696969" id="129" transform="matrix(1,0,0,1,552,4411)" ed:parentid="126" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="128"/><path d="M-13.5,365.1C5.4,365.1,-13.5,-365.1,13.5,-365.1" fill="none" stroke="#696969" id="131" transform="matrix(1,0,0,1,552,4605)" ed:parentid="126" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="130"/><path d="M-13.5,227.6C5.4,227.6,-13.5,-227.6,13.5,-227.6" fill="none" stroke="#696969" id="133" transform="matrix(1,0,0,1,552,4742)" ed:parentid="126" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="132"/><path d="M-13.5,-5.6C-1.4,-5.6,2.3,5.6,13.5,5.6" fill="none" stroke="#696969" id="135" transform="matrix(1,0,0,1,552,4975)" ed:parentid="126" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="134"/><path d="M-13.5,-220.1C5.4,-220.1,-13.5,220.1,13.5,220.1" fill="none" stroke="#696969" id="137" transform="matrix(1,0,0,1,552,5190)" ed:parentid="126" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="136"/><path d="M-13.5,-401.9C5.4,-401.9,-13.5,401.9,13.5,401.9" fill="none" stroke="#696969" id="139" transform="matrix(1,0,0,1,552,5372)" ed:parentid="126" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="138"/><path d="M-13.5,-613.9C5.4,-613.9,-13.5,613.9,13.5,613.9" fill="none" stroke="#696969" id="141" transform="matrix(1,0,0,1,552,5584)" ed:parentid="126" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="140"/><path d="M-63.7,-703.7C17.3,-499.6,-75.3,732.3,90.3,732.3" fill="none" stroke="#696969" id="143" transform="matrix(1,0,0,1,231,6196)" ed:parentid="101" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="142"/><path d="M-70.7,-1436.5C22.5,-1134.6,-79.8,1465,90.3,1465" fill="none" stroke="#696969" id="145" transform="matrix(1,0,0,1,231,6928)" ed:parentid="101" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="144"/><path d="M-73.9,-2138.8C24.8,-1764.6,-81.7,2167.3,90.3,2167.3" fill="none" stroke="#696969" id="147" transform="matrix(1,0,0,1,231,7631)" ed:parentid="101" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="146"/><path d="M-75.1,-2535.8C25.6,-2126,-82.4,2564.3,90.3,2564.3" fill="none" stroke="#696969" id="149" transform="matrix(1,0,0,1,231,8028)" ed:parentid="101" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="148"/><path d="M-13.5,191.4C5.4,191.4,-13.5,-191.4,13.5,-191.4" fill="none" stroke="#696969" id="169" transform="matrix(1,0,0,1,537,6736)" ed:parentid="142" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="168"/><path d="M-13.5,27.1C3,27.1,-8,-27.1,13.5,-27.1" fill="none" stroke="#696969" id="171" transform="matrix(1,0,0,1,537,6901)" ed:parentid="142" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="170"/><path d="M-13.5,-138.4C5.4,-138.4,-13.5,138.4,13.5,138.4" fill="none" stroke="#696969" id="173" transform="matrix(1,0,0,1,537,7066)" ed:parentid="142" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="172"/><path d="M-13.5,-229.9C5.4,-229.9,-13.5,229.9,13.5,229.9" fill="none" stroke="#696969" id="175" transform="matrix(1,0,0,1,537,7158)" ed:parentid="142" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="174"/><path d="M-13.5,435.1C5.4,435.1,-13.5,-435.1,13.5,-435.1" fill="none" stroke="#696969" id="177" transform="matrix(1,0,0,1,552,7958)" ed:parentid="144" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="176"/><path d="M-13.5,241.4C5.4,241.4,-13.5,-241.4,13.5,-241.4" fill="none" stroke="#696969" id="179" transform="matrix(1,0,0,1,552,8152)" ed:parentid="144" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="178"/><path d="M-13.5,39.1C4.7,39.1,-11.8,-39.1,13.5,-39.1" fill="none" stroke="#696969" id="181" transform="matrix(1,0,0,1,552,8354)" ed:parentid="144" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="180"/><path d="M-13.5,-69.9C5.4,-69.9,-13.5,69.9,13.5,69.9" fill="none" stroke="#696969" id="183" transform="matrix(1,0,0,1,552,8463)" ed:parentid="144" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="182"/><path d="M-13.5,-220.6C5.4,-220.6,-13.5,220.6,13.5,220.6" fill="none" stroke="#696969" id="185" transform="matrix(1,0,0,1,552,8614)" ed:parentid="144" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="184"/><path d="M-13.5,-347.1C5.4,-347.1,-13.5,347.1,13.5,347.1" fill="none" stroke="#696969" id="187" transform="matrix(1,0,0,1,552,8740)" ed:parentid="144" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="186"/><path d="M-13.5,-434.9C5.4,-434.9,-13.5,434.9,13.5,434.9" fill="none" stroke="#696969" id="189" transform="matrix(1,0,0,1,552,8828)" ed:parentid="144" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="188"/><path d="M-13.5,90.6C5.4,90.6,-13.5,-90.6,13.5,-90.6" fill="none" stroke="#696969" id="191" transform="matrix(1,0,0,1,507,9707)" ed:parentid="146" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="190"/><path d="M-13.5,-134.6C5.4,-134.6,-13.5,134.6,13.5,134.6" fill="none" stroke="#696969" id="193" transform="matrix(1,0,0,1,507,9932)" ed:parentid="146" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="192"/><path d="M-13.5,80.9C5.4,80.9,-13.5,-80.9,13.5,-80.9" fill="none" stroke="#696969" id="197" transform="matrix(1,0,0,1,507,10511)" ed:parentid="148" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="196"/><path d="M-13.5,-77.6C5.4,-77.6,-13.5,77.6,13.5,77.6" fill="none" stroke="#696969" id="199" transform="matrix(1,0,0,1,507,10669)" ed:parentid="148" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="198"/><path d="M-13.5,49C5.3,49,-13.3,-49,13.5,-49" fill="none" stroke="#696969" id="201" transform="matrix(1,0,0,1,644,10381)" ed:parentid="196" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="200"/><path d="M-13.5,14.5C0.6,14.5,-2.3,-14.5,13.5,-14.5" fill="none" stroke="#696969" id="203" transform="matrix(1,0,0,1,644,10416)" ed:parentid="196" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="202"/><path d="M-13.5,-8.5C-0.7,-8.5,0.8,8.5,13.5,8.5" fill="none" stroke="#696969" id="205" transform="matrix(1,0,0,1,644,10439)" ed:parentid="196" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="204"/><path d="M-13.5,-31.5C3.7,-31.5,-9.6,31.5,13.5,31.5" fill="none" stroke="#696969" id="207" transform="matrix(1,0,0,1,644,10462)" ed:parentid="196" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="206"/><path d="M-13.5,-50.3C5.4,-50.3,-13.4,50.3,13.5,50.3" fill="none" stroke="#696969" id="209" transform="matrix(1,0,0,1,644,10480)" ed:parentid="196" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="208"/><path d="M-13.5,-64.8C5.4,-64.8,-13.5,64.8,13.5,64.8" fill="none" stroke="#696969" id="211" transform="matrix(1,0,0,1,644,10495)" ed:parentid="196" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="210"/><path d="M-13.5,79.3C5.4,79.3,-13.5,-79.3,13.5,-79.3" fill="none" stroke="#696969" id="213" transform="matrix(1,0,0,1,704,10668)" ed:parentid="198" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="212"/><path d="M-13.5,64.8C5.4,64.8,-13.5,-64.8,13.5,-64.8" fill="none" stroke="#696969" id="215" transform="matrix(1,0,0,1,704,10682)" ed:parentid="198" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="214"/><path d="M-13.5,50.3C5.4,50.3,-13.4,-50.3,13.5,-50.3" fill="none" stroke="#696969" id="217" transform="matrix(1,0,0,1,704,10697)" ed:parentid="198" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="216"/><path d="M-13.5,20C1.8,20,-5,-20,13.5,-20" fill="none" stroke="#696969" id="219" transform="matrix(1,0,0,1,704,10727)" ed:parentid="198" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="218"/><path d="M-13.5,-21.8C2.1,-21.8,-5.8,21.8,13.5,21.8" fill="none" stroke="#696969" id="221" transform="matrix(1,0,0,1,704,10769)" ed:parentid="198" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="220"/><path d="M-13.5,-47.8C5.3,-47.8,-13.2,47.8,13.5,47.8" fill="none" stroke="#696969" id="223" transform="matrix(1,0,0,1,704,10795)" ed:parentid="198" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="222"/><path d="M-13.5,-70.8C5.4,-70.8,-13.5,70.8,13.5,70.8" fill="none" stroke="#696969" id="225" transform="matrix(1,0,0,1,704,10818)" ed:parentid="198" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="224"/><path d="M-13.5,73.3C5.4,73.3,-13.5,-73.3,13.5,-73.3" fill="none" stroke="#696969" id="227" transform="matrix(1,0,0,1,714,9543)" ed:parentid="190" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="226"/><path d="M-13.5,46C5.2,46,-13,-46,13.5,-46" fill="none" stroke="#696969" id="229" transform="matrix(1,0,0,1,714,9571)" ed:parentid="190" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="228"/><path d="M-13.5,3C-2,3,3.8,-3,13.5,-3" fill="none" stroke="#696969" id="231" transform="matrix(1,0,0,1,714,9614)" ed:parentid="190" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="230"/><path d="M-13.5,-78.8C5.4,-78.8,-13.5,78.8,13.5,78.8" fill="none" stroke="#696969" id="233" transform="matrix(1,0,0,1,714,9695)" ed:parentid="190" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="232"/><path d="M-13.5,89C5.4,89,-13.5,-89,13.5,-89" fill="none" stroke="#696969" id="235" transform="matrix(1,0,0,1,668,9978)" ed:parentid="192" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="234"/><path d="M-13.5,46C5.2,46,-13,-46,13.5,-46" fill="none" stroke="#696969" id="237" transform="matrix(1,0,0,1,668,10021)" ed:parentid="192" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="236"/><path d="M-13.5,-17C1.1,-17,-3.6,17,13.5,17" fill="none" stroke="#696969" id="239" transform="matrix(1,0,0,1,668,10084)" ed:parentid="192" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="238"/><path d="M-13.5,-55.8C5.4,-55.8,-13.5,55.8,13.5,55.8" fill="none" stroke="#696969" id="241" transform="matrix(1,0,0,1,668,10123)" ed:parentid="192" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="240"/><path d="M-13.5,-81.8C5.4,-81.8,-13.5,81.8,13.5,81.8" fill="none" stroke="#696969" id="243" transform="matrix(1,0,0,1,668,10149)" ed:parentid="192" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="242"/><path d="M-13.5,6C-1.3,6,2.1,-6,13.5,-6" fill="none" stroke="#696969" id="245" transform="matrix(1,0,0,1,753,169)" ed:parentid="106" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="244"/><path d="M-13.5,-34C4.1,-34,-10.4,34,13.5,34" fill="none" stroke="#696969" id="247" transform="matrix(1,0,0,1,753,209)" ed:parentid="106" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="246"/><path d="M-13.5,-65.5C5.4,-65.5,-13.5,65.5,13.5,65.5" fill="none" stroke="#696969" id="251" transform="matrix(1,0,0,1,753,240)" ed:parentid="106" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="250"/><path d="M-13.5,163C5.4,163,-13.5,-163,13.5,-163" fill="none" stroke="#696969" id="253" transform="matrix(1,0,0,1,690,770)" ed:parentid="108" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="252"/><path d="M-13.5,63.5C5.4,63.5,-13.5,-63.5,13.5,-63.5" fill="none" stroke="#696969" id="255" transform="matrix(1,0,0,1,690,869)" ed:parentid="108" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="254"/><path d="M-13.5,40.5C4.8,40.5,-12.1,-40.5,13.5,-40.5" fill="none" stroke="#696969" id="257" transform="matrix(1,0,0,1,690,892)" ed:parentid="108" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="256"/><path d="M-13.5,-42C4.9,-42,-12.4,42,13.5,42" fill="none" stroke="#696969" id="259" transform="matrix(1,0,0,1,690,975)" ed:parentid="108" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="258"/><path d="M-13.5,-99C5.4,-99,-13.5,99,13.5,99" fill="none" stroke="#696969" id="261" transform="matrix(1,0,0,1,690,1032)" ed:parentid="108" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="260"/><path d="M-13.5,-122C5.4,-122,-13.5,122,13.5,122" fill="none" stroke="#696969" id="263" transform="matrix(1,0,0,1,690,1055)" ed:parentid="108" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="262"/><path d="M-13.5,-145C5.4,-145,-13.5,145,13.5,145" fill="none" stroke="#696969" id="265" transform="matrix(1,0,0,1,690,1078)" ed:parentid="108" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="264"/><path d="M-13.5,-176.5C5.4,-176.5,-13.5,176.5,13.5,176.5" fill="none" stroke="#696969" id="268" transform="matrix(1,0,0,1,690,1109)" ed:parentid="108" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="267"/><path d="M-13.5,-208C5.4,-208,-13.5,208,13.5,208" fill="none" stroke="#696969" id="270" transform="matrix(1,0,0,1,690,1141)" ed:parentid="108" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="269"/><path d="M-13.5,-299C5.4,-299,-13.5,299,13.5,299" fill="none" stroke="#696969" id="272" transform="matrix(1,0,0,1,690,1232)" ed:parentid="108" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="271"/><path d="M-13.5,35.8C4.3,35.8,-10.9,-35.8,13.5,-35.8" fill="none" stroke="#696969" id="274" transform="matrix(1,0,0,1,702,1595)" ed:parentid="110" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="273"/><path d="M-13.5,12.8C0.2,12.8,-1.5,-12.8,13.5,-12.8" fill="none" stroke="#696969" id="276" transform="matrix(1,0,0,1,702,1618)" ed:parentid="110" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="275"/><path d="M-13.5,-35.8C4.3,-35.8,-10.9,35.8,13.5,35.8" fill="none" stroke="#696969" id="278" transform="matrix(1,0,0,1,702,1667)" ed:parentid="110" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="277"/><path d="M-13.5,54.5C5.4,54.5,-13.5,-54.5,13.5,-54.5" fill="none" stroke="#696969" id="280" transform="matrix(1,0,0,1,635,1864)" ed:parentid="114" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="279"/><path d="M-13.5,31.5C3.7,31.5,-9.6,-31.5,13.5,-31.5" fill="none" stroke="#696969" id="282" transform="matrix(1,0,0,1,635,1887)" ed:parentid="114" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="281"/><path d="M-13.5,0C-2.7,0,5.4,0,13.5,0" fill="none" stroke="#696969" id="284" transform="matrix(1,0,0,1,635,1918)" ed:parentid="114" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="283"/><path d="M-13.5,-31.5C3.7,-31.5,-9.6,31.5,13.5,31.5" fill="none" stroke="#696969" id="286" transform="matrix(1,0,0,1,635,1950)" ed:parentid="114" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="285"/><path d="M-13.5,-80C5.4,-80,-13.5,80,13.5,80" fill="none" stroke="#696969" id="290" transform="matrix(1,0,0,1,635,1998)" ed:parentid="114" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="289"/><path d="M-13.5,121.8C5.4,121.8,-13.5,-121.8,13.5,-121.8" fill="none" stroke="#696969" id="292" transform="matrix(1,0,0,1,632,2263)" ed:parentid="116" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="291"/><path d="M-13.5,98.8C5.4,98.8,-13.5,-98.8,13.5,-98.8" fill="none" stroke="#696969" id="294" transform="matrix(1,0,0,1,632,2286)" ed:parentid="116" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="293"/><path d="M-13.5,41.8C4.9,41.8,-12.3,-41.8,13.5,-41.8" fill="none" stroke="#696969" id="296" transform="matrix(1,0,0,1,632,2343)" ed:parentid="116" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="295"/><path d="M-13.5,10.3C-0.3,10.3,-0.2,-10.3,13.5,-10.3" fill="none" stroke="#696969" id="298" transform="matrix(1,0,0,1,632,2374)" ed:parentid="116" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="297"/><path d="M-13.5,-21.3C2,-21.3,-5.6,21.3,13.5,21.3" fill="none" stroke="#696969" id="300" transform="matrix(1,0,0,1,632,2406)" ed:parentid="116" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="299"/><path d="M-13.5,-35.8C4.3,-35.8,-10.9,35.8,13.5,35.8" fill="none" stroke="#696969" id="302" transform="matrix(1,0,0,1,632,2420)" ed:parentid="116" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="301"/><path d="M-13.5,-75.8C5.4,-75.8,-13.5,75.8,13.5,75.8" fill="none" stroke="#696969" id="304" transform="matrix(1,0,0,1,632,2460)" ed:parentid="116" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="303"/><path d="M-13.5,-115.8C5.4,-115.8,-13.5,115.8,13.5,115.8" fill="none" stroke="#696969" id="306" transform="matrix(1,0,0,1,632,2500)" ed:parentid="116" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="305"/><path d="M-13.5,-138.8C5.4,-138.8,-13.5,138.8,13.5,138.8" fill="none" stroke="#696969" id="308" transform="matrix(1,0,0,1,632,2523)" ed:parentid="116" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="307"/><path d="M-13.5,46C5.2,46,-13,-46,13.5,-46" fill="none" stroke="#696969" id="310" transform="matrix(1,0,0,1,629,2754)" ed:parentid="118" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="309"/><path d="M-13.5,23C2.3,23,-6.3,-23,13.5,-23" fill="none" stroke="#696969" id="312" transform="matrix(1,0,0,1,629,2777)" ed:parentid="118" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="311"/><path d="M-13.5,0C-2.7,0,5.4,0,13.5,0" fill="none" stroke="#696969" id="314" transform="matrix(1,0,0,1,629,2800)" ed:parentid="118" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="313"/><path d="M-13.5,-23C2.3,-23,-6.3,23,13.5,23" fill="none" stroke="#696969" id="316" transform="matrix(1,0,0,1,629,2823)" ed:parentid="118" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="315"/><path d="M-13.5,-54.5C5.4,-54.5,-13.5,54.5,13.5,54.5" fill="none" stroke="#696969" id="318" transform="matrix(1,0,0,1,629,2855)" ed:parentid="118" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="317"/><path d="M-13.5,-8.5C-0.7,-8.5,0.8,8.5,13.5,8.5" fill="none" stroke="#696969" id="320" transform="matrix(1,0,0,1,672,2964)" ed:parentid="120" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="319"/><path d="M-13.5,112.8C5.4,112.8,-13.5,-112.8,13.5,-112.8" fill="none" stroke="#696969" id="323" transform="matrix(1,0,0,1,654,3148)" ed:parentid="122" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="322"/><path d="M-13.5,55.8C5.4,55.8,-13.5,-55.8,13.5,-55.8" fill="none" stroke="#696969" id="325" transform="matrix(1,0,0,1,654,3205)" ed:parentid="122" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="324"/><path d="M-13.5,32.8C3.9,32.8,-10,-32.8,13.5,-32.8" fill="none" stroke="#696969" id="327" transform="matrix(1,0,0,1,654,3228)" ed:parentid="122" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="326"/><path d="M-13.5,-24.3C2.6,-24.3,-6.9,24.3,13.5,24.3" fill="none" stroke="#696969" id="329" transform="matrix(1,0,0,1,654,3285)" ed:parentid="122" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="328"/><path d="M-13.5,-72.8C5.4,-72.8,-13.5,72.8,13.5,72.8" fill="none" stroke="#696969" id="331" transform="matrix(1,0,0,1,654,3333)" ed:parentid="122" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="330"/><path d="M-13.5,-129.8C5.4,-129.8,-13.5,129.8,13.5,129.8" fill="none" stroke="#696969" id="333" transform="matrix(1,0,0,1,654,3390)" ed:parentid="122" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="332"/><path d="M-13.5,138.8C5.4,138.8,-13.5,-138.8,13.5,-138.8" fill="none" stroke="#696969" id="335" transform="matrix(1,0,0,1,711,3714)" ed:parentid="128" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="334"/><path d="M-13.5,73.3C5.4,73.3,-13.5,-73.3,13.5,-73.3" fill="none" stroke="#696969" id="337" transform="matrix(1,0,0,1,711,3780)" ed:parentid="128" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="336"/><path d="M-13.5,33.3C4,33.3,-10.2,-33.3,13.5,-33.3" fill="none" stroke="#696969" id="339" transform="matrix(1,0,0,1,711,3820)" ed:parentid="128" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="338"/><path d="M-13.5,10.3C-0.3,10.3,-0.2,-10.3,13.5,-10.3" fill="none" stroke="#696969" id="341" transform="matrix(1,0,0,1,711,3843)" ed:parentid="128" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="340"/><path d="M-13.5,-29.8C3.5,-29.8,-9,29.8,13.5,29.8" fill="none" stroke="#696969" id="343" transform="matrix(1,0,0,1,711,3883)" ed:parentid="128" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="342"/><path d="M-13.5,-44.3C5.1,-44.3,-12.7,44.3,13.5,44.3" fill="none" stroke="#696969" id="345" transform="matrix(1,0,0,1,711,3897)" ed:parentid="128" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="344"/><path d="M-13.5,-75.8C5.4,-75.8,-13.5,75.8,13.5,75.8" fill="none" stroke="#696969" id="347" transform="matrix(1,0,0,1,711,3929)" ed:parentid="128" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="346"/><path d="M-13.5,-98.8C5.4,-98.8,-13.5,98.8,13.5,98.8" fill="none" stroke="#696969" id="349" transform="matrix(1,0,0,1,711,3952)" ed:parentid="128" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="348"/><path d="M-13.5,-138.8C5.4,-138.8,-13.5,138.8,13.5,138.8" fill="none" stroke="#696969" id="351" transform="matrix(1,0,0,1,711,3992)" ed:parentid="128" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="350"/><path d="M-13.5,31.5C3.7,31.5,-9.6,-31.5,13.5,-31.5" fill="none" stroke="#696969" id="353" transform="matrix(1,0,0,1,701,4208)" ed:parentid="130" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="352"/><path d="M-13.5,0C-2.7,0,5.4,0,13.5,0" fill="none" stroke="#696969" id="355" transform="matrix(1,0,0,1,701,4240)" ed:parentid="130" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="354"/><path d="M-13.5,-40C4.7,-40,-12,40,13.5,40" fill="none" stroke="#696969" id="357" transform="matrix(1,0,0,1,701,4280)" ed:parentid="130" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="356"/><path d="M-13.5,49C5.3,49,-13.3,-49,13.5,-49" fill="none" stroke="#696969" id="360" transform="matrix(1,0,0,1,725,4466)" ed:parentid="132" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="359"/><path d="M-13.5,0.5C-2.7,0.5,5.4,-0.5,13.5,-0.5" fill="none" stroke="#696969" id="362" transform="matrix(1,0,0,1,725,4514)" ed:parentid="132" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="361"/><path d="M-13.5,-14C0.5,-14,-2.1,14,13.5,14" fill="none" stroke="#696969" id="364" transform="matrix(1,0,0,1,725,4529)" ed:parentid="132" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="363"/><path d="M-13.5,-37C4.4,-37,-11.2,37,13.5,37" fill="none" stroke="#696969" id="366" transform="matrix(1,0,0,1,725,4552)" ed:parentid="132" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="365"/><path d="M-13.5,-60C5.4,-60,-13.5,60,13.5,60" fill="none" stroke="#696969" id="368" transform="matrix(1,0,0,1,725,4575)" ed:parentid="132" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="367"/><path d="M-13.5,-83C5.4,-83,-13.5,83,13.5,83" fill="none" stroke="#696969" id="370" transform="matrix(1,0,0,1,725,4598)" ed:parentid="132" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="369"/><path d="M-13.5,118.8C5.4,118.8,-13.5,-118.8,13.5,-118.8" fill="none" stroke="#696969" id="372" transform="matrix(1,0,0,1,723,4862)" ed:parentid="134" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="371"/><path d="M-13.5,95.8C5.4,95.8,-13.5,-95.8,13.5,-95.8" fill="none" stroke="#696969" id="374" transform="matrix(1,0,0,1,723,4885)" ed:parentid="134" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="373"/><path d="M-13.5,47.3C5.2,47.3,-13.1,-47.3,13.5,-47.3" fill="none" stroke="#696969" id="376" transform="matrix(1,0,0,1,723,4934)" ed:parentid="134" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="375"/><path d="M-13.5,-1.3C-2.7,-1.3,5.4,1.3,13.5,1.3" fill="none" stroke="#696969" id="378" transform="matrix(1,0,0,1,723,4982)" ed:parentid="134" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="377"/><path d="M-13.5,-41.3C4.8,-41.3,-12.2,41.3,13.5,41.3" fill="none" stroke="#696969" id="380" transform="matrix(1,0,0,1,723,5022)" ed:parentid="134" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="379"/><path d="M-13.5,-81.3C5.4,-81.3,-13.5,81.3,13.5,81.3" fill="none" stroke="#696969" id="382" transform="matrix(1,0,0,1,723,5062)" ed:parentid="134" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="381"/><path d="M-13.5,-112.8C5.4,-112.8,-13.5,112.8,13.5,112.8" fill="none" stroke="#696969" id="384" transform="matrix(1,0,0,1,723,5094)" ed:parentid="134" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="383"/><path d="M-13.5,-135.8C5.4,-135.8,-13.5,135.8,13.5,135.8" fill="none" stroke="#696969" id="386" transform="matrix(1,0,0,1,723,5117)" ed:parentid="134" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="385"/><path d="M-13.5,38.8C4.6,38.8,-11.7,-38.8,13.5,-38.8" fill="none" stroke="#696969" id="388" transform="matrix(1,0,0,1,701,5371)" ed:parentid="136" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="387"/><path d="M-13.5,-9.8C-0.4,-9.8,0.1,9.8,13.5,9.8" fill="none" stroke="#696969" id="390" transform="matrix(1,0,0,1,701,5420)" ed:parentid="136" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="389"/><path d="M-13.5,-41.3C4.8,-41.3,-12.2,41.3,13.5,41.3" fill="none" stroke="#696969" id="392" transform="matrix(1,0,0,1,701,5451)" ed:parentid="136" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="391"/><path d="M-13.5,-64.3C5.4,-64.3,-13.5,64.3,13.5,64.3" fill="none" stroke="#696969" id="394" transform="matrix(1,0,0,1,701,5474)" ed:parentid="136" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="393"/><path d="M-13.5,86C5.4,86,-13.5,-86,13.5,-86" fill="none" stroke="#696969" id="410" transform="matrix(1,0,0,1,689,5688)" ed:parentid="138" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="409"/><path d="M-13.5,40C4.7,40,-12,-40,13.5,-40" fill="none" stroke="#696969" id="412" transform="matrix(1,0,0,1,689,5734)" ed:parentid="138" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="411"/><path d="M-13.5,8.5C-0.7,8.5,0.8,-8.5,13.5,-8.5" fill="none" stroke="#696969" id="414" transform="matrix(1,0,0,1,689,5765)" ed:parentid="138" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="413"/><path d="M-13.5,-23C2.3,-23,-6.3,23,13.5,23" fill="none" stroke="#696969" id="416" transform="matrix(1,0,0,1,689,5797)" ed:parentid="138" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="415"/><path d="M-13.5,-71.5C5.4,-71.5,-13.5,71.5,13.5,71.5" fill="none" stroke="#696969" id="418" transform="matrix(1,0,0,1,689,5845)" ed:parentid="138" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="417"/><path d="M-13.5,-103C5.4,-103,-13.5,103,13.5,103" fill="none" stroke="#696969" id="420" transform="matrix(1,0,0,1,689,5877)" ed:parentid="138" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="419"/><path d="M-13.5,63C5.4,63,-13.5,-63,13.5,-63" fill="none" stroke="#696969" id="433" transform="matrix(1,0,0,1,689,5711)" ed:parentid="138" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="432"/><path d="M-13.5,69C5.4,69,-13.5,-69,13.5,-69" fill="none" stroke="#696969" id="436" transform="matrix(1,0,0,1,725,6129)" ed:parentid="140" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="435"/><path d="M-13.5,37.5C4.5,37.5,-11.4,-37.5,13.5,-37.5" fill="none" stroke="#696969" id="438" transform="matrix(1,0,0,1,725,6160)" ed:parentid="140" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="437"/><path d="M-13.5,14.5C0.6,14.5,-2.3,-14.5,13.5,-14.5" fill="none" stroke="#696969" id="440" transform="matrix(1,0,0,1,725,6183)" ed:parentid="140" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="439"/><path d="M-13.5,0C-2.7,0,5.4,0,13.5,0" fill="none" stroke="#696969" id="442" transform="matrix(1,0,0,1,725,6198)" ed:parentid="140" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="441"/><path d="M-13.5,-31.5C3.7,-31.5,-9.6,31.5,13.5,31.5" fill="none" stroke="#696969" id="444" transform="matrix(1,0,0,1,725,6229)" ed:parentid="140" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="443"/><path d="M-13.5,-63C5.4,-63,-13.5,63,13.5,63" fill="none" stroke="#696969" id="446" transform="matrix(1,0,0,1,725,6261)" ed:parentid="140" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="445"/><path d="M-13.5,-94.5C5.4,-94.5,-13.5,94.5,13.5,94.5" fill="none" stroke="#696969" id="448" transform="matrix(1,0,0,1,725,6292)" ed:parentid="140" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="447"/><path d="M-13.5,43C5,43,-12.5,-43,13.5,-43" fill="none" stroke="#696969" id="450" transform="matrix(1,0,0,1,705,6502)" ed:parentid="168" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="449"/><path d="M-13.5,20C1.8,20,-5,-20,13.5,-20" fill="none" stroke="#696969" id="452" transform="matrix(1,0,0,1,705,6525)" ed:parentid="168" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="451"/><path d="M-13.5,-3C-2,-3,3.8,3,13.5,3" fill="none" stroke="#696969" id="454" transform="matrix(1,0,0,1,705,6548)" ed:parentid="168" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="453"/><path d="M-13.5,-51.5C5.4,-51.5,-13.5,51.5,13.5,51.5" fill="none" stroke="#696969" id="456" transform="matrix(1,0,0,1,705,6597)" ed:parentid="168" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="455"/><path d="M-13.5,72.8C5.4,72.8,-13.5,-72.8,13.5,-72.8" fill="none" stroke="#696969" id="458" transform="matrix(1,0,0,1,675,6801)" ed:parentid="170" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="457"/><path d="M-13.5,32.8C3.9,32.8,-10,-32.8,13.5,-32.8" fill="none" stroke="#696969" id="460" transform="matrix(1,0,0,1,675,6841)" ed:parentid="170" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="459"/><path d="M-13.5,1.3C-2.7,1.3,5.4,-1.3,13.5,-1.3" fill="none" stroke="#696969" id="462" transform="matrix(1,0,0,1,675,6872)" ed:parentid="170" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="461"/><path d="M-13.5,-98.3C5.4,-98.3,-13.5,98.3,13.5,98.3" fill="none" stroke="#696969" id="464" transform="matrix(1,0,0,1,675,6972)" ed:parentid="170" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="463"/><path d="M-13.5,18.8C1.5,18.8,-4.4,-18.8,13.5,-18.8" fill="none" stroke="#696969" id="466" transform="matrix(1,0,0,1,722,7186)" ed:parentid="172" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="465"/><path d="M-13.5,-21.3C2,-21.3,-5.6,21.3,13.5,21.3" fill="none" stroke="#696969" id="468" transform="matrix(1,0,0,1,722,7226)" ed:parentid="172" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="467"/><path d="M-13.5,-52.8C5.4,-52.8,-13.5,52.8,13.5,52.8" fill="none" stroke="#696969" id="470" transform="matrix(1,0,0,1,722,7257)" ed:parentid="172" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="469"/><path d="M-13.5,15.8C0.9,15.8,-3,-15.8,13.5,-15.8" fill="none" stroke="#696969" id="472" transform="matrix(1,0,0,1,685,7372)" ed:parentid="174" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="471"/><path d="M-13.5,-24.3C2.6,-24.3,-6.9,24.3,13.5,24.3" fill="none" stroke="#696969" id="474" transform="matrix(1,0,0,1,685,7412)" ed:parentid="174" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="473"/><path d="M-13.5,7.3C-1,7.3,1.4,-7.3,13.5,-7.3" fill="none" stroke="#696969" id="476" transform="matrix(1,0,0,1,689,7516)" ed:parentid="176" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="475"/><path d="M-13.5,-15.8C0.9,-15.8,-3,15.8,13.5,15.8" fill="none" stroke="#696969" id="478" transform="matrix(1,0,0,1,689,7539)" ed:parentid="176" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="477"/><path d="M-13.5,146.5C5.4,146.5,-13.5,-146.5,13.5,-146.5" fill="none" stroke="#696969" id="480" transform="matrix(1,0,0,1,689,7764)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="479"/><path d="M-13.5,123.5C5.4,123.5,-13.5,-123.5,13.5,-123.5" fill="none" stroke="#696969" id="482" transform="matrix(1,0,0,1,689,7787)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="481"/><path d="M-13.5,100.5C5.4,100.5,-13.5,-100.5,13.5,-100.5" fill="none" stroke="#696969" id="484" transform="matrix(1,0,0,1,689,7810)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="483"/><path d="M-13.5,77.5C5.4,77.5,-13.5,-77.5,13.5,-77.5" fill="none" stroke="#696969" id="486" transform="matrix(1,0,0,1,689,7833)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="485"/><path d="M-13.5,37.5C4.5,37.5,-11.4,-37.5,13.5,-37.5" fill="none" stroke="#696969" id="489" transform="matrix(1,0,0,1,689,7873)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="488"/><path d="M-13.5,14.5C0.6,14.5,-2.3,-14.5,13.5,-14.5" fill="none" stroke="#696969" id="491" transform="matrix(1,0,0,1,689,7896)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="490"/><path d="M-13.5,-8.5C-0.7,-8.5,0.8,8.5,13.5,8.5" fill="none" stroke="#696969" id="493" transform="matrix(1,0,0,1,689,7919)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="492"/><path d="M-13.5,-31.5C3.7,-31.5,-9.6,31.5,13.5,31.5" fill="none" stroke="#696969" id="495" transform="matrix(1,0,0,1,689,7942)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="494"/><path d="M-13.5,-86C5.4,-86,-13.5,86,13.5,86" fill="none" stroke="#696969" id="497" transform="matrix(1,0,0,1,689,7997)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="496"/><path d="M-13.5,-63C5.4,-63,-13.5,63,13.5,63" fill="none" stroke="#696969" id="499" transform="matrix(1,0,0,1,689,7974)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="498"/><path d="M-13.5,-109C5.4,-109,-13.5,109,13.5,109" fill="none" stroke="#696969" id="501" transform="matrix(1,0,0,1,689,8020)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="500"/><path d="M-13.5,-132C5.4,-132,-13.5,132,13.5,132" fill="none" stroke="#696969" id="503" transform="matrix(1,0,0,1,689,8043)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="502"/><path d="M-13.5,-163.5C5.4,-163.5,-13.5,163.5,13.5,163.5" fill="none" stroke="#696969" id="505" transform="matrix(1,0,0,1,689,8074)" ed:parentid="178" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="504"/><path d="M-13.5,7.3C-1,7.3,1.4,-7.3,13.5,-7.3" fill="none" stroke="#696969" id="507" transform="matrix(1,0,0,1,677,8308)" ed:parentid="180" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="506"/><path d="M-13.5,-24.3C2.6,-24.3,-6.9,24.3,13.5,24.3" fill="none" stroke="#696969" id="509" transform="matrix(1,0,0,1,677,8339)" ed:parentid="180" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="508"/><path d="M-13.5,61.8C5.4,61.8,-13.5,-61.8,13.5,-61.8" fill="none" stroke="#696969" id="511" transform="matrix(1,0,0,1,689,8471)" ed:parentid="182" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="510"/><path d="M-13.5,38.8C4.6,38.8,-11.7,-38.8,13.5,-38.8" fill="none" stroke="#696969" id="513" transform="matrix(1,0,0,1,689,8494)" ed:parentid="182" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="512"/><path d="M-13.5,7.3C-1,7.3,1.4,-7.3,13.5,-7.3" fill="none" stroke="#696969" id="515" transform="matrix(1,0,0,1,689,8526)" ed:parentid="182" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="514"/><path d="M-13.5,-24.3C2.6,-24.3,-6.9,24.3,13.5,24.3" fill="none" stroke="#696969" id="517" transform="matrix(1,0,0,1,689,8557)" ed:parentid="182" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="516"/><path d="M-13.5,-47.3C5.2,-47.3,-13.1,47.3,13.5,47.3" fill="none" stroke="#696969" id="519" transform="matrix(1,0,0,1,689,8580)" ed:parentid="182" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="518"/><path d="M-13.5,-70.3C5.4,-70.3,-13.5,70.3,13.5,70.3" fill="none" stroke="#696969" id="521" transform="matrix(1,0,0,1,689,8603)" ed:parentid="182" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="520"/><path d="M-13.5,57.5C5.4,57.5,-13.5,-57.5,13.5,-57.5" fill="none" stroke="#696969" id="525" transform="matrix(1,0,0,1,713,8777)" ed:parentid="184" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="524"/><path d="M-13.5,43C5,43,-12.5,-43,13.5,-43" fill="none" stroke="#696969" id="527" transform="matrix(1,0,0,1,713,8792)" ed:parentid="184" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="526"/><path d="M-13.5,20C1.8,20,-5,-20,13.5,-20" fill="none" stroke="#696969" id="529" transform="matrix(1,0,0,1,713,8815)" ed:parentid="184" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="528"/><path d="M-13.5,-3C-2,-3,3.8,3,13.5,3" fill="none" stroke="#696969" id="531" transform="matrix(1,0,0,1,713,8838)" ed:parentid="184" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="530"/><path d="M-13.5,-26C2.9,-26,-7.6,26,13.5,26" fill="none" stroke="#696969" id="533" transform="matrix(1,0,0,1,713,8861)" ed:parentid="184" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="532"/><path d="M-13.5,-66C5.4,-66,-13.5,66,13.5,66" fill="none" stroke="#696969" id="535" transform="matrix(1,0,0,1,713,8901)" ed:parentid="184" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="534"/><path d="M-13.5,37.5C4.5,37.5,-11.4,-37.5,13.5,-37.5" fill="none" stroke="#696969" id="537" transform="matrix(1,0,0,1,737,9050)" ed:parentid="186" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="536"/><path d="M-13.5,14.5C0.6,14.5,-2.3,-14.5,13.5,-14.5" fill="none" stroke="#696969" id="539" transform="matrix(1,0,0,1,737,9073)" ed:parentid="186" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="538"/><path d="M-13.5,0C-2.7,0,5.4,0,13.5,0" fill="none" stroke="#696969" id="541" transform="matrix(1,0,0,1,737,9088)" ed:parentid="186" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="540"/><path d="M-13.5,-23C2.3,-23,-6.3,23,13.5,23" fill="none" stroke="#696969" id="543" transform="matrix(1,0,0,1,737,9111)" ed:parentid="186" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="542"/><path d="M-13.5,-46C5.2,-46,-13,46,13.5,46" fill="none" stroke="#696969" id="545" transform="matrix(1,0,0,1,737,9134)" ed:parentid="186" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="544"/><path d="M-13.5,10.3C-0.3,10.3,-0.2,-10.3,13.5,-10.3" fill="none" stroke="#696969" id="547" transform="matrix(1,0,0,1,665,9253)" ed:parentid="188" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="546"/><path d="M-13.5,-12.8C0.2,-12.8,-1.5,12.8,13.5,12.8" fill="none" stroke="#696969" id="549" transform="matrix(1,0,0,1,665,9276)" ed:parentid="188" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="548"/><path d="M-13.5,-27.3C3.1,-27.3,-8.1,27.3,13.5,27.3" fill="none" stroke="#696969" id="551" transform="matrix(1,0,0,1,665,9290)" ed:parentid="188" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="550"/><path d="M-13.5,96.3C5.4,96.3,-13.5,-96.3,13.5,-96.3" fill="none" stroke="#696969" id="557" transform="matrix(1,0,0,1,714,9520)" ed:parentid="190" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="556"/><path d="M-13.5,-8.5C-0.7,-8.5,0.8,8.5,13.5,8.5" fill="none" stroke="#696969" id="559" transform="matrix(1,0,0,1,874,9479)" ed:parentid="226" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="558"/><path d="M-13.5,-4.3C-1.7,-4.3,3.1,4.3,13.5,4.3" fill="none" stroke="#696969" id="561" transform="matrix(1,0,0,1,854,9529)" ed:parentid="228" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="560"/><path d="M-13.5,7.3C-1,7.3,1.4,-7.3,13.5,-7.3" fill="none" stroke="#696969" id="563" transform="matrix(1,0,0,1,874,9603)" ed:parentid="230" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="562"/><path d="M-13.5,-24.3C2.6,-24.3,-6.9,24.3,13.5,24.3" fill="none" stroke="#696969" id="565" transform="matrix(1,0,0,1,874,9635)" ed:parentid="230" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="564"/><path d="M-13.5,43C5,43,-12.5,-43,13.5,-43" fill="none" stroke="#696969" id="567" transform="matrix(1,0,0,1,829,9731)" ed:parentid="232" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="566"/><path d="M-13.5,3C-2,3,3.8,-3,13.5,-3" fill="none" stroke="#696969" id="569" transform="matrix(1,0,0,1,829,9771)" ed:parentid="232" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="568"/><path d="M-13.5,-20C1.8,-20,-5,20,13.5,20" fill="none" stroke="#696969" id="571" transform="matrix(1,0,0,1,829,9794)" ed:parentid="232" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="570"/><path d="M-13.5,-43C5,-43,-12.5,43,13.5,43" fill="none" stroke="#696969" id="573" transform="matrix(1,0,0,1,829,9817)" ed:parentid="232" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="572"/><path d="M-13.5,0C-2.7,0,5.4,0,13.5,0" fill="none" stroke="#696969" id="575" transform="matrix(1,0,0,1,810,9889)" ed:parentid="234" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="574"/><path d="M-13.5,20C1.8,20,-5,-20,13.5,-20" fill="none" stroke="#696969" id="577" transform="matrix(1,0,0,1,810,9955)" ed:parentid="236" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="576"/><path d="M-13.5,-28.5C3.3,-28.5,-8.5,28.5,13.5,28.5" fill="none" stroke="#696969" id="579" transform="matrix(1,0,0,1,810,10004)" ed:parentid="236" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="578"/><path d="M-13.5,11.5C-0,11.5,-0.8,-11.5,13.5,-11.5" fill="none" stroke="#696969" id="581" transform="matrix(1,0,0,1,940,10090)" ed:parentid="238" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="580"/><path d="M-13.5,-20C1.8,-20,-5,20,13.5,20" fill="none" stroke="#696969" id="583" transform="matrix(1,0,0,1,940,10121)" ed:parentid="238" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="582"/><path d="M-13.5,-4.3C-1.7,-4.3,3.1,4.3,13.5,4.3" fill="none" stroke="#696969" id="585" transform="matrix(1,0,0,1,943,10183)" ed:parentid="240" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="584"/><path d="M-13.5,7.3C-1,7.3,1.4,-7.3,13.5,-7.3" fill="none" stroke="#696969" id="589" transform="matrix(1,0,0,1,807,10223)" ed:parentid="242" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="588"/><path d="M-13.5,-7.3C-1,-7.3,1.4,7.3,13.5,7.3" fill="none" stroke="#696969" id="591" transform="matrix(1,0,0,1,807,10238)" ed:parentid="242" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="590"/><path d="M-13.5,7.3C-1,7.3,1.4,-7.3,13.5,-7.3" fill="none" stroke="#696969" id="593" transform="matrix(1,0,0,1,807,10325)" ed:parentid="200" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="592"/><path d="M-13.5,-15.8C0.9,-15.8,-3,15.8,13.5,15.8" fill="none" stroke="#696969" id="595" transform="matrix(1,0,0,1,807,10348)" ed:parentid="200" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="594"/><path d="M-13.5,-4.3C-1.7,-4.3,3.1,4.3,13.5,4.3" fill="none" stroke="#696969" id="597" transform="matrix(1,0,0,1,927,10405)" ed:parentid="202" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="596"/><path d="M-13.5,-4.3C-1.7,-4.3,3.1,4.3,13.5,4.3" fill="none" stroke="#696969" id="601" transform="matrix(1,0,0,1,831,10451)" ed:parentid="204" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="600"/><path d="M-13.5,-4.3C-1.7,-4.3,3.1,4.3,13.5,4.3" fill="none" stroke="#696969" id="603" transform="matrix(1,0,0,1,831,10497)" ed:parentid="206" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="602"/><path d="M-13.5,0C-2.7,0,5.4,0,13.5,0" fill="none" stroke="#696969" id="609" transform="matrix(1,0,0,1,795,10560)" ed:parentid="210" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="608"/><path d="M-13.5,0C-2.7,0,5.4,0,13.5,0" fill="none" stroke="#696969" id="611" transform="matrix(1,0,0,1,843,10647)" ed:parentid="216" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="610"/><path d="M-13.5,15.8C0.9,15.8,-3,-15.8,13.5,-15.8" fill="none" stroke="#696969" id="613" transform="matrix(1,0,0,1,903,10691)" ed:parentid="218" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="612"/><path d="M-13.5,-15.8C0.9,-15.8,-3,15.8,13.5,15.8" fill="none" stroke="#696969" id="615" transform="matrix(1,0,0,1,903,10723)" ed:parentid="218" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="614"/><path d="M-13.5,11.5C-0,11.5,-0.8,-11.5,13.5,-11.5" fill="none" stroke="#696969" id="617" transform="matrix(1,0,0,1,903,10779)" ed:parentid="220" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="616"/><path d="M-13.5,-11.5C-0,-11.5,-0.8,11.5,13.5,11.5" fill="none" stroke="#696969" id="619" transform="matrix(1,0,0,1,903,10802)" ed:parentid="220" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="618"/><path d="M-13.5,0C-2.7,0,5.4,0,13.5,0" fill="none" stroke="#696969" id="621" transform="matrix(1,0,0,1,855,10843)" ed:parentid="222" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="620"/><path d="M-13.5,-8.5C-0.7,-8.5,0.8,8.5,13.5,8.5" fill="none" stroke="#696969" id="623" transform="matrix(1,0,0,1,867,10897)" ed:parentid="224" stroke-linejoin="round" stroke-linecap="round" ed:tosuperid="622"/><g ed:topictype="mainidea" ed:width="235" id="101" transform="matrix(1,0,0,1,23,5435)" ed:height="57" ed:layout="rightmap"><path fill="#435fbc" d="M4,0L231,0C233.7,0,235,1.3,235,4L235,53C235,55.7,233.7,57,231,57L4,57C1.3,57,0,55.7,0,53L0,4C0,1.3,1.3,0,4,0z" stroke="#435fbc" stroke-linejoin="round" stroke-width="3"/><text class="st1"><tspan y="34.5" x="21" style="white-space:pre">《现代前端技术解析》</tspan></text></g><g ed:width="206" id="102" transform="matrix(1,0,0,1,321,844)" ed:parentid="101" ed:height="36"><path fill="#ebecf3" d="M4,0L202,0C204.7,0,206,1.3,206,4L206,32C206,34.7,204.7,36,202,36L4,36C1.3,36,0,34.7,0,32L0,4C0,1.3,1.3,0,4,0z" stroke="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan y="22.5" x="18" style="white-space:pre">第1章 Web前端技术基础</tspan></text></g><g ed:width="157" id="104" transform="matrix(1,0,0,1,321,2610)" ed:parentid="101" ed:height="36"><path fill="#ebecf3" d="M4,0L153,0C155.7,0,157,1.3,157,4L157,32C157,34.7,155.7,36,153,36L4,36C1.3,36,0,34.7,0,32L0,4C0,1.3,1.3,0,4,0z" stroke="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan y="22.5" x="18" style="white-space:pre">第2章 前端与协议</tspan></text></g><g ed:width="185" id="106" transform="matrix(1,0,0,1,554,152)" ed:parentid="102" ed:height="22.5"><path d="M0,22.5L185,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">1.1.现代Web前端技术发展概述</tspan></text></g><g ed:width="122" id="108" transform="matrix(1,0,0,1,554,910)" ed:parentid="102" ed:height="22.5"><path d="M0,22.5L122,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">1.2.浏览器应用基础</tspan></text></g><g ed:width="134" id="110" transform="matrix(1,0,0,1,554,1609)" ed:parentid="102" ed:height="22.5"><path d="M0,22.5L134,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">1.3.前端高效开发技术</tspan></text></g><g ed:width="116" id="114" transform="matrix(1,0,0,1,505,1896)" ed:parentid="104" ed:height="22.5"><path d="M0,22.5L116,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">2.1.HTTP协议简介</tspan></text></g><g ed:width="113" id="116" transform="matrix(1,0,0,1,505,2362)" ed:parentid="104" ed:height="22.5"><path d="M0,22.5L113,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">2.2.Web安全机制</tspan></text></g><g ed:width="110" id="118" transform="matrix(1,0,0,1,505,2778)" ed:parentid="104" ed:height="22.5"><path d="M0,22.5L110,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">2.3.前端实时协议</tspan></text></g><g ed:width="153" id="120" transform="matrix(1,0,0,1,505,2933)" ed:parentid="104" ed:height="22.5"><path d="M0,22.5L153,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">2.4.RESTful数据协议规范</tspan></text></g><g ed:width="135" id="122" transform="matrix(1,0,0,1,505,3238)" ed:parentid="104" ed:height="22.5"><path d="M0,22.5L135,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">2.5.与Native交互协议</tspan></text></g><g ed:width="217" id="126" transform="matrix(1,0,0,1,321,4952)" ed:parentid="101" ed:height="36"><path fill="#ebecf3" d="M4,0L213,0C215.7,0,217,1.3,217,4L217,32C217,34.7,215.7,36,213,36L4,36C1.3,36,0,34.7,0,32L0,4C0,1.3,1.3,0,4,0z" stroke="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan y="22.5" x="18" style="white-space:pre">第3章 前端三层结构与应用</tspan></text></g><g ed:width="132" id="128" transform="matrix(1,0,0,1,565,3831)" ed:parentid="126" ed:height="22.5"><path d="M0,22.5L132,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">3.1.HTML结构层基础</tspan></text></g><g ed:width="122" id="130" transform="matrix(1,0,0,1,565,4217)" ed:parentid="126" ed:height="22.5"><path d="M0,22.5L122,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">3.2.前端结构层演进</tspan></text></g><g ed:width="146" id="132" transform="matrix(1,0,0,1,565,4492)" ed:parentid="126" ed:height="22.5"><path d="M0,22.5L146,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">3.3.浏览器脚本演进历史</tspan></text></g><g ed:width="144" id="134" transform="matrix(1,0,0,1,565,4959)" ed:parentid="126" ed:height="22.5"><path d="M0,22.5L144,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">3.4.JavaScript标准实践</tspan></text></g><g ed:width="122" id="136" transform="matrix(1,0,0,1,565,5388)" ed:parentid="126" ed:height="22.5"><path d="M0,22.5L122,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">3.5.前端表现层基础</tspan></text></g><g ed:width="110" id="138" transform="matrix(1,0,0,1,565,5751)" ed:parentid="126" ed:height="22.5"><path d="M0,22.5L110,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">3.6.前端界面技术</tspan></text></g><g ed:width="146" id="140" transform="matrix(1,0,0,1,565,6175)" ed:parentid="126" ed:height="22.5"><path d="M0,22.5L146,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">3.7.响应式网站开发技术</tspan></text></g><g ed:width="202" id="142" transform="matrix(1,0,0,1,321,6910)" ed:parentid="101" ed:height="36"><path fill="#ebecf3" d="M4,0L198,0C200.7,0,202,1.3,202,4L202,32C202,34.7,200.7,36,198,36L4,36C1.3,36,0,34.7,0,32L0,4C0,1.3,1.3,0,4,0z" stroke="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan y="22.5" x="18" style="white-space:pre">第4章 现代前端交互框架</tspan></text></g><g ed:width="217" id="144" transform="matrix(1,0,0,1,321,8375)" ed:parentid="101" ed:height="36"><path fill="#ebecf3" d="M4,0L213,0C215.7,0,217,1.3,217,4L217,32C217,34.7,215.7,36,213,36L4,36C1.3,36,0,34.7,0,32L0,4C0,1.3,1.3,0,4,0z" stroke="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan y="22.5" x="18" style="white-space:pre">第5章 前端项目与技术实践</tspan></text></g><g ed:width="172" id="146" transform="matrix(1,0,0,1,321,9780)" ed:parentid="101" ed:height="36"><path fill="#ebecf3" d="M4,0L168,0C170.7,0,172,1.3,172,4L172,32C172,34.7,170.7,36,168,36L4,36C1.3,36,0,34.7,0,32L0,4C0,1.3,1.3,0,4,0z" stroke="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan y="22.5" x="18" style="white-space:pre">第6章 前端跨栈技术</tspan></text></g><g ed:width="172" id="148" transform="matrix(1,0,0,1,321,10574)" ed:parentid="101" ed:height="36"><path fill="#ebecf3" d="M4,0L168,0C170.7,0,172,1.3,172,4L172,32C172,34.7,170.7,36,168,36L4,36C1.3,36,0,34.7,0,32L0,4C0,1.3,1.3,0,4,0z" stroke="#ebecf3" stroke-linejoin="round"/><text class="st2"><tspan y="22.5" x="18" style="white-space:pre">第7章 未来前端时代</tspan></text></g><g ed:width="141" id="168" transform="matrix(1,0,0,1,550,6523)" ed:parentid="142" ed:height="22.5"><path d="M0,22.5L141,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">4.1.直接DOM操作时代</tspan></text></g><g ed:width="111" id="170" transform="matrix(1,0,0,1,550,6851)" ed:parentid="142" ed:height="22.5"><path d="M0,22.5L111,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">4.2.MV*交互模式</tspan></text></g><g ed:width="158" id="172" transform="matrix(1,0,0,1,550,7182)" ed:parentid="142" ed:height="22.5"><path d="M0,22.5L158,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">4.3.Virtual DOM交互模式</tspan></text></g><g ed:width="121" id="174" transform="matrix(1,0,0,1,550,7365)" ed:parentid="142" ed:height="22.5"><path d="M0,22.5L121,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">4.4.前端MNV*时代</tspan></text></g><g ed:width="110" id="176" transform="matrix(1,0,0,1,565,7501)" ed:parentid="144" ed:height="22.5"><path d="M0,22.5L110,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">5.1.前端开发规范</tspan></text></g><g ed:width="110" id="178" transform="matrix(1,0,0,1,565,7888)" ed:parentid="144" ed:height="22.5"><path d="M0,22.5L110,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">5.2.前端组件规范</tspan></text></g><g ed:width="98" id="180" transform="matrix(1,0,0,1,565,8293)" ed:parentid="144" ed:height="22.5"><path d="M0,22.5L98,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">5.3.自动化构建</tspan></text></g><g ed:width="110" id="182" transform="matrix(1,0,0,1,565,8511)" ed:parentid="144" ed:height="22.5"><path d="M0,22.5L110,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">5.4.前端性能优化</tspan></text></g><g ed:width="134" id="184" transform="matrix(1,0,0,1,565,8812)" ed:parentid="144" ed:height="22.5"><path d="M0,22.5L134,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">5.5.前端用户数据分析</tspan></text></g><g ed:width="158" id="186" transform="matrix(1,0,0,1,565,9065)" ed:parentid="144" ed:height="22.5"><path d="M0,22.5L158,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">5.6.前端搜索引擎优化基础</tspan></text></g><g ed:width="86" id="188" transform="matrix(1,0,0,1,565,9241)" ed:parentid="144" ed:height="22.5"><path d="M0,22.5L86,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">5.7.前端协作</tspan></text></g><g ed:width="180" id="190" transform="matrix(1,0,0,1,520,9594)" ed:parentid="146" ed:height="22.5"><path d="M0,22.5L180,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">6.1.JavaScript跨后端实现技术</tspan></text></g><g ed:width="134" id="192" transform="matrix(1,0,0,1,520,10045)" ed:parentid="146" ed:height="22.5"><path d="M0,22.5L134,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">6.2.跨终端设计与实现</tspan></text></g><g ed:width="110" id="196" transform="matrix(1,0,0,1,520,10408)" ed:parentid="148" ed:height="22.5"><path d="M0,22.5L110,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">7.1.未来前端趋势</tspan></text></g><g ed:width="170" id="198" transform="matrix(1,0,0,1,520,10725)" ed:parentid="148" ed:height="22.5"><path d="M0,22.5L170,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">7.2.做一名优秀的前端工程师</tspan></text></g><g ed:width="136" id="200" transform="matrix(1,0,0,1,657,10310)" ed:parentid="196" ed:height="22.5"><path d="M0,22.5L136,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">1.新标准的进化与稳定</tspan></text></g><g ed:width="256" id="202" transform="matrix(1,0,0,1,657,10379)" ed:parentid="196" ed:height="22.5"><path d="M0,22.5L256,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">2.应用开发技术趋于稳定并将等待下一次革新</tspan></text></g><g ed:width="160" id="204" transform="matrix(1,0,0,1,657,10425)" ed:parentid="196" ed:height="22.5"><path d="M0,22.5L160,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">3.持续不断的技术工具探索</tspan></text></g><g ed:width="160" id="206" transform="matrix(1,0,0,1,657,10471)" ed:parentid="196" ed:height="22.5"><path d="M0,22.5L160,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">4.浏览器平台新特性的应用</tspan></text></g><g ed:width="172" id="208" transform="matrix(1,0,0,1,657,10508)" ed:parentid="196" ed:height="22.5"><path d="M0,22.5L172,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">5.更优化的前端技术开发生态</tspan></text></g><g ed:width="124" id="210" transform="matrix(1,0,0,1,657,10537)" ed:parentid="196" ed:height="22.5"><path d="M0,22.5L124,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">6.前端新领域的出现</tspan></text></g><g ed:width="100" id="212" transform="matrix(1,0,0,1,717,10566)" ed:parentid="198" ed:height="22.5"><path d="M0,22.5L100,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">1.学会高效沟通</tspan></text></g><g ed:width="136" id="214" transform="matrix(1,0,0,1,717,10595)" ed:parentid="198" ed:height="22.5"><path d="M0,22.5L136,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">2.使用高效的开发工具</tspan></text></g><g ed:width="112" id="216" transform="matrix(1,0,0,1,717,10624)" ed:parentid="198" ed:height="22.5"><path d="M0,22.5L112,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">3.处理问题方法论</tspan></text></g><g ed:width="172" id="218" transform="matrix(1,0,0,1,717,10685)" ed:parentid="198" ed:height="22.5"><path d="M0,22.5L172,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">4.学会前端项目开发流程设计</tspan></text></g><g ed:width="172" id="220" transform="matrix(1,0,0,1,717,10768)" ed:parentid="198" ed:height="22.5"><path d="M0,22.5L172,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">5.持续的只是和经验积累管理</tspan></text></g><g ed:width="124" id="222" transform="matrix(1,0,0,1,717,10820)" ed:parentid="198" ed:height="22.5"><path d="M0,22.5L124,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">6.切忌过分追求技术</tspan></text></g><g ed:width="136" id="224" transform="matrix(1,0,0,1,717,10866)" ed:parentid="198" ed:height="22.5"><path d="M0,22.5L136,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">7.必要的产品设计思维</tspan></text></g><g ed:width="133" id="226" transform="matrix(1,0,0,1,727,9448)" ed:parentid="190" ed:height="22.5"><path d="M0,22.5L133,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">1.Node后端开发基础</tspan></text></g><g ed:width="113" id="228" transform="matrix(1,0,0,1,727,9502)" ed:parentid="190" ed:height="22.5"><path d="M0,22.5L113,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">2.早期MEAN介绍</tspan></text></g><g ed:width="133" id="230" transform="matrix(1,0,0,1,727,9588)" ed:parentid="190" ed:height="22.5"><path d="M0,22.5L133,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">3.Node后端数据渲染</tspan></text></g><g ed:width="88" id="232" transform="matrix(1,0,0,1,727,9752)" ed:parentid="190" ed:height="22.5"><path d="M0,22.5L88,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">4.前后端同构</tspan></text></g><g ed:width="115" id="234" transform="matrix(1,0,0,1,681,9867)" ed:parentid="192" ed:height="22.5"><path d="M0,22.5L115,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">1.Hybird技术趋势</tspan></text></g><g ed:width="115" id="236" transform="matrix(1,0,0,1,681,9953)" ed:parentid="192" ed:height="22.5"><path d="M0,22.5L115,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">2.Hybird实现方式</tspan></text></g><g ed:width="245" id="238" transform="matrix(1,0,0,1,681,10079)" ed:parentid="192" ed:height="22.5"><path d="M0,22.5L245,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">3.基于localStorage的资源离线和更新技术</tspan></text></g><g ed:width="248" id="240" transform="matrix(1,0,0,1,681,10156)" ed:parentid="192" ed:height="22.5"><path d="M0,22.5L248,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">4.基于Native与Web的资源离线和更新技术</tspan></text></g><g ed:width="112" id="242" transform="matrix(1,0,0,1,681,10208)" ed:parentid="192" ed:height="22.5"><path d="M0,22.5L112,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">5.资源覆盖率统计</tspan></text></g><g ed:width="514" id="244" transform="matrix(1,0,0,1,766,21)" ed:parentid="106" ed:height="141.5"><path d="M0,141.5L514,141.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端开发模式先后经历了静态黄页时期、服务器组装动态网页数据时期、后端为主的</tspan><tspan y="31.1" x="8" style="white-space:pre">MVC（Model-View-Controller，一种数据模型、视图、逻辑分离的开发模式）模式时期、</tspan><tspan y="48.1" x="8" style="white-space:pre">前后端分离方案开发时期、纯前端MV*（Model-View-*，数据模型、视图、控制方式分离的</tspan><tspan y="65.1" x="8" style="white-space:pre">开发设计方式，这里的控制方式有多种实现方法，所以一般用*代替）为主与中间层直出的时</tspan><tspan y="82.1" x="8" style="white-space:pre">期，最后进入到前端Virtual DOM（虚拟DOM，用来描述页面DOM树节点之间关系的一种特</tspan><tspan y="99.1" x="8" style="white-space:pre">殊JavaScript对象）、MNV*（Model-NativeView-*，数据模型、原生视图、控制方式分离</tspan><tspan y="116.1" x="8" style="white-space:pre">的开发设计模式，这里的控制方式也可以有多种实现方法，所以用*代替）模式以及前后端同</tspan><tspan y="133.1" x="8" style="white-space:pre">构的开发时代</tspan></text></g><g ed:width="514" id="246" transform="matrix(1,0,0,1,766,169)" ed:parentid="106" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">从以下几个方面来思考：页面内容多而复杂，怎样保证开发效率；页面内容多且复杂，项目的</tspan><tspan y="31.1" x="8" style="white-space:pre">管理和维护该如何去做； 页面加载的内容很多，怎样保证尽快将网页内容显示给用户；怎样限</tspan><tspan y="48.1" x="8" style="white-space:pre">制页面内图片的大小以保证页面快速展示；对于重复打开的页面，能否让浏览器不再向服务器</tspan><tspan y="65.1" x="8" style="white-space:pre">请求重复的内容；，如果页面地址在移动端浏览器打开，又该怎么处理；</tspan></text></g><g ed:width="514" id="250" transform="matrix(1,0,0,1,766,249)" ed:parentid="106" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端结构的开发实现模式先后经历了静态黄页时期、服务器组装动态网页数据时期、后端为主</tspan><tspan y="31.1" x="8" style="white-space:pre">的MVC模式时期、前后端分离时期、纯前端MV*为主和中间层直出时期、前端Virtual </tspan><tspan y="48.1" x="8" style="white-space:pre">DOM、MNV*、前后端同构时期</tspan></text></g><g ed:width="514" id="252" transform="matrix(1,0,0,1,703,312)" ed:parentid="108" ed:height="294.5"><path d="M0,294.5L514,294.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">从我们打开浏览器输入一个网址到页面展示网页内容的这段时间内，浏览器和服务端都发生了</tspan><tspan y="31.1" x="8" style="white-space:pre">什么事情？1.在接收到用户输入的网址后，浏览器会开启一个线程来处理这个请求，对用户输</tspan><tspan y="48.1" x="8" style="white-space:pre">入的URL地址进行分析判断，如果是HTTP协议就按照HTTP 方式来处理；2.调用浏览器引擎中</tspan><tspan y="65.1" x="8" style="white-space:pre">的对应方法，比如WebView中的loadUrl方法，分析并加载这个URL地址；3.通过 DNS 解析</tspan><tspan y="82.1" x="8" style="white-space:pre">获取该网站地址对应的 IP 地址，查询完成后连同浏览器的 Cookie、userAgent等信息向网站</tspan><tspan y="99.1" x="8" style="white-space:pre">目的IP发出GET请求；4.进行HTTP协议会话，浏览器客户端向Web服务器发送报文；5.进入网</tspan><tspan y="116.1" x="8" style="white-space:pre">站后台上的Web服务器处理请求，如Apache、Tomcat、Node.js等服务器；6.进入部署好的</tspan><tspan y="133.1" x="8" style="white-space:pre">后端应用，如 PHP、Java、JavaScript、Python等后端程序，找到对应的请求处理逻辑，这</tspan><tspan y="150.1" x="8" style="white-space:pre">期间可能会读取服务器缓存或查询数据库等；7.服务器处理请求并返回响应报文，此时如果浏</tspan><tspan y="167.1" x="8" style="white-space:pre">览器访问过该页面，缓存上有对应资源，会与服务器最后修改记录对比，一致则返回304，否</tspan><tspan y="184.1" x="8" style="white-space:pre">则返回200和对应的内容；8. 浏览器开始下载HTML文档（响应报头状态码为200时）或者从</tspan><tspan y="201.1" x="8" style="white-space:pre">本地缓存读取文件内容（浏览器缓存有效或响应报头状态码为304时）；9.浏览器根据下载接</tspan><tspan y="218.1" x="8" style="white-space:pre">收到的HTML文件解析结构建立DOM（Document Object Model，文档对象模型）文档树，</tspan><tspan y="235.1" x="8" style="white-space:pre">并根据HTML中的标记请求下载指定的MIME类型文件（如CSS、JavaScript脚本等），同时</tspan><tspan y="252.1" x="8" style="white-space:pre">设置缓存等内容；10.页面开始解析渲染DOM, CSS根据规则解析并结合DOM文档树进行网页</tspan><tspan y="269.1" x="8" style="white-space:pre">内容布局和绘制渲染，JavaScript根据DOM API操作DOM，并读取浏览器缓存、执行事件绑</tspan><tspan y="286.1" x="8" style="white-space:pre">定等，页面整个展示过程完成。</tspan></text></g><g ed:width="514" id="254" transform="matrix(1,0,0,1,703,613)" ed:parentid="108" ed:height="192.5"><path d="M0,192.5L514,192.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">通常我们认为浏览器主要由七部分组成：用户界面、网络、JavaScript引擎、渲染引擎、UI 后</tspan><tspan y="31.1" x="8" style="white-space:pre">端、JavaScript 解释器和持久化数据存储。用户界面包括浏览器中可见的地址输入框、浏览器</tspan><tspan y="48.1" x="8" style="white-space:pre">前进返回按钮、打开书签、打开历史记录等用户可操作的功能选项。浏览器引擎可以在用户界</tspan><tspan y="65.1" x="8" style="white-space:pre">面和渲染引擎之间传送指令或在客户端本地缓存中读写数据等，是浏览器中各个部分之间相互</tspan><tspan y="82.1" x="8" style="white-space:pre">通信的核心。浏览器渲染引擎的功能是解析DOM文档和CSS规则并将内容排版到浏览器中显</tspan><tspan y="99.1" x="8" style="white-space:pre">示有样式的界面，也有人称之为排版引擎，我们常说的浏览器内核主要指的就是渲染引擎。网</tspan><tspan y="116.1" x="8" style="white-space:pre">络功能模块则是浏览器开启网络线程发送请求或下载资源文件的模块，例如DOM 树解析过程</tspan><tspan y="133.1" x="8" style="white-space:pre">中请求静态资源首先是通过浏览器中的网络模块发起的，UI 后端则用于绘制基本的浏览器窗</tspan><tspan y="150.1" x="8" style="white-space:pre">口内控件，比如组合选择框、按钮、输入框等。JavaScript解释器则是浏览器解释和执行</tspan><tspan y="167.1" x="8" style="white-space:pre">JavaScript 脚本的部分，例如 V8引擎。浏览器数据持久化存储则涉及 cookie、</tspan><tspan y="184.1" x="8" style="white-space:pre">localStorage等一些客户端存储技术，可以通过浏览器引擎提供的API进行调用</tspan></text></g><g ed:width="514" id="256" transform="matrix(1,0,0,1,703,812)" ed:parentid="108" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">渲染引擎在浏览器中主要用于解析HTML文档和CSS文档，然后将CSS规则应用到HTML标签元</tspan><tspan y="31.1" x="8" style="white-space:pre">素上，并将HTML渲染到浏览器窗口中以显示具体的DOM内容</tspan></text></g><g ed:width="514" id="258" transform="matrix(1,0,0,1,703,858)" ed:parentid="108" ed:height="158.5"><path d="M0,158.5L514,158.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">解析HTML构建DOM树时渲染引擎会先将HTML元素标签解析成由多个DOM元素对象节点组</tspan><tspan y="31.1" x="8" style="white-space:pre">成的且具有节点父子关系的 DOM 树结构，然后根据 DOM 树结构的每个节点顺序提取计算</tspan><tspan y="48.1" x="8" style="white-space:pre">使用的CSS规则并重新计算DOM树结构的样式数据，生成一个带样式描述的DOM渲染树对</tspan><tspan y="65.1" x="8" style="white-space:pre">象。DOM渲染树生成结束后，进入渲染树的布局阶段，即根据每个渲染树节点在页面中的大</tspan><tspan y="82.1" x="8" style="white-space:pre">小和位置，将节点固定到页面的对应位置上，这个阶段主要是元素的布局属性（例如</tspan><tspan y="99.1" x="8" style="white-space:pre">position、float、margin等属性）生效，即在浏览器中绘制页面上元素节点的位置。接下来</tspan><tspan y="116.1" x="8" style="white-space:pre">就是绘制阶段，将渲染树节点的背景、颜色、文本等样式信息应用到每个节点上，这个阶段主</tspan><tspan y="133.1" x="8" style="white-space:pre">要是元素的内部显示样式（例如color、background、text-shadow等属性）生效，最终完成</tspan><tspan y="150.1" x="8" style="white-space:pre">整个DOM在页面上的绘制显示</tspan></text></g><g ed:width="514" id="260" transform="matrix(1,0,0,1,703,1023)" ed:parentid="108" ed:height="107.5"><path d="M0,107.5L514,107.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Webkit内核和Gecko内核渲染DOM的主要流程。两种渲染引擎工作流程的主要区别在于解析</tspan><tspan y="31.1" x="8" style="white-space:pre">HTML或CSS文档生成渲染树的过程：Webkit内核中的HTML和CSS解析可以认为是并行的；</tspan><tspan y="48.1" x="8" style="white-space:pre">而Gecko则是先解析HTML，生成内容Sink（Content Sink可以认为是构建DOM结构树的工</tspan><tspan y="65.1" x="8" style="white-space:pre">厂方法）后再开始解析CSS。这两种渲染引擎工作过程中使用的描述术语也不一样：Webkit内</tspan><tspan y="82.1" x="8" style="white-space:pre">核解析后的渲染对象被称为渲染树（Render Tree），而Gecko内核解析后的渲染对象则称为</tspan><tspan y="99.1" x="8" style="white-space:pre">Frame树（Frame Tree）。</tspan></text></g><g ed:width="514" id="262" transform="matrix(1,0,0,1,703,1137)" ed:parentid="108" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">HTML文档解析过程是将HTML文本字符串逐行解析生成具有父子关系的DOM节点树对象的过</tspan><tspan y="31.1" x="8" style="white-space:pre">程</tspan></text></g><g ed:width="514" id="264" transform="matrix(1,0,0,1,703,1183)" ed:parentid="108" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">CSS解析和HTML解析类似，首先也要通过词法解析生成CSS分析树，而且也使用特定的CSS文</tspan><tspan y="31.1" x="8" style="white-space:pre">本语法来实现，不同的是，HTML是使用类似XML结构的语法解析方式来完成分析的</tspan></text></g><g ed:width="514" id="267" transform="matrix(1,0,0,1,703,1229)" ed:parentid="108" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">浏览器缓存是浏览器端用于在本地保存数据并进行快速读取以避免重复资源请求的传输机制的</tspan><tspan y="31.1" x="8" style="white-space:pre">统称。有效的缓存可以避免重复的网络资源请求并让浏览器快速地响应用户操作，提高页面内</tspan><tspan y="48.1" x="8" style="white-space:pre">容的加载速度。</tspan></text></g><g ed:width="514" id="269" transform="matrix(1,0,0,1,703,1292)" ed:parentid="108" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">现代浏览器的8种缓存机制：HTTP文件缓存、LocalStorage、SessionStorage、indexDB、</tspan><tspan y="31.1" x="8" style="white-space:pre">Web SQL、Cookie、CacheStorage、Application Cache，另外还有一种使用不太多的</tspan><tspan y="48.1" x="8" style="white-space:pre">Flash缓存方式。</tspan></text></g><g ed:width="514" id="271" transform="matrix(1,0,0,1,703,1355)" ed:parentid="108" ed:height="175.5"><path d="M0,175.5L514,175.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">浏览器HTTP文件缓存判断机制的流程图：</tspan><tspan y="31.1" x="8" style="white-space:pre">1．浏览器会先查询Cache-Control（这里用Expires判断也是可以的，但是Expires一般设置</tspan><tspan y="48.1" x="8" style="white-space:pre">的是绝对过期时间，Cache-Control设置的是相对过期时间）来判断内容是否过期，如果未过</tspan><tspan y="65.1" x="8" style="white-space:pre">期，则直接读取浏览器端缓存文件，不发送HTTP请求，否则进入下一步。</tspan><tspan y="82.1" x="8" style="white-space:pre">2．在浏览器端判断上次文件返回头中是否含有Etag信息，有则连同If-None-Match一起向服</tspan><tspan y="99.1" x="8" style="white-space:pre">务器发送请求，服务端判断Etag未修改则返回状态304，修改则返回200，否则进入下一步。</tspan><tspan y="116.1" x="8" style="white-space:pre">3．在浏览器端判断上次文件返回头中是否含有 Last-Modified 信息，有则连同If-Modified-</tspan><tspan y="133.1" x="8" style="white-space:pre">Since一起向服务器发送请求，服务端判断Last-Modified是否失效，失效则返回200，未失效</tspan><tspan y="150.1" x="8" style="white-space:pre">则返回304。</tspan><tspan y="167.1" x="8" style="white-space:pre">4．如果Etag和Last-Modified都不存在，直接向服务器请求内容。</tspan></text></g><g ed:width="438" id="273" transform="matrix(1,0,0,1,715,1537)" ed:parentid="110" ed:height="22.5"><path d="M0,22.5L438,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">就前端而言，主流的开发工具主要有 Sublime、Webstorm、Vscode、Vim 等</tspan></text></g><g ed:width="514" id="275" transform="matrix(1,0,0,1,715,1566)" ed:parentid="110" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">一款高效的开发工具都应该具备以下几个方面的能力：代码格式化 Format 能力；自动检测错</tspan><tspan y="31.1" x="8" style="white-space:pre">误能力；编辑快捷键能力；自动Debug能力；Git 或 Svn 版本控制插件能力；自动文档工具；</tspan></text></g><g ed:width="514" id="277" transform="matrix(1,0,0,1,715,1612)" ed:parentid="110" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端高效调试工具： 前端快速调试工具Chrome浏览，Chrome的调试面板主要包括设备模</tspan><tspan y="31.1" x="8" style="white-space:pre">拟、Elements、Console、Sources、Network、Timeline、Profiles、Resources、</tspan><tspan y="48.1" x="8" style="white-space:pre">Security、Audits这些内容；网络辅助工具，Fiddler；Node调试工具，node-supervisor、</tspan><tspan y="65.1" x="8" style="white-space:pre">node-inspector；前端远程调试工具，有一些例如Vorlon.js、Weinre等用于移动端浏览器的</tspan><tspan y="82.1" x="8" style="white-space:pre">远程调试工具；</tspan></text></g><g ed:width="514" id="279" transform="matrix(1,0,0,1,648,1736)" ed:parentid="114" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">HTTP（HyperText Transport Protocol，超文本传输协议）协议是WWW服务器和用户请求</tspan><tspan y="31.1" x="8" style="white-space:pre">代理（例如浏览器等）之间通过应答请求模式传输超文本（例如HTML文件、JavaScript文</tspan><tspan y="48.1" x="8" style="white-space:pre">件、CSS文件、图片甚至服务器接口数据等）内容的一种协议，协议的详细规范序号为</tspan><tspan y="65.1" x="8" style="white-space:pre">RFC2616</tspan></text></g><g ed:width="514" id="281" transform="matrix(1,0,0,1,648,1816)" ed:parentid="114" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">通常一个完整的HTTP报文由头部、空行、正文三部分组成。空行用于区分报文头部和报文正</tspan><tspan y="31.1" x="8" style="white-space:pre">文，由一个回车符和一个换行符组成。</tspan></text></g><g ed:width="514" id="283" transform="matrix(1,0,0,1,648,1862)" ed:parentid="114" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">目前使用最为广泛的仍然是HTTP 1.1版本。HTTP 1.1标准发布于1999年，相对于HTTP 1.0增</tspan><tspan y="31.1" x="8" style="white-space:pre">加了协议扩展切换、缓存、部分文件传输优化、长连接、消息传递、host头域、错误提示等一</tspan><tspan y="48.1" x="8" style="white-space:pre">些重要的增强特性。</tspan></text></g><g ed:width="514" id="285" transform="matrix(1,0,0,1,648,1925)" ed:parentid="114" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">协议扩展切换是指，HTTP 1.1协议支持在请求头部域消息中包含Upgrade头并让客户端通过</tspan><tspan y="31.1" x="8" style="white-space:pre">头部标识令服务器知道它能够支持其他备用通信协议的一种机制，服务器根据客户端请求的其</tspan><tspan y="48.1" x="8" style="white-space:pre">他协议进行切换，切换后使用备用协议与客户端进行通信。</tspan></text></g><g ed:width="514" id="289" transform="matrix(1,0,0,1,648,1988)" ed:parentid="114" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">HTTP 2即超文本传输协议2.0版本，是HTTP协议的下一个版本。HTTP 2相对于之前的HTTP协</tspan><tspan y="31.1" x="8" style="white-space:pre">议有以下几个优点： HTTP 2采用完全二进制的格式来传输数据，而非HTTP 1.x的默认文本格</tspan><tspan y="48.1" x="8" style="white-space:pre">式。 HTTP 2使用TCP多路复用的方式来降低网络请求连接建立和关闭的开销，多个请求可以</tspan><tspan y="65.1" x="8" style="white-space:pre">通过一个TCP连接来并发完成。HTTP 2支持传输流的优先级和流量控制机制。支持服务器端推</tspan><tspan y="82.1" x="8" style="white-space:pre">送。</tspan></text></g><g ed:width="514" id="291" transform="matrix(1,0,0,1,645,2085)" ed:parentid="116" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">基础安全知识：XSS（Cross Site Script，跨站脚本攻击）、SQL（Structured Query </tspan><tspan y="31.1" x="8" style="white-space:pre">Language，结构化查询语言）注入和CSRF（Cross-site RequestForgery，跨站请求伪造）</tspan><tspan y="48.1" x="8" style="white-space:pre">均属于基础的前端安全知识</tspan></text></g><g ed:width="514" id="293" transform="matrix(1,0,0,1,645,2148)" ed:parentid="116" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">XSS通常是由带有页面可解析内容的数据未经处理直接插入到页面上解析导致的。需要注意的</tspan><tspan y="31.1" x="8" style="white-space:pre">是，XSS分为存储型XSS、反射型XSS、MXSS（也叫DOM XSS）三种</tspan></text></g><g ed:width="514" id="295" transform="matrix(1,0,0,1,645,2194)" ed:parentid="116" ed:height="107.5"><path d="M0,107.5L514,107.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">存储型XSS的攻击脚本常常是由前端提交的数据未经处理直接存储到数据库然后从数据库中读</tspan><tspan y="31.1" x="8" style="white-space:pre">取出来后又直接插入到页面中所导致的；反射型XSS可能是在网页URL参数中注入了可解析内</tspan><tspan y="48.1" x="8" style="white-space:pre">容的数据而导致的，如果直接获取URL中不合法的并插入页面中则可能出现页面上的 XSS 攻</tspan><tspan y="65.1" x="8" style="white-space:pre">击；MXSS 则是在渲染 DOM 属性时将攻击脚本插入DOM 属性中被解析而导致的。XSS 主</tspan><tspan y="82.1" x="8" style="white-space:pre">要的防范方法是验证输入到页面上所有内容来源数据是否安全，如果可能含有脚本标签等内容</tspan><tspan y="99.1" x="8" style="white-space:pre">则需要进行必要的转义。</tspan></text></g><g ed:width="514" id="297" transform="matrix(1,0,0,1,645,2308)" ed:parentid="116" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">SQL注入攻击主要是因为页面提交数据到服务器端后，在服务器端未进行数据验证就将数据直</tspan><tspan y="31.1" x="8" style="white-space:pre">接拼接到SQL语句中执行，因此产生执行与预期不同的现象。主要防范措施是对前端网页提交</tspan><tspan y="48.1" x="8" style="white-space:pre">的数据内容进行严格的检查校验</tspan></text></g><g ed:width="514" id="299" transform="matrix(1,0,0,1,645,2371)" ed:parentid="116" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">CSRF 是指非源站点按照源站点的数据请求格式提交非法数据给源站点服务器的一种攻击方</tspan><tspan y="31.1" x="8" style="white-space:pre">法。通常比较安全的是通过页面 Token（令牌）提交验证的方式来验证请求是否为源站点页面</tspan><tspan y="48.1" x="8" style="white-space:pre">提交的，来阻止跨站伪请求的发生。</tspan></text></g><g ed:width="326" id="301" transform="matrix(1,0,0,1,645,2434)" ed:parentid="116" ed:height="22.5"><path d="M0,22.5L326,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">网络请求劫持目前主要分为两种：DNS劫持与HTTP劫持。</tspan></text></g><g ed:width="514" id="303" transform="matrix(1,0,0,1,645,2463)" ed:parentid="116" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">DNS劫持通常是指攻击者劫持了 DNS 服务器，通过某些手段取得某域名的解析记录控制权，</tspan><tspan y="31.1" x="8" style="white-space:pre">进而修改此域名的解析结果，导致用户对该域名地址的访问由原IP地址转入到修改后的指定IP</tspan><tspan y="48.1" x="8" style="white-space:pre">地址的现象，其结果就是让正确的网址不能解析或被解析指向另一网站IP，实现获取用户资料</tspan><tspan y="65.1" x="8" style="white-space:pre">或者破坏原有网站正常服务的目的。</tspan></text></g><g ed:width="514" id="305" transform="matrix(1,0,0,1,645,2543)" ed:parentid="116" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">HTTP 劫持是指，在用户浏览器与访问的目的服务器之间所建立的网络数据传输通道中从网关</tspan><tspan y="31.1" x="8" style="white-space:pre">或防火墙层上监视特定数据信息，当满足一定的条件时，就会在正常的数据包中插入或修改成</tspan><tspan y="48.1" x="8" style="white-space:pre">为攻击者设计的网络数据包，目的是让用户浏览器解释“错误”的数据，或者以弹出新窗口的</tspan><tspan y="65.1" x="8" style="white-space:pre">形式在使用者浏览器界面上展示宣传性广告或者直接显示某块其他的内容</tspan></text></g><g ed:width="514" id="307" transform="matrix(1,0,0,1,645,2623)" ed:parentid="116" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">几个典型的安全消息头域设置： X-XSS-Protection、Strict-Transport-Security、Content-</tspan><tspan y="31.1" x="8" style="white-space:pre">Security-Policy、Access-Control-Allow-Origin</tspan></text></g><g ed:width="514" id="309" transform="matrix(1,0,0,1,642,2669)" ed:parentid="118" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">包括AJAX的方式在内，目前可用来在前端浏览器上进行实时通信的功能实现方式主要有</tspan><tspan y="31.1" x="8" style="white-space:pre">WebSocket、Poll、Long-poll和DDP协议</tspan></text></g><g ed:width="514" id="311" transform="matrix(1,0,0,1,642,2715)" ed:parentid="118" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Poll 方案很容易理解，即浏览器采用定时向服务器发送请求轮询的方法不断发送或拉取消息。</tspan><tspan y="31.1" x="8" style="white-space:pre">相对来说实时性较差，比较消耗系统资源</tspan></text></g><g ed:width="514" id="313" transform="matrix(1,0,0,1,642,2761)" ed:parentid="118" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">HTTP请求可以设置一个较长的Timeout等待时间，这样网络轮询请求就可以维持一段较长的</tspan><tspan y="31.1" x="8" style="white-space:pre">时间后返回结果，这也就是Long-poll（长轮询）的基本思路。</tspan></text></g><g ed:width="514" id="315" transform="matrix(1,0,0,1,642,2807)" ed:parentid="118" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">相比于Poll, Long-poll的实现更加节省系统资源，实时性更好，不用持续地定时发送网络请</tspan><tspan y="31.1" x="8" style="white-space:pre">求。很典型的应用场景就是网站通过对应的移动客户端进行扫描二维码登录。</tspan></text></g><g ed:width="514" id="317" transform="matrix(1,0,0,1,642,2853)" ed:parentid="118" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">DDP（Distributed Data Protocol，分布式数据协议）是一种新型的客户端与服务器端的实</tspan><tspan y="31.1" x="8" style="white-space:pre">时通信协议，由于兼容性的原因，目前使用还不广泛。有名的Meteor Web框架的双向实时数</tspan><tspan y="48.1" x="8" style="white-space:pre">据更新机制底层使用的就是DDP</tspan></text></g><g ed:width="514" id="319" transform="matrix(1,0,0,1,685,2916)" ed:parentid="120" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">REST（Representational State Transfer，表述性状态转化）并不是某一种具体的协议，而</tspan><tspan y="31.1" x="8" style="white-space:pre">是定义了一种网络应用软件之间的架构关系并提出了一套与之对应的网络之间交互调用的规</tspan><tspan y="48.1" x="8" style="white-space:pre">则。</tspan></text></g><g ed:width="514" id="322" transform="matrix(1,0,0,1,667,2979)" ed:parentid="122" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">从技术开发上来看，相比于传统的桌面浏览器端的Web App，它具有以下几方面明显的特</tspan><tspan y="31.1" x="8" style="white-space:pre">征：Hybrid App可用的系统网络资源更少；支持更新的浏览器特性；可实现离线应用；较多</tspan><tspan y="48.1" x="8" style="white-space:pre">的机型考虑；支持与Native交互；</tspan></text></g><g ed:width="514" id="324" transform="matrix(1,0,0,1,667,3042)" ed:parentid="122" ed:height="107.5"><path d="M0,107.5L514,107.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Web到Native协议调用：通过URI请求，主要原理是，Native应用可在移动端系统中注册一个</tspan><tspan y="31.1" x="8" style="white-space:pre">Scheme协议的URI，这个URI可在系统的任意地方授权访问来调起一段原生方法或一个原生的</tspan><tspan y="48.1" x="8" style="white-space:pre">界面；通过addJavascriptInterface注入方法到页面中调用，以通过addJavascriptInterface</tspan><tspan y="65.1" x="8" style="white-space:pre">方法将Native的一个对象方法注入到页面中，供JavaScript调用，主要实现原理是通过 </tspan><tspan y="82.1" x="8" style="white-space:pre">addJavascriptInterface 将 Java 的实例对象注入到WebView中，让WebView中的页面</tspan><tspan y="99.1" x="8" style="white-space:pre">JavaScript可以直接使用，采用这种方法也可以实现更加复杂的调用功能</tspan></text></g><g ed:width="514" id="326" transform="matrix(1,0,0,1,667,3156)" ed:parentid="122" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Native到Web协议调用：Native向HTML5发起的调用是通过loadUrl方法（Android平台下面</tspan><tspan y="31.1" x="8" style="white-space:pre">方法名为loadUrl, iOS系统下通常为stringByEvaluatingJavaScriptFromString）实现的</tspan></text></g><g ed:width="514" id="328" transform="matrix(1,0,0,1,667,3202)" ed:parentid="122" ed:height="107.5"><path d="M0,107.5L514,107.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">在Android上，JavaScript 还可以通过另一种setWebChromeClient 方法来实现：</tspan><tspan y="31.1" x="8" style="white-space:pre">JavaScript 在执行WebView 中 JavaScript 的 alert()或 prompt()方法时，Native 端会自动</tspan><tspan y="48.1" x="8" style="white-space:pre">触发 onJsAlert或onJsPrompt的方法回调函数，一般情况下，因为前端需要常常使用alert()方</tspan><tspan y="65.1" x="8" style="white-space:pre">法，因此通过重写Native中的onJsPrompt方法，JavaScript就可以通过执行prompt()方法把</tspan><tspan y="82.1" x="8" style="white-space:pre">数据内容传递到Java代码中执行，即JavaScript在执行prompt()方法时将数据传入到Native的</tspan><tspan y="99.1" x="8" style="white-space:pre">onJsPrompt方法中，而onJsPrompt里则是我们重写的调用Native程序代码。</tspan></text></g><g ed:width="514" id="330" transform="matrix(1,0,0,1,667,3316)" ed:parentid="122" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Java也可以主动通过loadUrl()再次回调JavaScript的方法返回内容到WebView中，以</tspan><tspan y="31.1" x="8" style="white-space:pre">Android为例，目前使用较多的解决方案是通过一个协议串定义Native和JavaScript间的数据</tspan><tspan y="48.1" x="8" style="white-space:pre">通信规则：jsbridge://className:callbackMethod/methodName? jsonObj，这个协议串</tspan><tspan y="65.1" x="8" style="white-space:pre">必须包括以下内容：调用Native App的特定标识头、类名称、方法名、参数、回调JavaScript</tspan><tspan y="82.1" x="8" style="white-space:pre">的方法。</tspan></text></g><g ed:width="514" id="332" transform="matrix(1,0,0,1,667,3413)" ed:parentid="122" ed:height="107.5"><path d="M0,107.5L514,107.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">JSBridge.call()方法做的事情很简单，将传入的参数组装成上述jsbridge://</tspan><tspan y="31.1" x="8" style="white-space:pre">className:callbackMethod/methodName? jsonObj的形式，然后调用prompt（iOS一般</tspan><tspan y="48.1" x="8" style="white-space:pre">用iframe, Android建议使用window.prompt）的方法将协议串传递到Native应用层解析执</tspan><tspan y="65.1" x="8" style="white-space:pre">行，这时候Native层会收到这个协议串，再进一步解析并调用对应的类和方法名称，调用方法</tspan><tspan y="82.1" x="8" style="white-space:pre">成功后执行WebView中声明的callbackMethod()函数，这样整个交互协议调用的过程就完成</tspan><tspan y="99.1" x="8" style="white-space:pre">了。</tspan></text></g><g ed:width="384" id="334" transform="matrix(1,0,0,1,724,3553)" ed:parentid="128" ed:height="22.5"><path d="M0,22.5L384,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端的三个基本构成：结构层HTML、表现层CSS和行为层JavaScript</tspan></text></g><g ed:width="514" id="336" transform="matrix(1,0,0,1,724,3582)" ed:parentid="128" ed:height="124.5"><path d="M0,124.5L514,124.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">现代的Web前端应用开发早已经不是简单的三层结构就能轻松解决的了，而是已经形成了编译</tspan><tspan y="31.1" x="8" style="white-space:pre">流程化、生产环境基础优化结构运行的模式。简单来讲，例如HTML开发可以由</tspan><tspan y="48.1" x="8" style="white-space:pre">Component（实现的形式较多，例如Web Component、目录级Component、其他框架自</tspan><tspan y="65.1" x="8" style="white-space:pre">定义形式的Component）来管理结构，CSS由SASS、postCSS、stylus等预处理器的语法开</tspan><tspan y="82.1" x="8" style="white-space:pre">发来代替，JavaScript则使用ECMAScript 6+、TypeScript等特性标准进行高效开发。这些就</tspan><tspan y="99.1" x="8" style="white-space:pre">是目前主要的前端开发技术，其主要过程是开发完成后将开发项目管理的三层结构内容编译输</tspan><tspan y="116.1" x="8" style="white-space:pre">出为浏览器支持运行的基础三层结构解释执行。</tspan></text></g><g ed:width="514" id="338" transform="matrix(1,0,0,1,724,3713)" ed:parentid="128" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">HTML 4.01是W3C在1999年制定发布的HTML语言规范。要知道的是，HTML4.01是基于</tspan><tspan y="31.1" x="8" style="white-space:pre">SGML（Standard Generalized Markup language，标准通用标记语言）规范来制定的。</tspan><tspan y="48.1" x="8" style="white-space:pre">HTML5正式发布于2014年，HTML5不是基于SGML演化而来的，可以理解为是W3C的另一套</tspan><tspan y="65.1" x="8" style="white-space:pre">实现规范。</tspan></text></g><g ed:width="514" id="340" transform="matrix(1,0,0,1,724,3793)" ed:parentid="128" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Web语义化是指在HTML结构的恰当位置上使用语义恰当的标签，使页面具有良好的结构，使</tspan><tspan y="31.1" x="8" style="white-space:pre">页面标签元素具有含义，能够让人或搜索引擎更容易理解。</tspan></text></g><g ed:width="514" id="342" transform="matrix(1,0,0,1,724,3839)" ed:parentid="128" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">基于此定义，我们需要首先理解以下几点：用正确的标签做正确的事情；HTML语义化能让页</tspan><tspan y="31.1" x="8" style="white-space:pre">面内容更具结构化且更加清晰，便于浏览器和搜索引擎进行解析； 即使在没有样式CSS的情况</tspan><tspan y="48.1" x="8" style="white-space:pre">下，网页内容也应该是有序的文档格式显示，并且是容易阅读的；使项目维护人员更容易对网</tspan><tspan y="65.1" x="8" style="white-space:pre">站进行分块，便于阅读理解；</tspan></text></g><g ed:width="501" id="344" transform="matrix(1,0,0,1,724,3919)" ed:parentid="128" ed:height="22.5"><path d="M0,22.5L501,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Web语义化规范并不是在任何时候都需要严格遵守的，有时直接使用甚至会产生一些副作用</tspan></text></g><g ed:width="514" id="346" transform="matrix(1,0,0,1,724,3948)" ed:parentid="128" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">流动网页提速（Accelerated Mobile Pages, AMP）是google推行的一个提升页面资源载入</tspan><tspan y="31.1" x="8" style="white-space:pre">效率的 HTML 提议规范。基本思路有两点：使用严格受限的高效 HTML 标签以及使用静态网</tspan><tspan y="48.1" x="8" style="white-space:pre">页缓存技术来提高网络访问静态资源的性能和用户体验。</tspan></text></g><g ed:width="514" id="348" transform="matrix(1,0,0,1,724,4011)" ed:parentid="128" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">&lt;video>标签载入解析时会去直接请求src里面的资源内容，这样就占用了浏览器的下载线</tspan><tspan y="31.1" x="8" style="white-space:pre">程，阻塞了页面关键资源的下载</tspan></text></g><g ed:width="514" id="350" transform="matrix(1,0,0,1,724,4057)" ed:parentid="128" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">总结来看，使用AMP提升页面性能的基本的原则如下： 只允许异步的script脚本；只加载静态</tspan><tspan y="31.1" x="8" style="white-space:pre">的资源；不能让内容阻塞渲染；不在关键路径中加载第三方JavaScript；所有的CSS必须内</tspan><tspan y="48.1" x="8" style="white-space:pre">联；字体使用声明必须高效；最小化样式声明；只运行GPU加速的动画；处理好资源加载顺序</tspan><tspan y="65.1" x="8" style="white-space:pre">问题；页面必须立即加载；提升AMP元素性能</tspan></text></g><g ed:width="514" id="352" transform="matrix(1,0,0,1,714,4137)" ed:parentid="130" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">选择浏览器调试工具设置中的show userAgent Shadow DOM，就可以看到Shadow DOM</tspan><tspan y="31.1" x="8" style="white-space:pre">里的内容</tspan></text></g><g ed:width="514" id="354" transform="matrix(1,0,0,1,714,4183)" ed:parentid="130" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Shadow DOM是HTML的一个规范，它允许浏览器开发者封装自己的HTML标签、CSS样式和</tspan><tspan y="31.1" x="8" style="white-space:pre">特定的JavaScript代码，同时也可以让开发人员创建类似&lt;video>这样的自定义一级标签，创</tspan><tspan y="48.1" x="8" style="white-space:pre">建这些新标签内容和相关的 API 被称为 WebComponent。</tspan></text></g><g ed:width="514" id="356" transform="matrix(1,0,0,1,714,4246)" ed:parentid="130" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">利用Web Component API创建实现一个Shadow DOM时需要注意哪些方面：注册的</tspan><tspan y="31.1" x="8" style="white-space:pre">Shadow host名称不能与浏览器自带的原生Shadow host名称相同；注意样式模块的隔离，</tspan><tspan y="48.1" x="8" style="white-space:pre">一定要保证当前的Shadow DOM样式只在当前Shadow DOM内生效；暴露合理的有效属性</tspan><tspan y="65.1" x="8" style="white-space:pre">配置和DOM API接口；如果需要在实际项目中使用，我们还需要解决好如何构建打包的问题</tspan></text></g><g ed:width="514" id="359" transform="matrix(1,0,0,1,738,4326)" ed:parentid="132" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">CoffeeScript的创建者Jeremy Ashkenas借鉴了部分其他语言简洁、开发高效的特性，重新定</tspan><tspan y="31.1" x="8" style="white-space:pre">义了一套语法规则，然后按照统一的规则转译成规范、可读、默认在严格模式下运行的</tspan><tspan y="48.1" x="8" style="white-space:pre">JavaScript代码，这样就有效地保证了最后运行的JavaScript代码是具有一定规范且风格统一</tspan><tspan y="65.1" x="8" style="white-space:pre">的，而CoffeeScript本身定义的语法规则也是十分高效且带有较好设计规范的。相比之下，</tspan><tspan y="82.1" x="8" style="white-space:pre">CoffeeScript语法更加简洁易用，限制避免了eval、with这类不安全语法的使用。</tspan></text></g><g ed:width="514" id="361" transform="matrix(1,0,0,1,738,4423)" ed:parentid="132" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">在工程开发实践中，ECMAScript 6的应用也很快被推广并分为两个方向：一是用于浏览器端</tspan><tspan y="31.1" x="8" style="white-space:pre">应用开发，由于浏览器版本较多，需要将ECMAScript 6转译为ECMAScript 5的语法运行，其</tspan><tspan y="48.1" x="8" style="white-space:pre">实这跟CoffeeScript的使用方式是一样的；二是Node端的应用开发，由于Node环境对新版</tspan><tspan y="65.1" x="8" style="white-space:pre">本特性支持较为完善，因此可以使用ECMAScript 6的新特性，尤其是对于完善或增强类特性</tspan><tspan y="82.1" x="8" style="white-space:pre">的支持，能够大大提升开发效率，完善功能实现效果。</tspan></text></g><g ed:width="507" id="363" transform="matrix(1,0,0,1,738,4520)" ed:parentid="132" ed:height="22.5"><path d="M0,22.5L507,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">TypeScript相对于ECMAScript 6+标准的差异性很小，大部分与ECMAScript 6+保持一致。</tspan></text></g><g ed:width="514" id="365" transform="matrix(1,0,0,1,738,4549)" ed:parentid="132" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">JSX语法的官方声明，使用它的原因是其定义了更简洁且支持对应DOM属性的树状结构描述语</tspan><tspan y="31.1" x="8" style="white-space:pre">法</tspan></text></g><g ed:width="514" id="367" transform="matrix(1,0,0,1,738,4595)" ed:parentid="132" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">不同的JavaScript衍生脚本均具有一些共性：基于JavaScript，是JavaScript的超集；适用于</tspan><tspan y="31.1" x="8" style="white-space:pre">特定的场景；具有自己的规范；可以按一定的规则解释运行或转译成JavaScript运行</tspan></text></g><g ed:width="514" id="369" transform="matrix(1,0,0,1,738,4641)" ed:parentid="132" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端脚本语言的演进过程主要包括以下几个阶段：ECMAScript 5、CoffeeScript、</tspan><tspan y="31.1" x="8" style="white-space:pre">ECMAScript 6+、TypeScript和衍生脚本。</tspan></text></g><g ed:width="514" id="371" transform="matrix(1,0,0,1,736,4687)" ed:parentid="134" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">ECMAScript 5于2009年12月发布，内容主要包括严格模式、JSON对象、新增Object接口、</tspan><tspan y="31.1" x="8" style="white-space:pre">新增Array接口和Function.prototype.bind。可以认为ECMAScript 5规范的推出在原来没有</tspan><tspan y="48.1" x="8" style="white-space:pre">规范的JavaScript语法上添加了有限的限制标准。其中最重要的一条可能就是严格模式的提出</tspan></text></g><g ed:width="514" id="373" transform="matrix(1,0,0,1,736,4750)" ed:parentid="134" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">IE8更低版本的浏览器中不能直接使用JSON的解析方法。不过现在我们通常可以在浏览器中添</tspan><tspan y="31.1" x="8" style="white-space:pre">加es5-shim来增加浏览器对ECMAScript 5功能的支持，让浏览器支持JSON对象的解析</tspan></text></g><g ed:width="514" id="375" transform="matrix(1,0,0,1,736,4796)" ed:parentid="134" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">EECMAScript 6借鉴了ECMAScript 5和其他语言的特性，并在此基础上进行了补充和增强，</tspan><tspan y="31.1" x="8" style="white-space:pre">最终形成了一套完整的特性集合，使得JavaScript语言规范更加高效、严谨、完善。例如字符</tspan><tspan y="48.1" x="8" style="white-space:pre">串模板、集合、箭头函数、Promise、for...of循环等均是借鉴其他语言的优秀特性而增加的功</tspan><tspan y="65.1" x="8" style="white-space:pre">能点，class类和import/export模块规范则可以认为是对原有ECMAScript标准缺失特性的补</tspan><tspan y="82.1" x="8" style="white-space:pre">充，迭代器、生成器、解构赋值、函数参数等可认为是对原有标准特性的增强。</tspan></text></g><g ed:width="514" id="377" transform="matrix(1,0,0,1,736,4893)" ed:parentid="134" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">有几个需要注意的地方：一是let和const都只能作为块级作用域变量的声明，且只能在块作用</tspan><tspan y="31.1" x="8" style="white-space:pre">域内生效，块内声明的变量无法在块级外层引用；二是使用 const 声明的变量必须进行初始化</tspan><tspan y="48.1" x="8" style="white-space:pre">赋值，而且一旦赋值就不能再进行二次修改赋值；三是使用 let、const 在全局作用域下声明</tspan><tspan y="65.1" x="8" style="white-space:pre">的变量不会作为属性添加到全局作用域对象里面，这点和 var 是不同的；四是通过测试，使用</tspan><tspan y="82.1" x="8" style="white-space:pre">let、const赋值语句的执行速度比使用var快约65%左右</tspan></text></g><g ed:width="514" id="379" transform="matrix(1,0,0,1,736,4990)" ed:parentid="134" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">ECMAScript 6中还添加了更多关于数组迭代的方法：entries()、keys()和values()，均可用来</tspan><tspan y="31.1" x="8" style="white-space:pre">遍历数组。它们都返回一个迭代器对象，也可以用for...of循环进行遍历，区别是keys()是对数</tspan><tspan y="48.1" x="8" style="white-space:pre">组键名进行遍历、values()是对数组键值进行遍历，entries()是对数组中键值对进行遍历，另</tspan><tspan y="65.1" x="8" style="white-space:pre">外Array.prototype[Symbol.iterator]也可以用来获取遍历数组对象的迭代器</tspan></text></g><g ed:width="514" id="381" transform="matrix(1,0,0,1,736,5070)" ed:parentid="134" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">怎样区分Promise/A+规范和Promise/A规范：符合Promise/A+规范的promise实现一般以</tspan><tspan y="31.1" x="8" style="white-space:pre">then方法为交互核心；Promise/A+规范要求onFulfilled或onRejected返回promise后的处理</tspan><tspan y="48.1" x="8" style="white-space:pre">过程必须是作为函数来调用，而且调用过程必须是异步的；Promise/A+规范严格定义了then</tspan><tspan y="65.1" x="8" style="white-space:pre">方法链式调用时onFulfilled或onRejected的调用顺序。</tspan></text></g><g ed:width="514" id="383" transform="matrix(1,0,0,1,736,5150)" ed:parentid="134" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Reflect可以理解为原有对象上的一个引用代理，它用于对原有对象进行赋值或取值操作，但不</tspan><tspan y="31.1" x="8" style="white-space:pre">会触发对象属性的getter或setter调用，而直接使用=对对象进行赋值或取值操作会自动触发</tspan><tspan y="48.1" x="8" style="white-space:pre">getter或setter方法</tspan></text></g><g ed:width="514" id="385" transform="matrix(1,0,0,1,736,5213)" ed:parentid="134" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">SIMD（single instruction, multiple data）代表的是单指令多数据流，涉及并行计算范畴的</tspan><tspan y="31.1" x="8" style="white-space:pre">语法指令，可以看出未来 JavaScript 有可能会在并行计算领域内使用</tspan></text></g><g ed:width="514" id="387" transform="matrix(1,0,0,1,714,5259)" ed:parentid="136" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">简单回顾一下CSS有哪几类选择器：id选择器、类选择器、元素选择器、组合选择器、伪类、</tspan><tspan y="31.1" x="8" style="white-space:pre">伪元素等。一般认为CSS中选择器属性优先级顺序为！important > 内联样式（权重1000）</tspan><tspan y="48.1" x="8" style="white-space:pre">>id选择器（权重100）> 类选择器（权重10）> 元素选择器（权重1），多种组合情况按照权</tspan><tspan y="65.1" x="8" style="white-space:pre">重相加的原则来计算，! important优先级最高</tspan></text></g><g ed:width="514" id="389" transform="matrix(1,0,0,1,714,5339)" ed:parentid="136" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">CSS样式统一化，目前主要有三种实现思路：reset、normalize和neat。用reset的方式进行</tspan><tspan y="31.1" x="8" style="white-space:pre">样式统一化的思路：将不同浏览器中标签元素的默认样式全部清除，消除不同浏览器下默认样</tspan><tspan y="48.1" x="8" style="white-space:pre">式的差异性；normalize的做法是在整站样式基本确定的情况下对标签元素统一使用同一个默</tspan><tspan y="65.1" x="8" style="white-space:pre">认样式规则；neat 可以认为是对上面两种实现的综合，因为我们通常不能保证网站界面上的</tspan><tspan y="82.1" x="8" style="white-space:pre">所有元素的内外边距都是确定的，又不想将所有样式都清除后再进行覆盖重写。</tspan></text></g><g ed:width="514" id="391" transform="matrix(1,0,0,1,714,5436)" ed:parentid="136" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">SASS 的预处理实现主要包含模块引用、嵌套、父级选择符、嵌套属性、注释、变量、数据类</tspan><tspan y="31.1" x="8" style="white-space:pre">型、运算、圆括号、函数、篡写、变量默认值、规则指令、控制指令、mixin、继承extend等</tspan><tspan y="48.1" x="8" style="white-space:pre">这些属性。</tspan></text></g><g ed:width="514" id="393" transform="matrix(1,0,0,1,714,5499)" ed:parentid="136" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">一个高效的预处理语法工具一般具有以下特性：变量声明和计算；语法表达式；函数处理；属</tspan><tspan y="31.1" x="8" style="white-space:pre">性的继承；兼容性补全；</tspan></text></g><g ed:width="514" id="409" transform="matrix(1,0,0,1,702,5545)" ed:parentid="138" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">通常前端中，实现动画的方案主要有6种：JavaScript直接实现动画、可伸缩矢量图形</tspan><tspan y="31.1" x="8" style="white-space:pre">（Scalable Vector Graphics, SVG）动画、CSS3 transition、CSS3 animation、Canvas动</tspan><tspan y="48.1" x="8" style="white-space:pre">画、requestAnimationFrame。</tspan></text></g><g ed:width="514" id="411" transform="matrix(1,0,0,1,702,5654)" ed:parentid="138" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">SVG 动画由SVG 元素内部的元素属性控制，通常通过&lt;set>、&lt;animate>、</tspan><tspan y="31.1" x="8" style="white-space:pre">&lt;animateColor>、&lt;animateTransform>、&lt;animateMotion>这几个元素来实现。</tspan></text></g><g ed:width="514" id="413" transform="matrix(1,0,0,1,702,5700)" ed:parentid="138" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">CSS3 animation的动画则可以认为是真正意义上页面内容的CSS3动画，通过对关键帧和循环</tspan><tspan y="31.1" x="8" style="white-space:pre">次数的控制，页面标签元素会根据设定好的样式改变进行平滑过渡，而且关键帧状态的控制一</tspan><tspan y="48.1" x="8" style="white-space:pre">般是通过百分比来控制的，这样我们就可以在这个过程中实现很多动画的动作了</tspan></text></g><g ed:width="514" id="415" transform="matrix(1,0,0,1,702,5763)" ed:parentid="138" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Canvas动画的实现思路和SVG的思路有点类似，都是借助元素标签来达到页面动画的效果，</tspan><tspan y="31.1" x="8" style="white-space:pre">都需要借助对应的一套API来实现，不过SVG的API可以认为主要是通过SVG元素内部的配置规</tspan><tspan y="48.1" x="8" style="white-space:pre">则来实现的，而Canvas则是通过JavaScript API来实现的。</tspan></text></g><g ed:width="514" id="417" transform="matrix(1,0,0,1,702,5826)" ed:parentid="138" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">requestAnimationFrame是前端表现层实现动画的另一种API实现，它的原理和setTimeout</tspan><tspan y="31.1" x="8" style="white-space:pre">及 setInterval 类似，都是通过 JavaScript 持续循环的方法调用来触发动画动作的，但是</tspan><tspan y="48.1" x="8" style="white-space:pre">requestAnimationFrame 是浏览器针对动画专门优化而形成的 API，在实现动画方面性能比</tspan><tspan y="65.1" x="8" style="white-space:pre">setTimeout及setInterval要好，可以将动画每一步的操作方法传入到</tspan><tspan y="82.1" x="8" style="white-space:pre">requestAnimationFrame中，在每一次执行完后进行异步回调来连续触发动画效果</tspan></text></g><g ed:width="514" id="419" transform="matrix(1,0,0,1,702,5923)" ed:parentid="138" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">在项目实践中，一般我们在桌面浏览器端仍然推荐使用JavaScript直接实现动画的方式或SVG</tspan><tspan y="31.1" x="8" style="white-space:pre">动画的实现方式，移动端则可以考虑使用CSS3 transition、CSS3 animation、canvas或</tspan><tspan y="48.1" x="8" style="white-space:pre">requestAnimationFrame</tspan></text></g><g ed:width="514" id="432" transform="matrix(1,0,0,1,702,5608)" ed:parentid="138" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">JavaScript直接实现动画：主要思想是通过 JavaScript 的setInterval方法或setTimeout方法</tspan><tspan y="31.1" x="8" style="white-space:pre">的回调函数来持续调用改变某个元素的CSS样式以达到元素样式持续变化的结果</tspan></text></g><g ed:width="514" id="435" transform="matrix(1,0,0,1,738,5986)" ed:parentid="140" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">目前比较主流的实现方法有两种：一是通过前端或后端判断userAgent来跳转不同的页面完成</tspan><tspan y="31.1" x="8" style="white-space:pre">不同设备浏览器的适配，也就是维护两个不同的站点来根据用户设备进行对应的跳转；二是使</tspan><tspan y="48.1" x="8" style="white-space:pre">用media query媒体查询等手段，让页面根据不同设备浏览器自动改变页面的布局和显示，但</tspan><tspan y="65.1" x="8" style="white-space:pre">不做跳转</tspan></text></g><g ed:width="514" id="437" transform="matrix(1,0,0,1,738,6066)" ed:parentid="140" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">先来总结一下上面这两种方案的所有问题描述：能否使用同一个站点域名避免跳转的问题；能</tspan><tspan y="31.1" x="8" style="white-space:pre">否保证移动端加载的资源内容最优；如何做移动端和桌面端浏览器的差异化功能；如何根据更</tspan><tspan y="48.1" x="8" style="white-space:pre">多的信息进行更加灵活的判断，而不仅仅是userAgent</tspan></text></g><g ed:width="514" id="439" transform="matrix(1,0,0,1,738,6129)" ed:parentid="140" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">结构层响应式设计可以理解成HTML内容的自适应渲染实现方式，即根据不同的设备浏览器渲</tspan><tspan y="31.1" x="8" style="white-space:pre">染不同的页面内容结构，而不是直接进行页面跳转</tspan></text></g><g ed:width="426" id="441" transform="matrix(1,0,0,1,738,6175)" ed:parentid="140" ed:height="22.5"><path d="M0,22.5L426,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">两种不同的设计思路：一是页面内容是在前端渲染，二是页面内容在后端渲染</tspan></text></g><g ed:width="514" id="443" transform="matrix(1,0,0,1,738,6204)" ed:parentid="140" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">表现层响应式的具体实现，至少要了解两个方面的内容：响应式布局和屏幕适配布局。响应式</tspan><tspan y="31.1" x="8" style="white-space:pre">布局的思路比较直接，一般是通过栅格系统来解决百分比方式布局。屏幕适配布局是在移动端</tspan><tspan y="48.1" x="8" style="white-space:pre">解决内容按照不同屏幕大小自动等比例缩放的一种布局计算方式。</tspan></text></g><g ed:width="514" id="445" transform="matrix(1,0,0,1,738,6267)" ed:parentid="140" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">REM方案目前应用广泛。我们知道标签元素的CSS大小尺寸的表示单位主要有像素px、相对父</tspan><tspan y="31.1" x="8" style="white-space:pre">元素大小百分比%、相对于当前对象内文本字体font-size的大小em、相对于文档根元素font-</tspan><tspan y="48.1" x="8" style="white-space:pre">size的大小rem（当然还有新的vh、vw、vmax、vmin，此处先不做讨论</tspan></text></g><g ed:width="514" id="447" transform="matrix(1,0,0,1,738,6330)" ed:parentid="140" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">REM方案目前是移动端上很成熟和使用最广泛的屏幕适配方案，因为相对于zoom属性的设</tspan><tspan y="31.1" x="8" style="white-space:pre">置，更加灵活可控，可以结合不需要缩放的px单位一起使用，所以建议在移动端尽量都用</tspan><tspan y="48.1" x="8" style="white-space:pre">REM来做屏幕适配布局</tspan></text></g><g ed:width="514" id="449" transform="matrix(1,0,0,1,718,6420)" ed:parentid="168" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">包括HTML5新增加的DOM API与AJAX的API在内，这些API可以分成以下几种类型：节点查</tspan><tspan y="31.1" x="8" style="white-space:pre">询型、节点创建型、节点修改型、节点关系型、节点属性型和内容加载型</tspan></text></g><g ed:width="514" id="451" transform="matrix(1,0,0,1,718,6466)" ed:parentid="168" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">jQuery帮我们解决的问题太多了，添加了丰富的API方法的封装和网络操作，这些都是浏览器</tspan><tspan y="31.1" x="8" style="white-space:pre">本身没有的，极大地提升了开发效率。</tspan></text></g><g ed:width="514" id="453" transform="matrix(1,0,0,1,718,6512)" ed:parentid="168" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">jQuery 1.x版本帮我们解决了许多问题： 简化选择器；DOM操作方法； AJAX；事件绑定统</tspan><tspan y="31.1" x="8" style="white-space:pre">一处理； 延时对象；兼容性实现；</tspan></text></g><g ed:width="514" id="455" transform="matrix(1,0,0,1,718,6558)" ed:parentid="168" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">想要高效地使用jQuery，可以参考以下的优化建议和原则：（1）尽可能使用id选择器进行</tspan><tspan y="31.1" x="8" style="white-space:pre">DOM查询操作，不要使用组合选择器；（2）缓存一切需要复用的jQuery DOM对象，使用</tspan><tspan y="48.1" x="8" style="white-space:pre">find()子查询；（3）不要滥用jQuery，尽量使用原生的代码代替；（4）尽可能使用jQuery的</tspan><tspan y="65.1" x="8" style="white-space:pre">静态方法；（5）使用事件代理，不要直接使用元素的事件绑定；（6）尽量使用较新的 </tspan><tspan y="82.1" x="8" style="white-space:pre">jQuery 版本；（7）尽可能使用链式写法来提高编程效率和代码运行效率。</tspan></text></g><g ed:width="514" id="457" transform="matrix(1,0,0,1,688,6655)" ed:parentid="170" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">MVC可以认为是一种开发设计模式，其基本思路是将DOM交互的内容分为数据模型、视图和</tspan><tspan y="31.1" x="8" style="white-space:pre">事件控制函数三个部分，并对它们进行统一管理。Model 用来存放请求的数据结果和数据对</tspan><tspan y="48.1" x="8" style="white-space:pre">象，View 用于页面 DOM 的更新与修改，Controller 则用于根据前端路由条件（例如不同的</tspan><tspan y="65.1" x="8" style="white-space:pre">HASH路由）来调用不同Model给View渲染不同的数据内容</tspan></text></g><g ed:width="514" id="459" transform="matrix(1,0,0,1,688,6735)" ed:parentid="170" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">MVC和MVP不同的是，用户在进行DOM修改操作时将通过View上的行为触发，然后将修改</tspan><tspan y="31.1" x="8" style="white-space:pre">通知给Presenter来完成后面的Model修改和其他View的更新，而MVC模式下，用户的操作是</tspan><tspan y="48.1" x="8" style="white-space:pre">直接通过Controller来控制的。Presenter和View的操作绑定通常是双向的，View的改变一般</tspan><tspan y="65.1" x="8" style="white-space:pre">会触发Presenter的动作，Presenter的动作也会改变View。</tspan></text></g><g ed:width="514" id="461" transform="matrix(1,0,0,1,688,6815)" ed:parentid="170" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">MVVM则可以认为是一个自动化的MVP框架，并且使用ViewModel代替了Presenter，即数</tspan><tspan y="31.1" x="8" style="white-space:pre">据Model的调用和模板内容的渲染不需要我们主动操作，而是ViewModel自动来触发完成，</tspan><tspan y="48.1" x="8" style="white-space:pre">任何用户的操作也都是通过ViewModel的改变来驱动的</tspan></text></g><g ed:width="514" id="463" transform="matrix(1,0,0,1,688,6878)" ed:parentid="170" ed:height="192.5"><path d="M0,192.5L514,192.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">数据变更检测方式：手动触发指令绑定是比较直接的实现方式，主要思路是通过在数据对象上</tspan><tspan y="31.1" x="8" style="white-space:pre">定义get()方法和set()方法（当然也可以使用其他命名方法），调用时手动触发get()或set()函</tspan><tspan y="48.1" x="8" style="white-space:pre">数来获取、修改数据，改变数据后会主动触发get()和set()函数中View层的重新渲染功能；</tspan><tspan y="65.1" x="8" style="white-space:pre">Angularjs是通过检查脏数据来进行View层操作更新的，脏检测的基本原理是在ViewModel对</tspan><tspan y="82.1" x="8" style="white-space:pre">象的某个属性值发生变化时找到与这个属性值相关的所有元素，然后再比较数据变化，如果变</tspan><tspan y="99.1" x="8" style="white-space:pre">化则进行Directive指令调用，对这个元素进行重新扫描渲染；数据劫持是目前使用比较广泛的</tspan><tspan y="116.1" x="8" style="white-space:pre">方式。其基本思路是使用 Object.defineProperty 和Object.defineProperies对ViewModel</tspan><tspan y="133.1" x="8" style="white-space:pre">数据对象进行属性get()和set()的监听，当有数据读取和赋值操作时则扫描元素节点，运行指定</tspan><tspan y="150.1" x="8" style="white-space:pre">对应节点的Directive指令，这样ViewModel使用通用的等号赋值就可以了；ECMAScript 6的</tspan><tspan y="167.1" x="8" style="white-space:pre">Proxy特性，它可以用于在已有的对象基础上重新定义一个对象，并重新定义对象原型上的方</tspan><tspan y="184.1" x="8" style="white-space:pre">法，包括get()方法和set()方法，同时我们也将它和defineProperty进行了比较。</tspan></text></g><g ed:width="514" id="465" transform="matrix(1,0,0,1,735,7077)" ed:parentid="172" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">通常认为，Virtual DOM是一个能够直接描述一段HTML DOM结构的JavaScript对象，浏览</tspan><tspan y="31.1" x="8" style="white-space:pre">器可以根据它的结构按照一定规则创建出确定唯一的HTML DOM结构。整体来看，Virtual </tspan><tspan y="48.1" x="8" style="white-space:pre">DOM的交互模式减少了MVVM或其他框架中对DOM的扫描或操作次数，并且在数据发生改</tspan><tspan y="65.1" x="8" style="white-space:pre">变后只在合适的地方根据JavaScript对象来进行最小化的页面DOM操作，避免大量重新渲</tspan><tspan y="82.1" x="8" style="white-space:pre">染。</tspan></text></g><g ed:width="514" id="467" transform="matrix(1,0,0,1,735,7174)" ed:parentid="172" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">使用Virtual DOM模式来控制页面DOM结构更新的过程：创建原始页面或组件的Virtual </tspan><tspan y="31.1" x="8" style="white-space:pre">DOM结构，用户操作后需要进行DOM更新时，生成用户操作后页面或组件的Virtual DOM结</tspan><tspan y="48.1" x="8" style="white-space:pre">构并与之前的结构进行对比，找到最小变化Virtual DOM的差异化描述对象，最后把差异化的</tspan><tspan y="65.1" x="8" style="white-space:pre">Virtual DOM根据特定的规则渲染到页面上。</tspan></text></g><g ed:width="514" id="469" transform="matrix(1,0,0,1,735,7254)" ed:parentid="172" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Virtual DOM 最本质的区别在于减少了对 DOM 对象的操作，通过JavaScript对象来代替</tspan><tspan y="31.1" x="8" style="white-space:pre">DOM对象树，并且在页面结构改变时进行最小代价的DOM渲染操作，提高了交互的性能和效</tspan><tspan y="48.1" x="8" style="white-space:pre">率。</tspan></text></g><g ed:width="514" id="471" transform="matrix(1,0,0,1,698,7317)" ed:parentid="174" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端MNV*开发模式。可以简单理解为 Model-NativeView-*，而后面的*可以表示 Virtual </tspan><tspan y="31.1" x="8" style="white-space:pre">DOM 或MVVM中的ViewModel，我们也可以自己使用Controller来实现调用的方式。</tspan></text></g><g ed:width="514" id="473" transform="matrix(1,0,0,1,698,7363)" ed:parentid="174" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">MNV*框架端的主要任务是解析Model、ViewModel或Virtual DOM组成JSBridge协议串并</tspan><tspan y="31.1" x="8" style="white-space:pre">发送，而Native端的实现将会比较复杂，需要处理不同的标签元素解析，例如遇到</tspan><tspan y="48.1" x="8" style="white-space:pre">&lt;TextView>标签则创建TextView控件，遇到&lt;Layout>标签创建Layout控件，还可能需要处</tspan><tspan y="65.1" x="8" style="white-space:pre">理事件的绑定等，</tspan></text></g><g ed:width="514" id="475" transform="matrix(1,0,0,1,702,7469)" ed:parentid="176" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端页面开发应做到结构层（HTML）、表现层（CSS）、行为层（JavaScript）分离，保证</tspan><tspan y="31.1" x="8" style="white-space:pre">它们之间的最小耦合，这对前期开发和后期维护都是至关重要的</tspan></text></g><g ed:width="514" id="477" transform="matrix(1,0,0,1,702,7515)" ed:parentid="176" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">防御性编程是指通过检测任何可能存在的逻辑异常问题的代码实现，提高脚本执行过程健壮性</tspan><tspan y="31.1" x="8" style="white-space:pre">的一种编程手段。</tspan></text></g><g ed:width="514" id="479" transform="matrix(1,0,0,1,702,7561)" ed:parentid="178" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">可以认为所谓的组件通常是指采用代码管理中的分治思想，将复杂的项目代码结构拆分成多个</tspan><tspan y="31.1" x="8" style="white-space:pre">独立、简单、解耦合的结构或文件的形式进行分开管理，达到让项目代码和模块更加清晰的目</tspan><tspan y="48.1" x="8" style="white-space:pre">的，而组件规范则是我们进行拆分、组织、管理项目代码方法的一种约定。</tspan></text></g><g ed:width="514" id="481" transform="matrix(1,0,0,1,702,7624)" ed:parentid="178" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">从 Web 前端的角度来看，UI 层的规范能带来一些明显的好处：UI 层风格统一化； 增加UI层</tspan><tspan y="31.1" x="8" style="white-space:pre">复用性；更符合用户的体验习惯；增加了开发规范的统一性；</tspan></text></g><g ed:width="514" id="483" transform="matrix(1,0,0,1,702,7670)" ed:parentid="178" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">就规范种类来说，主要包括AMD（Asynchronous Module Definition，异步模块定义）、</tspan><tspan y="31.1" x="8" style="white-space:pre">CMD （Common Module Definition，通用模块定义）、CommonJS、import/export等</tspan></text></g><g ed:width="514" id="485" transform="matrix(1,0,0,1,702,7716)" ed:parentid="178" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">AMD是运行在浏览器端的模块化异步加载规范，主要以requireJS为代表，基本原理是定义</tspan><tspan y="31.1" x="8" style="white-space:pre">define和require方法异步请求对应的javascript模块文件到浏览器端运行</tspan></text></g><g ed:width="514" id="488" transform="matrix(1,0,0,1,702,7762)" ed:parentid="178" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">CMD是Seajs提出的一种模块化规范，在浏览器端调用类似CommonJS的书写方式来进行模块</tspan><tspan y="31.1" x="8" style="white-space:pre">引用，但却不是完全的 CommonJS 规范。CMD 遵循按需执行依赖的原则，只有在用到某个</tspan><tspan y="48.1" x="8" style="white-space:pre">模块的时候才会执行模块内部的require语句，同时加载完某个依赖模块文件后并不立即执</tspan><tspan y="65.1" x="8" style="white-space:pre">行，在所有依赖模块加载完成后进入主模块逻辑，遇到模块运行语句的时候才执行对应的模块</tspan></text></g><g ed:width="514" id="490" transform="matrix(1,0,0,1,702,7842)" ed:parentid="178" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">CommonJS是Node端使用的JavaScript模块化规范，使用require进行模块引入，并使用</tspan><tspan y="31.1" x="8" style="white-space:pre">modules.exports 来定义模块导出。</tspan></text></g><g ed:width="514" id="492" transform="matrix(1,0,0,1,702,7888)" ed:parentid="178" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">import/export是ECMAScript 6定义的JavaScript模块引用方式，是唯一一个遵循JavaScript</tspan><tspan y="31.1" x="8" style="white-space:pre">语言标准的模块化规范</tspan></text></g><g ed:width="514" id="494" transform="matrix(1,0,0,1,702,7934)" ed:parentid="178" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">目前实现组件化的方案也已经越来越多：WebComponent组件化、MVVM框架组件化、基于</tspan><tspan y="31.1" x="8" style="white-space:pre">Virutal DOM框架的组件化、直接基于目录管理的组件化等</tspan></text></g><g ed:width="514" id="496" transform="matrix(1,0,0,1,702,8043)" ed:parentid="178" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">MVVM框架组件化，其基本思路是将页面中的模块按照元素来划分，并将与这个模块相关的 </tspan><tspan y="31.1" x="8" style="white-space:pre">MVVM 描述语法、CSS 样式、执行脚本放在同一个文件里进行引用</tspan></text></g><g ed:width="514" id="498" transform="matrix(1,0,0,1,702,7980)" ed:parentid="178" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Web Component组件化：Polymer框架的设计主要分成三个层次，1． 基础层</tspan><tspan y="31.1" x="8" style="white-space:pre">（platform.js）：基本实现库；2． 核心层（polymer.js）：可以理解为实现基础层的封装</tspan><tspan y="48.1" x="8" style="white-space:pre">库；3． 元素层：建立在核心层之上的UI组件或非UI组件</tspan></text></g><g ed:width="514" id="500" transform="matrix(1,0,0,1,702,8089)" ed:parentid="178" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Virtual DOM的组件化方案：在组件化设计实现方面，它使用的仍是和Polymer类似的组织管</tspan><tspan y="31.1" x="8" style="white-space:pre">理方式，所不同的是将HTML的结构描述换了另一种语法形式且JavaScript的调用API不同。</tspan></text></g><g ed:width="514" id="502" transform="matrix(1,0,0,1,702,8135)" ed:parentid="178" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">基于目录管理的通用组件化实践：对组件的三层结构进行文件划分，各个文件负责自己的功能</tspan><tspan y="31.1" x="8" style="white-space:pre">部分，然后在构建生成的时候进行组件中不同类文件内容的打包处理</tspan></text></g><g ed:width="514" id="504" transform="matrix(1,0,0,1,702,8181)" ed:parentid="178" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">来看一下设计一个高效的组件化规范应该解决哪些问题：组件之间独立、松耦合；组件间嵌套</tspan><tspan y="31.1" x="8" style="white-space:pre">使用；组件间通信； 组件公用部分设计；组件的构建打包；异步组件的加载模式；组件继承与</tspan><tspan y="48.1" x="8" style="white-space:pre">复用性；私有组件的统一管理；根据特定场景进行扩展或自定义；</tspan></text></g><g ed:width="514" id="506" transform="matrix(1,0,0,1,690,8244)" ed:parentid="180" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">构建的流程主要分成7个基本步骤（不同的构建工具各有差异，但基本原理是类似的）：读取</tspan><tspan y="31.1" x="8" style="white-space:pre">入口文件→分析模块引用→按照引用加载模块→模块文件编译处理→模块文件合并→文件优化</tspan><tspan y="48.1" x="8" style="white-space:pre">处理→写入生成目录</tspan></text></g><g ed:width="514" id="508" transform="matrix(1,0,0,1,690,8307)" ed:parentid="180" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">现代前端实际开发中通常希望构建工具帮我们处理哪些问题： 模块分析引入；模块化规范支</tspan><tspan y="31.1" x="8" style="white-space:pre">持； CSS编译、自动合并图片；HTML、JavaScript、CSS资源压缩优化；HTML路径分析替</tspan><tspan y="48.1" x="8" style="white-space:pre">换； 区分开发和上线目录环境；异步文件打包方案；文件目录白名单设置；</tspan></text></g><g ed:width="514" id="510" transform="matrix(1,0,0,1,702,8370)" ed:parentid="182" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">获取和衡量一个页面的性能，主要可以通过以下几个方面：Performance Timing API、</tspan><tspan y="31.1" x="8" style="white-space:pre">Profile工具、页面埋点计时、资源加载时序图分析</tspan></text></g><g ed:width="514" id="512" transform="matrix(1,0,0,1,702,8416)" ed:parentid="182" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Performance Timing API描述了页面资源从加载到解析各个阶段的执行关键点时间记录，但</tspan><tspan y="31.1" x="8" style="white-space:pre">是无法统计JavaScript执行过程中系统资源的占用情况。</tspan></text></g><g ed:width="514" id="514" transform="matrix(1,0,0,1,702,8462)" ed:parentid="182" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">除了Performance Timing的关键过程耗时计算，我们还希望检测代码的具体解析或执行时</tspan><tspan y="31.1" x="8" style="white-space:pre">间，这就不能写很多的 console.profile()和console.profileEnd()来逐段实现，为了更加简单</tspan><tspan y="48.1" x="8" style="white-space:pre">地处理这种情况，往往选择通过脚本埋点计时的方式来统计每部分代码的运行时间。</tspan></text></g><g ed:width="514" id="516" transform="matrix(1,0,0,1,702,8525)" ed:parentid="182" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">借助浏览器或其他工具的资源加载时序图来帮助分析页面资源加载过程中的性能问题。这种方</tspan><tspan y="31.1" x="8" style="white-space:pre">法可以粗粒度地宏观分析浏览器的所有资源文件请求耗时和文件加载顺序情况，如保证 CSS </tspan><tspan y="48.1" x="8" style="white-space:pre">和数据请求等关键性资源优先加载，JavaScript 文件和页面中非关键性图片等内容延后加载。</tspan></text></g><g ed:width="514" id="518" transform="matrix(1,0,0,1,702,8588)" ed:parentid="182" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">目前来看，前端优化的策略很多，总结起来主要包括网络加载类、页面渲染类、CSS优化类、</tspan><tspan y="31.1" x="8" style="white-space:pre">JavaScript执行类、缓存类、图片类、架构协议类等几类</tspan></text></g><g ed:width="514" id="520" transform="matrix(1,0,0,1,702,8634)" ed:parentid="182" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">相对于桌面端浏览器，移动端Web浏览器上有一些较为明显的特点：设备屏幕较小、新特性兼</tspan><tspan y="31.1" x="8" style="white-space:pre">容性较好、支持一些较新的HTML5和CSS3特性、需要与Native应用交互等。</tspan></text></g><g ed:width="514" id="524" transform="matrix(1,0,0,1,726,8680)" ed:parentid="184" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">通常页面上用户访问统计主要包括PV（Page View）、UV（Unique Visitor）、VV（Visit </tspan><tspan y="31.1" x="8" style="white-space:pre">View）、IP（访问站点的不同IP数）等。</tspan></text></g><g ed:width="407" id="526" transform="matrix(1,0,0,1,726,8726)" ed:parentid="184" ed:height="22.5"><path d="M0,22.5L407,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">结合其他的辅助信息来识别统计不同用户的UV，这里介绍两种常用的方式</tspan></text></g><g ed:width="514" id="528" transform="matrix(1,0,0,1,726,8755)" ed:parentid="184" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">一般用于分析用户行为的参数指标主要包括：页面点击量、用户点击流、用户访问路径、用户</tspan><tspan y="31.1" x="8" style="white-space:pre">点击热力图、用户转换率、用户访问时长分析和用户访问内容分析等</tspan></text></g><g ed:width="514" id="530" transform="matrix(1,0,0,1,726,8801)" ed:parentid="184" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">浏览器提供了try...catch和window.onerror的两种机制来帮助我们获取用户页面的脚本错误信</tspan><tspan y="31.1" x="8" style="white-space:pre">息</tspan></text></g><g ed:width="514" id="532" transform="matrix(1,0,0,1,726,8847)" ed:parentid="184" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">一般来说，使用try...catch可以捕捉前端JavaScript的运行时错误，同时拿到出错的信息，例如</tspan><tspan y="31.1" x="8" style="white-space:pre">错误信息描述、堆栈、行号、列号、具体的出错文件信息等</tspan></text></g><g ed:width="514" id="534" transform="matrix(1,0,0,1,726,8893)" ed:parentid="184" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">开发者怎样知道用户端打开页面时的性能如何呢，一个可行的方法就是将页面性能数据进行上</tspan><tspan y="31.1" x="8" style="white-space:pre">报统计，例如将Performance Timing数据、开发者自己埋点的性能统计数据通过页面</tspan><tspan y="48.1" x="8" style="white-space:pre">JavaScript统一上报到远程服务器，在服务器端统计计算性能数据的平均值来评判前端具体页</tspan><tspan y="65.1" x="8" style="white-space:pre">面的性能情况。</tspan></text></g><g ed:width="514" id="536" transform="matrix(1,0,0,1,750,8973)" ed:parentid="186" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">title、keywords、description是可以在HTML的&lt;meta>标签内定义的，有助于搜索引擎抓</tspan><tspan y="31.1" x="8" style="white-space:pre">取到网页的内容</tspan></text></g><g ed:width="514" id="538" transform="matrix(1,0,0,1,750,9019)" ed:parentid="186" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">一般title的设置要尽量能够概括页面的内容，可以使用多个title关键字组合的形式，并用分隔</tspan><tspan y="31.1" x="8" style="white-space:pre">符连接起来。</tspan></text></g><g ed:width="434" id="540" transform="matrix(1,0,0,1,750,9065)" ed:parentid="186" ed:height="22.5"><path d="M0,22.5L434,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">keywords是目前用于页面内容检索的辅助关键字信息，容易被搜索引擎检索到</tspan></text></g><g ed:width="514" id="542" transform="matrix(1,0,0,1,750,9094)" ed:parentid="186" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">在搜索引擎检索结果中，description 更重要的作用是作为搜索结果的描述，而不是作为权值</tspan><tspan y="31.1" x="8" style="white-space:pre">计算的重要参考因素</tspan></text></g><g ed:width="514" id="544" transform="matrix(1,0,0,1,750,9140)" ed:parentid="186" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">robots.txt是网站站点用来配置搜索引擎抓取站点内容路径的一种控制方式，放置于站点根目</tspan><tspan y="31.1" x="8" style="white-space:pre">录下。robots.txt可以指导搜索引擎爬虫禁止抓取网站某些内容或只允许抓取哪些内容。</tspan></text></g><g ed:width="514" id="546" transform="matrix(1,0,0,1,678,9186)" ed:parentid="188" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端技术涉及UI界面、数据展示、用户交互等实现，因此作为一名合格的前端工程师就不可避</tspan><tspan y="31.1" x="8" style="white-space:pre">免地要和团队其他成员进行协作沟通，如产品经理、UI设计师、交互设计师、后台工程师、运</tspan><tspan y="48.1" x="8" style="white-space:pre">维工程师等。</tspan></text></g><g ed:width="514" id="548" transform="matrix(1,0,0,1,678,9249)" ed:parentid="188" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">通俗地说就是你向别人传达信息或从别人那里获取信息的能力。沟通技巧就是为了高效传达信</tspan><tspan y="31.1" x="8" style="white-space:pre">息或获取信息使用的方法和手段。</tspan></text></g><g ed:width="301" id="550" transform="matrix(1,0,0,1,678,9295)" ed:parentid="188" ed:height="22.5"><path d="M0,22.5L301,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">尽量推荐使用RESTful的通用协议规范来定义数据接口</tspan></text></g><g ed:width="514" id="556" transform="matrix(1,0,0,1,727,9351)" ed:parentid="190" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端开发者都热衷于在Node上开发有以下几个原因：Node 是一个基于事件驱动和无阻塞的</tspan><tspan y="31.1" x="8" style="white-space:pre">服务器，非常适合处理并发请求；ode 端运行的是 JavaScript，对于前端开发者来说学习成</tspan><tspan y="48.1" x="8" style="white-space:pre">本较低；作为一名前端工程师确实需要掌握一门后台语言来辅助自己的技术学习；Node 端处</tspan><tspan y="65.1" x="8" style="white-space:pre">理数据渲染的方式能够解决前端无法解决的问题；</tspan></text></g><g ed:width="514" id="558" transform="matrix(1,0,0,1,887,9431)" ed:parentid="226" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">进行Node后端上的应用开发通常需要具备哪些方面的基础知识和技术：服务器知识基础；简</tspan><tspan y="31.1" x="8" style="white-space:pre">单的数据库设计能力；后端MVC设计理念；后端异步；模块化思想；中间件技术；接口设计规</tspan><tspan y="48.1" x="8" style="white-space:pre">范；后端部署技术和基本运维能力；</tspan></text></g><g ed:width="514" id="560" transform="matrix(1,0,0,1,867,9494)" ed:parentid="228" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Node开发一般用的比较多的方案就是使用Express作为Web框架进行小型的Web站点建设，</tspan><tspan y="31.1" x="8" style="white-space:pre">与之结合的主流技术则以M(Mysql)、E(Express)、A(Angular)、N(Node)最为典型</tspan></text></g><g ed:width="514" id="562" transform="matrix(1,0,0,1,887,9540)" ed:parentid="230" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">SPA场景下SEO的问题：使用Node后端数据渲染（有人称之为直出，后文中也称之为直出</tspan><tspan y="31.1" x="8" style="white-space:pre">层），在页面请求时将内容渲染到页面上输出，那么搜索引擎获取到的HTML就已经包含页面</tspan><tspan y="48.1" x="8" style="white-space:pre">完整的内容，页面也就更容易被检索到了。</tspan></text></g><g ed:width="514" id="564" transform="matrix(1,0,0,1,887,9603)" ed:parentid="230" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端页面渲染展示缓慢的问题：直出层接受前端的路由请求，并在Node端的Controller层异</tspan><tspan y="31.1" x="8" style="white-space:pre">步请求服务接入层接口，获得Model数据并进行组装拼接，然后提取相对应的Node端View模</tspan><tspan y="48.1" x="8" style="white-space:pre">板渲染出HTML输出给用户浏览器，而不用通过前端JavaScript请求动态数据后渲染。</tspan></text></g><g ed:width="318" id="566" transform="matrix(1,0,0,1,842,9666)" ed:parentid="232" ed:height="22.5"><path d="M0,22.5L318,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前后端同构的核心问题是实现前后台数据渲染的统一性。</tspan></text></g><g ed:width="514" id="568" transform="matrix(1,0,0,1,842,9695)" ed:parentid="232" ed:height="73.5"><path d="M0,73.5L514,73.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前后端同构的网站具有一些明显的优势：（1）可以根据用户的需求方便地选择使用前端渲染</tspan><tspan y="31.1" x="8" style="white-space:pre">数据还是后台直出页面数据；（2）开发者只需维护一套前端代码，而且可以沿用前端原有的</tspan><tspan y="48.1" x="8" style="white-space:pre">项目组件化管理、打包构建方式，根据不同的构建指令生成类似的前后端数据模板或组件在前</tspan><tspan y="65.1" x="8" style="white-space:pre">后端执行解析</tspan></text></g><g ed:width="514" id="570" transform="matrix(1,0,0,1,842,9775)" ed:parentid="232" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前就前后端同构的技术实现上来看，至少有三种思路：数据模板的前端渲染和后台直出、</tspan><tspan y="31.1" x="8" style="white-space:pre">MVVM的前端实现和后台直出、Virtual DOM的前端渲染和后端直出。</tspan></text></g><g ed:width="514" id="572" transform="matrix(1,0,0,1,842,9821)" ed:parentid="232" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">无论选择哪一种前后端同构的实现方案，所需要处理的几个问题是类似的： 前后端框架选择；</tspan><tspan y="31.1" x="8" style="white-space:pre">模板渲染机制；构建打包；渲染和直出区分；</tspan></text></g><g ed:width="349" id="574" transform="matrix(1,0,0,1,823,9867)" ed:parentid="234" ed:height="22.5"><path d="M0,22.5L349,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">关于Native应用、Web应用、Hybrid应用，三者更全面的对比</tspan></text></g><g ed:width="514" id="576" transform="matrix(1,0,0,1,823,9896)" ed:parentid="236" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">以前端为主的Hybrid实现方式：是以完全的前端模式来开发整个应用的，页面开发完成后，通</tspan><tspan y="31.1" x="8" style="white-space:pre">过工具自动打包将前端资源目录装入Native容器中运行</tspan></text></g><g ed:width="514" id="578" transform="matrix(1,0,0,1,823,9942)" ed:parentid="236" ed:height="90.5"><path d="M0,90.5L514,90.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">Native和Web结合的Hybrid方式，主要是指移动端应用中Native和Web功能上的结合开发实</tspan><tspan y="31.1" x="8" style="white-space:pre">现。Native就可以用来实现移动端应用的通用导航菜单、系统UI层、核心界面动效、默认访问</tspan><tspan y="48.1" x="8" style="white-space:pre">界面、高效的消息推送或APP大版本的应用更新等，因为这些功能一般比较稳定，变化不大，</tspan><tspan y="65.1" x="8" style="white-space:pre">而且不涉及需要快速迭代的业务逻辑。而Web端则可用来实现开发迭代速度更快的相关业务层</tspan><tspan y="82.1" x="8" style="white-space:pre">界面逻辑，它很可能是某个Native应用内关联的某个Web轻应用</tspan></text></g><g ed:width="514" id="580" transform="matrix(1,0,0,1,953,10039)" ed:parentid="238" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">在 Hybrid 应用开发时，常常需要在离线的情况下打开页面或者为了让 Hybrid 页面应用加载</tspan><tspan y="31.1" x="8" style="white-space:pre">启动更快，避免长时间等待资源加载过程中造成页面空白的出现。</tspan></text></g><g ed:width="514" id="582" transform="matrix(1,0,0,1,953,10085)" ed:parentid="238" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre"> Hybrid 应用中实现 Web 端资源离线与更新的可行方案都有哪些：ServiceWorker的资源离</tspan><tspan y="31.1" x="8" style="white-space:pre">线与更新；localStorage资源离线缓存与更新；基于增量文件的更新方式；基于文件代码分块</tspan><tspan y="48.1" x="8" style="white-space:pre">的增量更新机制；基于编辑距离的增量更新机制；</tspan></text></g><g ed:width="514" id="584" transform="matrix(1,0,0,1,956,10148)" ed:parentid="240" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端离线包的生成比较简单，一般是通过构建工具将站点资源目录直接压缩，在发布前端页面</tspan><tspan y="31.1" x="8" style="white-space:pre">与静态资源的同时上传离线包到服务器或CDN 上</tspan></text></g><g ed:width="366" id="588" transform="matrix(1,0,0,1,820,10194)" ed:parentid="242" ed:height="22.5"><path d="M0,22.5L366,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">统计的方法很多，一个简单可行的方式就是后台统计上报版本号。</tspan></text></g><g ed:width="439" id="590" transform="matrix(1,0,0,1,820,10223)" ed:parentid="242" ed:height="22.5"><path d="M0,22.5L439,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">即便我们把前端优化做到极致，HTML DOM 的运行机制较慢仍是不可改变的。</tspan></text></g><g ed:width="514" id="592" transform="matrix(1,0,0,1,820,10278)" ed:parentid="200" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">就前端应用开发方向来讲，MVVM、Virtual DOM和同构的技术解决方案依然会延续发展一段</tspan><tspan y="31.1" x="8" style="white-space:pre">时间</tspan></text></g><g ed:width="514" id="594" transform="matrix(1,0,0,1,820,10324)" ed:parentid="200" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">现代前端已经革新到跨端、跨界面的阶段，主流以基于MVVM、Virtual DOM、移动端MNV*</tspan><tspan y="31.1" x="8" style="white-space:pre">思路和前后端同构技术进行开发的项目居多，实现的方向也多种多样</tspan></text></g><g ed:width="514" id="596" transform="matrix(1,0,0,1,940,10370)" ed:parentid="202" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">经过大版本的更新稳定，目前前端三层结构实现已经处于HTML5、CSS3、ECMAScript 6+标</tspan><tspan y="31.1" x="8" style="white-space:pre">准规范结合的阶段，后面标准的新变化也会越来越小</tspan></text></g><g ed:width="514" id="600" transform="matrix(1,0,0,1,844,10416)" ed:parentid="204" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">前端技术效率和性能的提升当然不是仅靠前端框架就能解决的，还需要其他各方面辅助工具的</tspan><tspan y="31.1" x="8" style="white-space:pre">支持，例如高效的调试工具、构建自动化工具、自动发布部署工具等</tspan></text></g><g ed:width="514" id="602" transform="matrix(1,0,0,1,844,10462)" ed:parentid="206" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">浏览器上已经可以实现较多的增强和实用特性，例如 Web Component、Service Worker、</tspan><tspan y="31.1" x="8" style="white-space:pre">IndexDB、WebAssembly、WebRTC、ECMAScript 6+的支持等</tspan></text></g><g ed:width="424" id="608" transform="matrix(1,0,0,1,808,10537)" ed:parentid="210" ed:height="22.5"><path d="M0,22.5L424,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">未来前端也会出现新的应用场景，例如VR、物联网Web化、Web人工智能等</tspan></text></g><g ed:width="510" id="610" transform="matrix(1,0,0,1,856,10624)" ed:parentid="216" ed:height="22.5"><path d="M0,22.5L510,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">这些问题可以归为几类：业务代码类问题、需求变更或需求风险类问题、开会等其他类问题。</tspan></text></g><g ed:width="354" id="612" transform="matrix(1,0,0,1,916,10653)" ed:parentid="218" ed:height="22.5"><path d="M0,22.5L354,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">一个很重要的方面应该就是学会前端项目开发流程设计的能力。</tspan></text></g><g ed:width="514" id="614" transform="matrix(1,0,0,1,916,10682)" ed:parentid="218" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">具体来说就是能否快速地设计建立一个项目开发的Codebase，这里面包括前端框架选型、模</tspan><tspan y="31.1" x="8" style="white-space:pre">块化方案、代码规范化、构建自动化、组件化目录设计、代码优化处理、数据统计、同构项目</tspan><tspan y="48.1" x="8" style="white-space:pre">结构设计等</tspan></text></g><g ed:width="126" id="616" transform="matrix(1,0,0,1,916,10745)" ed:parentid="220" ed:height="22.5"><path d="M0,22.5L126,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">持续性的学习很重要</tspan></text></g><g ed:width="514" id="618" transform="matrix(1,0,0,1,916,10774)" ed:parentid="220" ed:height="39.5"><path d="M0,39.5L514,39.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">作为前端开发者，学习的方式也有很多，例如看别人的技术博客、研究最新的技术方向、阅读</tspan><tspan y="31.1" x="8" style="white-space:pre">开源代码、听技术分享会、看些书等</tspan></text></g><g ed:width="246" id="620" transform="matrix(1,0,0,1,868,10820)" ed:parentid="222" ed:height="22.5"><path d="M0,22.5L246,22.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">一切技术的最终目的都是为产品实现服务的</tspan></text></g><g ed:width="514" id="622" transform="matrix(1,0,0,1,880,10849)" ed:parentid="224" ed:height="56.5"><path d="M0,56.5L514,56.5" fill="none" stroke="#696969" stroke-linejoin="round"/><text class="st3"><tspan y="14.1" x="8" style="white-space:pre">建议大家去看一两本关于产品经理方面的书籍。一是作为整个产品项目流程的下游实现者，有</tspan><tspan y="31.1" x="8" style="white-space:pre">必要去了解一个互联网产品的生命周期是怎样的；二是学习一些常用的产品设计常识，在一定</tspan><tspan y="48.1" x="8" style="white-space:pre">程度上学会分析需求的漏洞和完整性</tspan></text></g><symbol id="plus"><path fill="url(#lg1)" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6z"/><path fill="none" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6zM3,6L9,6M6,3L6,9" stroke="#46a000" stroke-width="0.7"/></symbol><symbol id="minus"><path fill="url(#lg1)" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6z"/><path fill="none" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6zM3,6L9,6" stroke="#46a000" stroke-width="0.7"/></symbol><g ed:togtopicid="101" transform="translate(259,5457)"><use xlink:href="#minus"/></g><g ed:togtopicid="102" transform="translate(528,856)"><use xlink:href="#minus"/></g><g ed:togtopicid="104" transform="translate(479,2622)"><use xlink:href="#minus"/></g><g ed:togtopicid="106" transform="translate(740,157)"><use xlink:href="#minus"/></g><g ed:togtopicid="108" transform="translate(677,915)"><use xlink:href="#minus"/></g><g ed:togtopicid="110" transform="translate(689,1614)"><use xlink:href="#minus"/></g><g ed:togtopicid="114" transform="translate(622,1901)"><use xlink:href="#minus"/></g><g ed:togtopicid="116" transform="translate(619,2367)"><use xlink:href="#minus"/></g><g ed:togtopicid="118" transform="translate(616,2783)"><use xlink:href="#minus"/></g><g ed:togtopicid="120" transform="translate(659,2938)"><use xlink:href="#minus"/></g><g ed:togtopicid="122" transform="translate(641,3243)"><use xlink:href="#minus"/></g><g ed:togtopicid="126" transform="translate(539,4964)"><use xlink:href="#minus"/></g><g ed:togtopicid="128" transform="translate(698,3836)"><use xlink:href="#minus"/></g><g ed:togtopicid="130" transform="translate(688,4222)"><use xlink:href="#minus"/></g><g ed:togtopicid="132" transform="translate(712,4497)"><use xlink:href="#minus"/></g><g ed:togtopicid="134" transform="translate(710,4964)"><use xlink:href="#minus"/></g><g ed:togtopicid="136" transform="translate(688,5393)"><use xlink:href="#minus"/></g><g ed:togtopicid="138" transform="translate(676,5756)"><use xlink:href="#minus"/></g><g ed:togtopicid="140" transform="translate(712,6180)"><use xlink:href="#minus"/></g><g ed:togtopicid="142" transform="translate(524,6922)"><use xlink:href="#minus"/></g><g ed:togtopicid="144" transform="translate(539,8387)"><use xlink:href="#minus"/></g><g ed:togtopicid="146" transform="translate(494,9792)"><use xlink:href="#minus"/></g><g ed:togtopicid="148" transform="translate(494,10586)"><use xlink:href="#minus"/></g><g ed:togtopicid="168" transform="translate(692,6528)"><use xlink:href="#minus"/></g><g ed:togtopicid="170" transform="translate(662,6856)"><use xlink:href="#minus"/></g><g ed:togtopicid="172" transform="translate(709,7187)"><use xlink:href="#minus"/></g><g ed:togtopicid="174" transform="translate(672,7370)"><use xlink:href="#minus"/></g><g ed:togtopicid="176" transform="translate(676,7506)"><use xlink:href="#minus"/></g><g ed:togtopicid="178" transform="translate(676,7893)"><use xlink:href="#minus"/></g><g ed:togtopicid="180" transform="translate(664,8298)"><use xlink:href="#minus"/></g><g ed:togtopicid="182" transform="translate(676,8516)"><use xlink:href="#minus"/></g><g ed:togtopicid="184" transform="translate(700,8817)"><use xlink:href="#minus"/></g><g ed:togtopicid="186" transform="translate(724,9070)"><use xlink:href="#minus"/></g><g ed:togtopicid="188" transform="translate(652,9246)"><use xlink:href="#minus"/></g><g ed:togtopicid="190" transform="translate(701,9599)"><use xlink:href="#minus"/></g><g ed:togtopicid="192" transform="translate(655,10050)"><use xlink:href="#minus"/></g><g ed:togtopicid="196" transform="translate(631,10413)"><use xlink:href="#minus"/></g><g ed:togtopicid="198" transform="translate(691,10730)"><use xlink:href="#minus"/></g><g ed:togtopicid="200" transform="translate(794,10315)"><use xlink:href="#minus"/></g><g ed:togtopicid="202" transform="translate(914,10384)"><use xlink:href="#minus"/></g><g ed:togtopicid="204" transform="translate(818,10430)"><use xlink:href="#minus"/></g><g ed:togtopicid="206" transform="translate(818,10476)"><use xlink:href="#minus"/></g><g ed:togtopicid="210" transform="translate(782,10542)"><use xlink:href="#minus"/></g><g ed:togtopicid="216" transform="translate(830,10629)"><use xlink:href="#minus"/></g><g ed:togtopicid="218" transform="translate(890,10690)"><use xlink:href="#minus"/></g><g ed:togtopicid="220" transform="translate(890,10773)"><use xlink:href="#minus"/></g><g ed:togtopicid="222" transform="translate(842,10825)"><use xlink:href="#minus"/></g><g ed:togtopicid="224" transform="translate(854,10871)"><use xlink:href="#minus"/></g><g ed:togtopicid="226" transform="translate(861,9453)"><use xlink:href="#minus"/></g><g ed:togtopicid="228" transform="translate(841,9507)"><use xlink:href="#minus"/></g><g ed:togtopicid="230" transform="translate(861,9593)"><use xlink:href="#minus"/></g><g ed:togtopicid="232" transform="translate(816,9757)"><use xlink:href="#minus"/></g><g ed:togtopicid="234" transform="translate(797,9872)"><use xlink:href="#minus"/></g><g ed:togtopicid="236" transform="translate(797,9958)"><use xlink:href="#minus"/></g><g ed:togtopicid="238" transform="translate(927,10084)"><use xlink:href="#minus"/></g><g ed:togtopicid="240" transform="translate(930,10161)"><use xlink:href="#minus"/></g><g ed:togtopicid="242" transform="translate(794,10213)"><use xlink:href="#minus"/></g></svg>