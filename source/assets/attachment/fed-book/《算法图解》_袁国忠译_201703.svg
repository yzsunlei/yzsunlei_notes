<svg height="2076" viewBox="0 0 995 2076" ed:vSpacing="30" xmlns:xlink="http://www.w3.org/1999/xlink" id="page100" xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:ed="https://www.edrawsoft.cn/xml/2017/SVGExtensions/" ed:name="Page-1" width="995" ed:hSpacing="30"><style type="text/css"><![CDATA[
g[ed\:togtopicid],g[ed\:hyperlink],g[ed\:comment],g[ed\:note] {cursor:pointer;}
g[id] {-moz-user-select: none;-ms-user-select: none;user-select: none;}
svg text::selection,svg tspan::selection{background-color: #4285f4;color: #ffffff;fill: #ffffff;}
.st2 {fill:#303030;font-family:微软雅黑;font-size:12pt}
.st3 {fill:#454545;font-family:微软雅黑;font-size:10pt}
.st1 {fill:#ffffff;font-family:微软雅黑;font-size:14pt}
]]></style><defs><linearGradient y1="0%" y2="100%" id="lg1" x1="0%" x2="0%"><stop stop-color="#ffffff" offset="0"/><stop stop-color="#f0f5f0" offset="0.25"/><stop stop-color="#e1ebe1" offset="0.75"/><stop stop-color="#c8d7c8" offset="1"/></linearGradient></defs><rect fill="#ffffff" height="2076" y="0" x="0" width="995"/><path transform="matrix(1,0,0,1,174,567)" fill="none" ed:parentid="101" stroke-linecap="round" stroke-linejoin="round" id="103" stroke="#696969" ed:tosuperid="102" d="M-46.1,442.9C10.4,285.4,-56.4,-471.4,71.3,-471.4"/><path transform="matrix(1,0,0,1,174,673)" fill="none" ed:parentid="101" stroke-linecap="round" stroke-linejoin="round" id="105" stroke="#696969" ed:tosuperid="104" d="M-43.4,336.6C8.2,201.8,-54.3,-365.1,71.3,-365.1"/><path transform="matrix(1,0,0,1,174,779)" fill="none" ed:parentid="101" stroke-linecap="round" stroke-linejoin="round" id="107" stroke="#696969" ed:tosuperid="106" d="M-39.6,230.4C4.9,121.9,-50.1,-258.9,71.3,-258.9"/><path transform="matrix(1,0,0,1,174,876)" fill="none" ed:parentid="101" stroke-linecap="round" stroke-linejoin="round" id="109" stroke="#696969" ed:tosuperid="108" d="M-35.5,133.1C0.4,54.2,-27.1,-161.6,71.3,-161.6"/><path transform="matrix(1,0,0,1,174,1002)" fill="none" ed:parentid="101" stroke-linecap="round" stroke-linejoin="round" id="111" stroke="#696969" ed:tosuperid="110" d="M-7.5,7.9C15.4,-12.5,35.4,-36.4,71.3,-36.4"/><path transform="matrix(1,0,0,1,174,1110)" fill="none" ed:parentid="101" stroke-linecap="round" stroke-linejoin="round" id="113" stroke="#696969" ed:tosuperid="112" d="M-25,-43.1C2.9,-1.3,13.4,71.6,71.3,71.6"/><path transform="matrix(1,0,0,1,174,1162)" fill="none" ed:parentid="101" stroke-linecap="round" stroke-linejoin="round" id="115" stroke="#696969" ed:tosuperid="114" d="M-32.9,-95.3C-0.4,-30.2,-12.1,123.8,71.3,123.8"/><path transform="matrix(1,0,0,1,174,1248)" fill="none" ed:parentid="101" stroke-linecap="round" stroke-linejoin="round" id="117" stroke="#696969" ed:tosuperid="116" d="M-37.7,-181.4C2.6,-86.9,-41.5,209.9,71.3,209.9"/><path transform="matrix(1,0,0,1,174,1401)" fill="none" ed:parentid="101" stroke-linecap="round" stroke-linejoin="round" id="119" stroke="#696969" ed:tosuperid="118" d="M-43.3,-334.1C8.1,-199.9,-54.3,362.6,71.3,362.6"/><path transform="matrix(1,0,0,1,174,1502)" fill="none" ed:parentid="101" stroke-linecap="round" stroke-linejoin="round" id="121" stroke="#696969" ed:tosuperid="120" d="M-45.9,-435.8C10.2,-279.7,-56.3,464.3,71.3,464.3"/><path transform="matrix(1,0,0,1,174,1537)" fill="none" ed:parentid="101" stroke-linecap="round" stroke-linejoin="round" id="123" stroke="#696969" ed:tosuperid="122" d="M-46.7,-470.8C10.8,-307.7,-56.9,499.2,71.3,499.3"/><path transform="matrix(1,0,0,1,415,70)" fill="none" ed:parentid="102" stroke-linecap="round" stroke-linejoin="round" id="125" stroke="#696969" ed:tosuperid="124" d="M-13.5,24.9C2.7,24.9,-7.1,-24.9,13.5,-24.9"/><path transform="matrix(1,0,0,1,415,86)" fill="none" ed:parentid="102" stroke-linecap="round" stroke-linejoin="round" id="127" stroke="#696969" ed:tosuperid="126" d="M-13.5,9.4C-0.5,9.4,0.3,-9.4,13.5,-9.4"/><path transform="matrix(1,0,0,1,415,101)" fill="none" ed:parentid="102" stroke-linecap="round" stroke-linejoin="round" id="129" stroke="#696969" ed:tosuperid="128" d="M-13.5,-6.1C-1.3,-6.1,2.1,6.1,13.5,6.1"/><path transform="matrix(1,0,0,1,415,117)" fill="none" ed:parentid="102" stroke-linecap="round" stroke-linejoin="round" id="131" stroke="#696969" ed:tosuperid="130" d="M-13.5,-21.6C2.1,-21.6,-5.7,21.6,13.5,21.6"/><path transform="matrix(1,0,0,1,415,132)" fill="none" ed:parentid="102" stroke-linecap="round" stroke-linejoin="round" id="133" stroke="#696969" ed:tosuperid="132" d="M-13.5,-37.1C4.4,-37.1,-11.3,37.1,13.5,37.1"/><path transform="matrix(1,0,0,1,415,267)" fill="none" ed:parentid="104" stroke-linecap="round" stroke-linejoin="round" id="135" stroke="#696969" ed:tosuperid="134" d="M-13.5,40.4C4.8,40.4,-12,-40.4,13.5,-40.4"/><path transform="matrix(1,0,0,1,415,283)" fill="none" ed:parentid="104" stroke-linecap="round" stroke-linejoin="round" id="137" stroke="#696969" ed:tosuperid="136" d="M-13.5,24.9C2.7,24.9,-7.1,-24.9,13.5,-24.9"/><path transform="matrix(1,0,0,1,415,298)" fill="none" ed:parentid="104" stroke-linecap="round" stroke-linejoin="round" id="139" stroke="#696969" ed:tosuperid="138" d="M-13.5,9.4C-0.5,9.4,0.3,-9.4,13.5,-9.4"/><path transform="matrix(1,0,0,1,415,314)" fill="none" ed:parentid="104" stroke-linecap="round" stroke-linejoin="round" id="141" stroke="#696969" ed:tosuperid="140" d="M-13.5,-6.1C-1.3,-6.1,2.1,6.1,13.5,6.1"/><path transform="matrix(1,0,0,1,415,329)" fill="none" ed:parentid="104" stroke-linecap="round" stroke-linejoin="round" id="143" stroke="#696969" ed:tosuperid="142" d="M-13.5,-21.6C2.1,-21.6,-5.7,21.6,13.5,21.6"/><path transform="matrix(1,0,0,1,415,345)" fill="none" ed:parentid="104" stroke-linecap="round" stroke-linejoin="round" id="145" stroke="#696969" ed:tosuperid="144" d="M-13.5,-37.1C4.4,-37.1,-11.3,37.1,13.5,37.1"/><path transform="matrix(1,0,0,1,415,360)" fill="none" ed:parentid="104" stroke-linecap="round" stroke-linejoin="round" id="147" stroke="#696969" ed:tosuperid="146" d="M-13.5,-52.6C5.4,-52.6,-13.5,52.6,13.5,52.6"/><path transform="matrix(1,0,0,1,383,495)" fill="none" ed:parentid="106" stroke-linecap="round" stroke-linejoin="round" id="149" stroke="#696969" ed:tosuperid="148" d="M-13.5,24.9C2.7,24.9,-7.1,-24.9,13.5,-24.9"/><path transform="matrix(1,0,0,1,383,511)" fill="none" ed:parentid="106" stroke-linecap="round" stroke-linejoin="round" id="151" stroke="#696969" ed:tosuperid="150" d="M-13.5,9.4C-0.5,9.4,0.3,-9.4,13.5,-9.4"/><path transform="matrix(1,0,0,1,383,526)" fill="none" ed:parentid="106" stroke-linecap="round" stroke-linejoin="round" id="153" stroke="#696969" ed:tosuperid="152" d="M-13.5,-6.1C-1.3,-6.1,2.1,6.1,13.5,6.1"/><path transform="matrix(1,0,0,1,383,542)" fill="none" ed:parentid="106" stroke-linecap="round" stroke-linejoin="round" id="155" stroke="#696969" ed:tosuperid="154" d="M-13.5,-21.6C2.1,-21.6,-5.7,21.6,13.5,21.6"/><path transform="matrix(1,0,0,1,383,557)" fill="none" ed:parentid="106" stroke-linecap="round" stroke-linejoin="round" id="157" stroke="#696969" ed:tosuperid="156" d="M-13.5,-37.1C4.4,-37.1,-11.3,37.1,13.5,37.1"/><path transform="matrix(1,0,0,1,415,693)" fill="none" ed:parentid="108" stroke-linecap="round" stroke-linejoin="round" id="159" stroke="#696969" ed:tosuperid="158" d="M-13.5,21.9C2.1,21.9,-5.8,-21.9,13.5,-21.9"/><path transform="matrix(1,0,0,1,415,718)" fill="none" ed:parentid="108" stroke-linecap="round" stroke-linejoin="round" id="161" stroke="#696969" ed:tosuperid="160" d="M-13.5,-3.1C-2,-3.1,3.7,3.1,13.5,3.1"/><path transform="matrix(1,0,0,1,415,733)" fill="none" ed:parentid="108" stroke-linecap="round" stroke-linejoin="round" id="163" stroke="#696969" ed:tosuperid="162" d="M-13.5,-18.6C1.5,-18.6,-4.3,18.6,13.5,18.6"/><path transform="matrix(1,0,0,1,415,758)" fill="none" ed:parentid="108" stroke-linecap="round" stroke-linejoin="round" id="165" stroke="#696969" ed:tosuperid="164" d="M-13.5,-43.6C5,-43.6,-12.6,43.6,13.5,43.6"/><path transform="matrix(1,0,0,1,399,922)" fill="none" ed:parentid="110" stroke-linecap="round" stroke-linejoin="round" id="167" stroke="#696969" ed:tosuperid="166" d="M-13.5,43.4C5,43.4,-12.6,-43.4,13.5,-43.4"/><path transform="matrix(1,0,0,1,399,937)" fill="none" ed:parentid="110" stroke-linecap="round" stroke-linejoin="round" id="169" stroke="#696969" ed:tosuperid="168" d="M-13.5,27.9C3.2,27.9,-8.3,-27.9,13.5,-27.9"/><path transform="matrix(1,0,0,1,399,953)" fill="none" ed:parentid="110" stroke-linecap="round" stroke-linejoin="round" id="171" stroke="#696969" ed:tosuperid="170" d="M-13.5,12.4C0.2,12.4,-1.3,-12.4,13.5,-12.4"/><path transform="matrix(1,0,0,1,399,968)" fill="none" ed:parentid="110" stroke-linecap="round" stroke-linejoin="round" id="173" stroke="#696969" ed:tosuperid="172" d="M-13.5,-3.1C-2,-3.1,3.7,3.1,13.5,3.1"/><path transform="matrix(1,0,0,1,399,984)" fill="none" ed:parentid="110" stroke-linecap="round" stroke-linejoin="round" id="175" stroke="#696969" ed:tosuperid="174" d="M-13.5,-18.6C1.5,-18.6,-4.3,18.6,13.5,18.6"/><path transform="matrix(1,0,0,1,399,999)" fill="none" ed:parentid="110" stroke-linecap="round" stroke-linejoin="round" id="177" stroke="#696969" ed:tosuperid="176" d="M-13.5,-34.1C4.1,-34.1,-10.4,34.1,13.5,34.1"/><path transform="matrix(1,0,0,1,399,1015)" fill="none" ed:parentid="110" stroke-linecap="round" stroke-linejoin="round" id="179" stroke="#696969" ed:tosuperid="178" d="M-13.5,-49.6C5.3,-49.6,-13.3,49.6,13.5,49.6"/><path transform="matrix(1,0,0,1,399,1030)" fill="none" ed:parentid="110" stroke-linecap="round" stroke-linejoin="round" id="181" stroke="#696969" ed:tosuperid="180" d="M-13.5,-65.1C5.4,-65.1,-13.5,65.1,13.5,65.1"/><path transform="matrix(1,0,0,1,447,1177)" fill="none" ed:parentid="112" stroke-linecap="round" stroke-linejoin="round" id="185" stroke="#696969" ed:tosuperid="184" d="M-13.5,4.6C-1.6,4.6,2.9,-4.6,13.5,-4.6"/><path transform="matrix(1,0,0,1,415,1410)" fill="none" ed:parentid="116" stroke-linecap="round" stroke-linejoin="round" id="187" stroke="#696969" ed:tosuperid="186" d="M-13.5,48.1C5.3,48.1,-13.2,-48.1,13.5,-48.1"/><path transform="matrix(1,0,0,1,447,1192)" fill="none" ed:parentid="112" stroke-linecap="round" stroke-linejoin="round" id="189" stroke="#696969" ed:tosuperid="188" d="M-13.5,-10.9C-0.2,-10.9,-0.5,10.9,13.5,10.9"/><path transform="matrix(1,0,0,1,447,1208)" fill="none" ed:parentid="112" stroke-linecap="round" stroke-linejoin="round" id="191" stroke="#696969" ed:tosuperid="190" d="M-13.5,-26.4C2.9,-26.4,-7.7,26.4,13.5,26.4"/><path transform="matrix(1,0,0,1,415,1700)" fill="none" ed:parentid="118" stroke-linecap="round" stroke-linejoin="round" id="193" stroke="#696969" ed:tosuperid="192" d="M-13.5,63.6C5.4,63.6,-13.5,-63.6,13.5,-63.6"/><path transform="matrix(1,0,0,1,415,1715)" fill="none" ed:parentid="118" stroke-linecap="round" stroke-linejoin="round" id="195" stroke="#696969" ed:tosuperid="194" d="M-13.5,48.1C5.3,48.1,-13.2,-48.1,13.5,-48.1"/><path transform="matrix(1,0,0,1,415,1731)" fill="none" ed:parentid="118" stroke-linecap="round" stroke-linejoin="round" id="197" stroke="#696969" ed:tosuperid="196" d="M-13.5,32.6C3.9,32.6,-10,-32.6,13.5,-32.6"/><path transform="matrix(1,0,0,1,415,1746)" fill="none" ed:parentid="118" stroke-linecap="round" stroke-linejoin="round" id="199" stroke="#696969" ed:tosuperid="198" d="M-13.5,17.1C1.2,17.1,-3.6,-17.1,13.5,-17.1"/><path transform="matrix(1,0,0,1,415,1762)" fill="none" ed:parentid="118" stroke-linecap="round" stroke-linejoin="round" id="201" stroke="#696969" ed:tosuperid="200" d="M-13.5,1.6C-2.3,1.6,4.5,-1.6,13.5,-1.6"/><path transform="matrix(1,0,0,1,415,1777)" fill="none" ed:parentid="118" stroke-linecap="round" stroke-linejoin="round" id="203" stroke="#696969" ed:tosuperid="202" d="M-13.5,-13.9C0.5,-13.9,-2,13.9,13.5,13.9"/><path transform="matrix(1,0,0,1,415,1425)" fill="none" ed:parentid="116" stroke-linecap="round" stroke-linejoin="round" id="205" stroke="#696969" ed:tosuperid="204" d="M-13.5,32.6C3.9,32.6,-10,-32.6,13.5,-32.6"/><path transform="matrix(1,0,0,1,415,1441)" fill="none" ed:parentid="116" stroke-linecap="round" stroke-linejoin="round" id="207" stroke="#696969" ed:tosuperid="206" d="M-13.5,17.1C1.2,17.1,-3.6,-17.1,13.5,-17.1"/><path transform="matrix(1,0,0,1,415,1456)" fill="none" ed:parentid="116" stroke-linecap="round" stroke-linejoin="round" id="209" stroke="#696969" ed:tosuperid="208" d="M-13.5,1.6C-2.3,1.6,4.5,-1.6,13.5,-1.6"/><path transform="matrix(1,0,0,1,415,1472)" fill="none" ed:parentid="116" stroke-linecap="round" stroke-linejoin="round" id="211" stroke="#696969" ed:tosuperid="210" d="M-13.5,-13.9C0.5,-13.9,-2,13.9,13.5,13.9"/><path transform="matrix(1,0,0,1,415,1793)" fill="none" ed:parentid="118" stroke-linecap="round" stroke-linejoin="round" id="213" stroke="#696969" ed:tosuperid="212" d="M-13.5,-29.4C3.4,-29.4,-8.9,29.4,13.5,29.4"/><path transform="matrix(1,0,0,1,415,1824)" fill="none" ed:parentid="118" stroke-linecap="round" stroke-linejoin="round" id="215" stroke="#696969" ed:tosuperid="214" d="M-13.5,-60.4C5.4,-60.4,-13.5,60.4,13.5,60.4"/><path transform="matrix(1,0,0,1,603,1869)" fill="none" ed:parentid="214" stroke-linecap="round" stroke-linejoin="round" id="217" stroke="#696969" ed:tosuperid="216" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5"/><path transform="matrix(1,0,0,1,603,1884)" fill="none" ed:parentid="214" stroke-linecap="round" stroke-linejoin="round" id="219" stroke="#696969" ed:tosuperid="218" d="M-13.5,0C-2.7,0,5.4,0,13.5,0"/><path transform="matrix(1,0,0,1,603,1900)" fill="none" ed:parentid="214" stroke-linecap="round" stroke-linejoin="round" id="221" stroke="#696969" ed:tosuperid="220" d="M-13.5,-15.5C0.8,-15.5,-2.8,15.5,13.5,15.5"/><path transform="matrix(1,0,0,1,415,1503)" fill="none" ed:parentid="116" stroke-linecap="round" stroke-linejoin="round" id="223" stroke="#696969" ed:tosuperid="222" d="M-13.5,-44.9C5.1,-44.9,-12.8,44.9,13.5,44.9"/><path transform="matrix(1,0,0,1,577,1532)" fill="none" ed:parentid="222" stroke-linecap="round" stroke-linejoin="round" id="225" stroke="#696969" ed:tosuperid="224" d="M-13.5,15.5C0.8,15.5,-2.8,-15.5,13.5,-15.5"/><path transform="matrix(1,0,0,1,577,1548)" fill="none" ed:parentid="222" stroke-linecap="round" stroke-linejoin="round" id="227" stroke="#696969" ed:tosuperid="226" d="M-13.5,0C-2.7,0,5.4,0,13.5,0"/><path transform="matrix(1,0,0,1,577,1563)" fill="none" ed:parentid="222" stroke-linecap="round" stroke-linejoin="round" id="229" stroke="#696969" ed:tosuperid="228" d="M-13.5,-15.5C0.8,-15.5,-2.8,15.5,13.5,15.5"/><g transform="matrix(1,0,0,1,23,1010)" ed:height="57" ed:layout="rightmap" ed:width="159" id="101" ed:topictype="mainidea"><path fill="#435fbc" stroke-linejoin="round" stroke="#435fbc" stroke-width="3" d="M4,0L155,0C157.7,0,159,1.3,159,4L159,53C159,55.7,157.7,57,155,57L4,57C1.3,57,0,55.7,0,53L0,4C0,1.3,1.3,0,4,0z"/><text class="st1"><tspan y="34.5" x="21" style="white-space:pre">《算法图解》</tspan></text></g><g transform="matrix(1,0,0,1,245,77)" ed:height="37" ed:parentid="101" ed:width="156" id="102"><path fill="#ebecf3" stroke-linejoin="round" stroke="#ebecf3" d="M4,0L152,0C154.7,0,156,1.3,156,4L156,33C156,35.7,154.7,37,152,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z"/><text class="st2"><tspan y="23.4" x="18" style="white-space:pre">第一章 算法简介</tspan></text></g><g transform="matrix(1,0,0,1,245,289)" ed:height="37" ed:parentid="101" ed:width="156" id="104"><path fill="#ebecf3" stroke-linejoin="round" stroke="#ebecf3" d="M4,0L152,0C154.7,0,156,1.3,156,4L156,33C156,35.7,154.7,37,152,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z"/><text class="st2"><tspan y="23.4" x="18" style="white-space:pre">第二章 选择排序</tspan></text></g><g transform="matrix(1,0,0,1,245,502)" ed:height="37" ed:parentid="101" ed:width="124" id="106"><path fill="#ebecf3" stroke-linejoin="round" stroke="#ebecf3" d="M4,0L120,0C122.7,0,124,1.3,124,4L124,33C124,35.7,122.7,37,120,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z"/><text class="st2"><tspan y="23.4" x="18" style="white-space:pre">第三章 递归</tspan></text></g><g transform="matrix(1,0,0,1,245,696)" ed:height="37" ed:parentid="101" ed:width="156" id="108"><path fill="#ebecf3" stroke-linejoin="round" stroke="#ebecf3" d="M4,0L152,0C154.7,0,156,1.3,156,4L156,33C156,35.7,154.7,37,152,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z"/><text class="st2"><tspan y="23.4" x="18" style="white-space:pre">第四章 快速排序</tspan></text></g><g transform="matrix(1,0,0,1,245,947)" ed:height="37" ed:parentid="101" ed:width="140" id="110"><path fill="#ebecf3" stroke-linejoin="round" stroke="#ebecf3" d="M4,0L136,0C138.7,0,140,1.3,140,4L140,33C140,35.7,138.7,37,136,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z"/><text class="st2"><tspan y="23.4" x="18" style="white-space:pre">第五章 散列表</tspan></text></g><g transform="matrix(1,0,0,1,245,1163)" ed:height="37" ed:parentid="101" ed:width="188" id="112"><path fill="#ebecf3" stroke-linejoin="round" stroke="#ebecf3" d="M4,0L184,0C186.7,0,188,1.3,188,4L188,33C188,35.7,186.7,37,184,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z"/><text class="st2"><tspan y="23.4" x="18" style="white-space:pre">第六章 广度优先搜索</tspan></text></g><g transform="matrix(1,0,0,1,245,1267)" ed:height="37" ed:parentid="101" ed:width="204" id="114"><path fill="#ebecf3" stroke-linejoin="round" stroke="#ebecf3" d="M4,0L200,0C202.7,0,204,1.3,204,4L204,33C204,35.7,202.7,37,200,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z"/><text class="st2"><tspan y="23.4" x="18" style="white-space:pre">第七章 狄克斯特拉算法</tspan></text></g><g transform="matrix(1,0,0,1,245,1439)" ed:height="37" ed:parentid="101" ed:width="156" id="116"><path fill="#ebecf3" stroke-linejoin="round" stroke="#ebecf3" d="M4,0L152,0C154.7,0,156,1.3,156,4L156,33C156,35.7,154.7,37,152,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z"/><text class="st2"><tspan y="23.4" x="18" style="white-space:pre">第八章 贪婪算法</tspan></text></g><g transform="matrix(1,0,0,1,245,1745)" ed:height="37" ed:parentid="101" ed:width="156" id="118"><path fill="#ebecf3" stroke-linejoin="round" stroke="#ebecf3" d="M4,0L152,0C154.7,0,156,1.3,156,4L156,33C156,35.7,154.7,37,152,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z"/><text class="st2"><tspan y="23.4" x="18" style="white-space:pre">第九章 动态规划</tspan></text></g><g transform="matrix(1,0,0,1,245,1948)" ed:height="37" ed:parentid="101" ed:width="182" id="120"><path fill="#ebecf3" stroke-linejoin="round" stroke="#ebecf3" d="M4,0L178,0C180.7,0,182,1.3,182,4L182,33C182,35.7,180.7,37,178,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z"/><text class="st2"><tspan y="23.4" x="18" style="white-space:pre">第十章 K最近邻算法</tspan></text></g><g transform="matrix(1,0,0,1,245,2018)" ed:height="37" ed:parentid="101" ed:width="204" id="122"><path fill="#ebecf3" stroke-linejoin="round" stroke="#ebecf3" d="M4,0L200,0C202.7,0,204,1.3,204,4L204,33C204,35.7,202.7,37,200,37L4,37C1.3,37,0,35.7,0,33L0,4C0,1.3,1.3,0,4,0z"/><text class="st2"><tspan y="23.4" x="18" style="white-space:pre">第十一章 接下来如何做</tspan></text></g><g transform="matrix(1,0,0,1,428,21)" ed:height="24.5" ed:parentid="102" ed:width="213" id="124"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L213,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">二分查找的速度比简单查找快得多</tspan></text></g><g transform="matrix(1,0,0,1,428,52)" ed:height="24.5" ed:parentid="102" ed:width="417" id="126"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L417,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">O（log n）比O（n）快。需要搜索的元素越多，前者比后者就快得多</tspan></text></g><g transform="matrix(1,0,0,1,428,83)" ed:height="24.5" ed:parentid="102" ed:width="187" id="128"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L187,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">算法运行时间并不以秒为单位</tspan></text></g><g transform="matrix(1,0,0,1,428,114)" ed:height="24.5" ed:parentid="102" ed:width="239" id="130"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L239,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">算法运行时间是从其增速的角度度量的</tspan></text></g><g transform="matrix(1,0,0,1,428,145)" ed:height="24.5" ed:parentid="102" ed:width="198" id="132"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L198,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">算法运行时间用大O表示法表示</tspan></text></g><g transform="matrix(1,0,0,1,428,203)" ed:height="24.5" ed:parentid="104" ed:width="174" id="134"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L174,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">计算机内存犹如一大推抽屉</tspan></text></g><g transform="matrix(1,0,0,1,428,234)" ed:height="24.5" ed:parentid="104" ed:width="252" id="136"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L252,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">需要存储多个元素时，可使用数组或链表</tspan></text></g><g transform="matrix(1,0,0,1,428,265)" ed:height="24.5" ed:parentid="104" ed:width="135" id="138"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L135,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">数组的元素都在一起</tspan></text></g><g transform="matrix(1,0,0,1,428,296)" ed:height="24.5" ed:parentid="104" ed:width="382" id="140"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L382,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">链表的元素是分开的，其中每个元素都存储了下一个元素的地址</tspan></text></g><g transform="matrix(1,0,0,1,428,327)" ed:height="24.5" ed:parentid="104" ed:width="135" id="142"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L135,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">数组的读取速度很快</tspan></text></g><g transform="matrix(1,0,0,1,428,358)" ed:height="24.5" ed:parentid="104" ed:width="174" id="144"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L174,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">链表的插入和删除速度很快</tspan></text></g><g transform="matrix(1,0,0,1,428,389)" ed:height="24.5" ed:parentid="104" ed:width="414" id="146"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L414,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">在同一个数组中，所有元素的类型都必须相同（都为int、double等）</tspan></text></g><g transform="matrix(1,0,0,1,396,446)" ed:height="24.5" ed:parentid="106" ed:width="174" id="148"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L174,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">递归指的是调用自己的函数</tspan></text></g><g transform="matrix(1,0,0,1,396,477)" ed:height="24.5" ed:parentid="106" ed:width="304" id="150"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L304,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">每个递归函数都有两个条件：基线条件和递归条件</tspan></text></g><g transform="matrix(1,0,0,1,396,508)" ed:height="24.5" ed:parentid="106" ed:width="174" id="152"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L174,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">栈有两种操作：压入和弹出</tspan></text></g><g transform="matrix(1,0,0,1,396,539)" ed:height="24.5" ed:parentid="106" ed:width="174" id="154"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L174,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">所有函数调用都进入调用栈</tspan></text></g><g transform="matrix(1,0,0,1,396,570)" ed:height="24.5" ed:parentid="106" ed:width="239" id="156"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L239,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">调用栈可能很长，这将占用大量的内存</tspan></text></g><g transform="matrix(1,0,0,1,428,628)" ed:height="43.5" ed:parentid="108" ed:width="514" id="158"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,43.5L514,43.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">D&amp;C将问题逐步分解。使用D&amp;C处理列表时，基线条件很可能是空数组或只包含一个</tspan><tspan y="35.1" x="8" style="white-space:pre">元素的数组</tspan></text></g><g transform="matrix(1,0,0,1,428,678)" ed:height="43.5" ed:parentid="108" ed:width="514" id="160"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,43.5L514,43.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">实现快速排序时，请随机地选择用作基准值得元素。快速排序的平均运行时间为</tspan><tspan y="35.1" x="8" style="white-space:pre">O（nlog n）</tspan></text></g><g transform="matrix(1,0,0,1,428,728)" ed:height="24.5" ed:parentid="108" ed:width="471" id="162"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L471,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">大O表示法中的常量有时候事关重大，这就是快速排序比合并排序快得原因所在</tspan></text></g><g transform="matrix(1,0,0,1,428,759)" ed:height="43.5" ed:parentid="108" ed:width="514" id="164"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,43.5L514,43.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">比较简单查找和二分查找时，常量几乎无关紧要，因为列表很长时，O（log n）的速</tspan><tspan y="35.1" x="8" style="white-space:pre">度比O（n）快得多</tspan></text></g><g transform="matrix(1,0,0,1,412,835)" ed:height="43.5" ed:parentid="110" ed:width="514" id="166"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,43.5L514,43.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">散列表是一种功能强大的数据结构，其操作速度快，还能让你以不同的方式建立数据模</tspan><tspan y="35.1" x="8" style="white-space:pre">型</tspan></text></g><g transform="matrix(1,0,0,1,412,885)" ed:height="24.5" ed:parentid="110" ed:width="239" id="168"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L239,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">可以结合散列函数和数组来创建散列表</tspan></text></g><g transform="matrix(1,0,0,1,412,916)" ed:height="24.5" ed:parentid="110" ed:width="330" id="170"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L330,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">冲突很糟糕，应使用可以最大限度减少冲突的散列函数</tspan></text></g><g transform="matrix(1,0,0,1,412,947)" ed:height="24.5" ed:parentid="110" ed:width="252" id="172"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L252,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">散列表的查找、插入和删除速度都非常快</tspan></text></g><g transform="matrix(1,0,0,1,412,978)" ed:height="24.5" ed:parentid="110" ed:width="187" id="174"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L187,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">散列表适合用于模拟映射关系</tspan></text></g><g transform="matrix(1,0,0,1,412,1009)" ed:height="24.5" ed:parentid="110" ed:width="284" id="176"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L284,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">一旦填装因子超过0.7，就该调整散列表的长度</tspan></text></g><g transform="matrix(1,0,0,1,412,1040)" ed:height="24.5" ed:parentid="110" ed:width="303" id="178"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L303,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">散列表可用于缓存数据（例如，在web服务器上）</tspan></text></g><g transform="matrix(1,0,0,1,412,1071)" ed:height="24.5" ed:parentid="110" ed:width="187" id="180"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L187,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">散列表非常适合用于防止重复</tspan></text></g><g transform="matrix(1,0,0,1,460,1129)" ed:height="43.5" ed:parentid="112" ed:width="514" id="184"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,43.5L514,43.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">面临类似于寻找最短路径的问题时，可尝试使用图来建立模型，再使用广度优先搜索来</tspan><tspan y="35.1" x="8" style="white-space:pre">解决问题</tspan></text></g><g transform="matrix(1,0,0,1,428,1337)" ed:height="24.5" ed:parentid="116" ed:width="356" id="186"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L356,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">贪婪算法寻找局部最优解，企图以这种方式获得全局最优解</tspan></text></g><g transform="matrix(1,0,0,1,460,1179)" ed:height="24.5" ed:parentid="112" ed:width="235" id="188"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L235,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">图由节点（node）和边（edge）组成</tspan></text></g><g transform="matrix(1,0,0,1,460,1210)" ed:height="24.5" ed:parentid="112" ed:width="356" id="190"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L356,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">对于检查过的，务必不要再去检查，否则可能导致无限循环</tspan></text></g><g transform="matrix(1,0,0,1,428,1612)" ed:height="24.5" ed:parentid="118" ed:width="343" id="192"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L343,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">需要在给定约束条件下优化某种指标时，动态规划很有用</tspan></text></g><g transform="matrix(1,0,0,1,428,1643)" ed:height="24.5" ed:parentid="118" ed:width="317" id="194"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L317,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">问题可分解为离散子问题时，可使用动态规划来解决</tspan></text></g><g transform="matrix(1,0,0,1,428,1674)" ed:height="24.5" ed:parentid="118" ed:width="213" id="196"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L213,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">每种动态规划解决方案都设计网格</tspan></text></g><g transform="matrix(1,0,0,1,428,1705)" ed:height="24.5" ed:parentid="118" ed:width="226" id="198"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L226,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">单元格中的值通常就是你要优化的值</tspan></text></g><g transform="matrix(1,0,0,1,428,1736)" ed:height="24.5" ed:parentid="118" ed:width="421" id="200"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L421,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">每个单元格都是一个子问题，因此你需要考虑如何将问题分解为子问题</tspan></text></g><g transform="matrix(1,0,0,1,428,1767)" ed:height="24.5" ed:parentid="118" ed:width="304" id="202"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L304,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">没有放之四海皆准的计算动态规划解决方案的公式</tspan></text></g><g transform="matrix(1,0,0,1,428,1368)" ed:height="24.5" ed:parentid="116" ed:width="271" id="204"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L271,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">对于NP完全问题，还没有找到快速解决方案</tspan></text></g><g transform="matrix(1,0,0,1,428,1399)" ed:height="24.5" ed:parentid="116" ed:width="297" id="206"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L297,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">面临NP完全问题时，最佳的做法是使用近似算法</tspan></text></g><g transform="matrix(1,0,0,1,428,1430)" ed:height="24.5" ed:parentid="116" ed:width="317" id="208"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L317,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">贪婪算法易于实现、运行速度快，是不错的近似算法</tspan></text></g><g transform="matrix(1,0,0,1,428,1461)" ed:height="24.5" ed:parentid="116" ed:width="200" id="210"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L200,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">经典的背包问题（重量和价值）</tspan></text></g><g transform="matrix(1,0,0,1,428,1798)" ed:height="24.5" ed:parentid="118" ed:width="226" id="212"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L226,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">经典的旅行商问题（城市路径选择）</tspan></text></g><g transform="matrix(1,0,0,1,428,1860)" ed:height="24.5" ed:parentid="118" ed:width="161" id="214"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L161,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">三个子目标（来自知乎）</tspan></text></g><g transform="matrix(1,0,0,1,616,1829)" ed:height="24.5" ed:parentid="214" ed:width="143" id="216"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L143,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">1、建立状态转移方程</tspan></text></g><g transform="matrix(1,0,0,1,616,1860)" ed:height="24.5" ed:parentid="214" ed:width="156" id="218"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L156,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">2、缓存并复用以往结果</tspan></text></g><g transform="matrix(1,0,0,1,616,1891)" ed:height="24.5" ed:parentid="214" ed:width="143" id="220"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L143,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">3、按顺序从小往大算</tspan></text></g><g transform="matrix(1,0,0,1,428,1523)" ed:height="24.5" ed:parentid="116" ed:width="135" id="222"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L135,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">三步走（来自知乎）</tspan></text></g><g transform="matrix(1,0,0,1,590,1492)" ed:height="24.5" ed:parentid="222" ed:width="169" id="224"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L169,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">1、明确到底什么是最优解</tspan></text></g><g transform="matrix(1,0,0,1,590,1523)" ed:height="24.5" ed:parentid="222" ed:width="195" id="226"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L195,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">2、明确什么是子问题的最优解</tspan></text></g><g transform="matrix(1,0,0,1,590,1554)" ed:height="24.5" ed:parentid="222" ed:width="299" id="228"><path fill="none" stroke-linejoin="round" stroke="#696969" d="M0,24.5L299,24.5"/><text class="st3"><tspan y="16.1" x="8" style="white-space:pre">3、分别求出子问题的最优解再堆叠出全局最优解</tspan></text></g><symbol id="plus"><path fill="url(#lg1)" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6z"/><path fill="none" stroke-width="0.7" stroke="#46a000" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6zM3,6L9,6M6,3L6,9"/></symbol><symbol id="minus"><path fill="url(#lg1)" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6z"/><path fill="none" stroke-width="0.7" stroke="#46a000" d="M11,6C11,8.8,8.8,11,6,11C3.2,11,1,8.8,1,6C1,3.2,3.2,1,6,1C8.8,1,11,3.2,11,6zM3,6L9,6"/></symbol><g transform="translate(183,1032)" ed:togtopicid="101"><use xlink:href="#minus"/></g><g transform="translate(402,89)" ed:togtopicid="102"><use xlink:href="#minus"/></g><g transform="translate(402,302)" ed:togtopicid="104"><use xlink:href="#minus"/></g><g transform="translate(370,514)" ed:togtopicid="106"><use xlink:href="#minus"/></g><g transform="translate(402,709)" ed:togtopicid="108"><use xlink:href="#minus"/></g><g transform="translate(386,959)" ed:togtopicid="110"><use xlink:href="#minus"/></g><g transform="translate(434,1175)" ed:togtopicid="112"><use xlink:href="#minus"/></g><g transform="translate(402,1452)" ed:togtopicid="116"><use xlink:href="#minus"/></g><g transform="translate(402,1757)" ed:togtopicid="118"><use xlink:href="#minus"/></g><g transform="translate(590,1866)" ed:togtopicid="214"><use xlink:href="#minus"/></g><g transform="translate(564,1529)" ed:togtopicid="222"><use xlink:href="#minus"/></g></svg>